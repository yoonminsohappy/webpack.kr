"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9598],{9598:function(n,s,a){a.r(s),s.default='<p>원래 청크(및 그 안에 가져온 모듈)는 webpack 내부 그래프에서 부모-자식 관계로 연결되었습니다. <code>CommonsChunkPlugin</code>은 중복되는 의존성을 피하고자 사용되었지만, 추가 최적화는 불가능했습니다.</p> <p>webpack v4부터 <code>optimization.splitChunks</code>를 위해 <code>CommonsChunkPlugin</code>은 제거되었습니다.</p> <h2 id="defaults">Defaults<a href="#defaults" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>즉시 사용 가능한 <code>SplitChunksPlugin</code>은 대부분의 사용자에게 잘 작동합니다.</p> <p>초기 청크를 변경하면 HTML 파일이 프로젝트를 실행하기 위해 포함해야 하는 스크립트 태그에 영향을 미치기 때문에 기본적으로 on-demand 청크에만 영향을 미칩니다.</p> <p>webpack은 다음 조건에 따라 자동으로 청크를 분할합니다.</p> <ul> <li>새 청크를 공유 할 수 있거나 모듈이 <code>node_modules</code> 폴더에 있는 경우</li> <li>새 청크가 20kb보다 클 경우(min+gz 이전에)</li> <li>요청 시 청크를 로드할 때 최대 병렬 요청 수가 30개 이하일 경우</li> <li>초기 페이지 로드 시 최대 병렬 요청 수가 30개 이하일 경우</li> </ul> <p>마지막 두 가지 조건을 충족하려고 할 때 더 큰 청크가 선호됩니다.</p> <h2 id="configuration">Configuration<a href="#configuration" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>webpack은 이 기능에 대한 더 많은 제어를 원하는 개발자를 위해 옵션 세트를 제공합니다.</p> <aside class="warning"><h6 class="warning__prefix">warning</h6><p>웹 성능 모범 사례에 맞게 기본 설정이 선택되어 있지만, 프로젝트에 대한 최적의 전략은 다를 수 있습니다. 설정을 변경하는 경우 실제 이점이 있는지 확인하기 위해 변경 사항의 영향을 측정해야 합니다.</p></aside> <h2 id="optimizationsplitchunks"><code>optimization.splitChunks</code><a href="#optimizationsplitchunks" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>이 설정 객체는 <code>SplitChunksPlugin</code>의 기본 동작을 나타냅니다.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    splitChunks<span class="token operator">:</span> <span class="token punctuation">{</span>\n      chunks<span class="token operator">:</span> <span class="token string">\'async\'</span><span class="token punctuation">,</span>\n      minSize<span class="token operator">:</span> <span class="token number">20000</span><span class="token punctuation">,</span>\n      minRemainingSize<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n      minChunks<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n      maxAsyncRequests<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>\n      maxInitialRequests<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>\n      enforceSizeThreshold<span class="token operator">:</span> <span class="token number">50000</span><span class="token punctuation">,</span>\n      cacheGroups<span class="token operator">:</span> <span class="token punctuation">{</span>\n        defaultVendors<span class="token operator">:</span> <span class="token punctuation">{</span>\n          test<span class="token operator">:</span> <span class="token regex">/[\\\\/]node_modules[\\\\/]/</span><span class="token punctuation">,</span>\n          priority<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span>\n          reuseExistingChunk<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          minChunks<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n          priority<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span>\n          reuseExistingChunk<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <aside class="warning"><h6 class="warning__prefix">warning</h6><p>webpack에서 파일 경로를 처리할 때 항상 Unix 시스템에서는 <code>/</code>, Windows에서는 <code>\\</code>를 포함합니다. 그렇기 때문에 <code>{cacheGroup}.test</code> 필드에 <code>[\\\\/]</code>를 사용하여 경로 구분자를 나타내야 합니다. <code>{cacheGroup}.test</code>의 <code>/</code> 또는 <code>\\</code>는 크로스 플랫폼 사용 시 문제를 유발합니다.</p></aside> <aside class="warning"><h6 class="warning__prefix">warning</h6><p>webpack 5부터 <code>{cacheGroup}.test</code>에 엔트리 이름을 전달하고 <code>{cacheGroup}.name</code>에 기존 청크 이름을 사용하는 것은 더는 허용되지 않습니다.</p></aside> <h3 id="splitchunksautomaticnamedelimiter"><code>splitChunks.automaticNameDelimiter</code><a href="#splitchunksautomaticnamedelimiter" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>string = \'~\'</code></p> <p>기본적으로 webpack은 출처와 청크 이름을 사용하여 이름을 생성합니다(예: <code>vendors~main.js</code>). 이 옵션을 사용하면 생성된 이름에 사용할 구분 기호를 지정할 수 있습니다.</p> <h3 id="splitchunkschunks"><code>splitChunks.chunks</code><a href="#splitchunkschunks" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>string = \'async\'</code> <code>function (chunk)</code></p> <p>이것은 최적화를 위해 선택될 청크를 나타냅니다. 문자열이 제공될 때 유효한 값은 <code>all</code>, <code>async</code> 및 <code>initial</code>입니다. <code>all</code>을 제공하는 것은 비동기 청크와 동기 청크 간에도 청크를 공유할 수 있다는 것을 의미하기 때문에 특히 강력할 수 있습니다.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    splitChunks<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 모든 유형의 청크를 포함합니다.</span>\n      chunks<span class="token operator">:</span> <span class="token string">\'all\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>또는 더 많은 제어를 위한 기능을 제공할 수 있습니다. 반환 값은 각 청크를 포함할지 여부를 나타냅니다.</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    splitChunks<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token function">chunks</span><span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// `my-excluded-chunk`를 제외합니다.</span>\n        <span class="token keyword">return</span> chunk<span class="token punctuation">.</span>name <span class="token operator">!==</span> <span class="token string">\'my-excluded-chunk\'</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>이 설정을 <a href="/plugins/html-webpack-plugin/">HtmlWebpackPlugin</a>과 결합할 수 있습니다. 이는 생성 된 모든 vendor 청크를 주입합니다.</p></aside> <h3 id="splitchunksmaxasyncrequests"><code>splitChunks.maxAsyncRequests</code><a href="#splitchunksmaxasyncrequests" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>number = 30</code></p> <p>on-demand 로드 시의 최대 병렬 요청 수입니다.</p> <h3 id="splitchunksmaxinitialrequests"><code>splitChunks.maxInitialRequests</code><a href="#splitchunksmaxinitialrequests" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>number = 30</code></p> <p>엔트리 포인트의 최대 병렬 요청 수입니다.</p> <h3 id="splitchunksdefaultsizetypes"><code>splitChunks.defaultSizeTypes</code><a href="#splitchunksdefaultsizetypes" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>[string] = [\'javascript\', \'unknown\']</code></p> <p>크기에 숫자를 사용할 때 적용되는 크기 유형을 설정합니다.</p> <h3 id="splitchunksminchunks"><code>splitChunks.minChunks</code><a href="#splitchunksminchunks" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>number = 1</code></p> <p>모듈이 분할 전에 청크간에 공유되어야 하는 최소 시간입니다.</p> <h3 id="splitchunkshidepathinfo"><code>splitChunks.hidePathInfo</code><a href="#splitchunkshidepathinfo" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>boolean</code></p> <p>maxSize로 분할된 부분의 이름을 만들 때 경로 정보가 노출되지 않도록 합니다.</p> <h3 id="splitchunksminsize"><code>splitChunks.minSize</code><a href="#splitchunksminsize" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>number = 20000</code></p> <p>생성할 청크의 최소 byte 크기입니다.</p> <h3 id="splitchunksenforcesizethreshold"><code>splitChunks.enforceSizeThreshold</code><a href="#splitchunksenforcesizethreshold" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <h4 id="splitchunkscachegroupscachegroupenforcesizethreshold"><code>splitChunks.cacheGroups.{cacheGroup}.enforceSizeThreshold</code><a href="#splitchunkscachegroupscachegroupenforcesizethreshold" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p><code>number = 50000</code></p> <p>분할이 적용되고 기타 제한(minRemainingSize, maxAsyncRequests, maxInitialRequests)이 무시되는 임계 크기 값입니다.</p> <h3 id="splitchunksminremainingsize"><code>splitChunks.minRemainingSize</code><a href="#splitchunksminremainingsize" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <h4 id="splitchunkscachegroupscachegroupminremainingsize"><code>splitChunks.cacheGroups.{cacheGroup}.minRemainingSize</code><a href="#splitchunkscachegroupscachegroupminremainingsize" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p><code>number = 0</code></p> <p><code>splitChunks.minRemainingSize</code> 옵션은 분할 후 남아있는 청크의 최소 크기가 제한을 초과하도록 하여 크기가 0인 모듈을 방지하기 위해 webpack 5에 도입되었습니다. <a href="/configuration/mode/#mode-development">\'development\' 모드</a>에서 기본값은 <code>0</code>입니다. 다른 경우 <code>splitChunks.minRemainingSize</code>는 기본적으로 <code>splitChunks.minSize</code> 값으로 설정되므로 심층 제어가 필요한 드문 경우를 제외하고는 수동으로 지정할 필요가 없습니다.</p> <aside class="warning"><h6 class="warning__prefix">warning</h6><p><code>splitChunks.minRemainingSize</code>는 단일 청크가 남아있을 때만 적용됩니다.</p></aside> <h3 id="splitchunkslayer"><code>splitChunks.layer</code><a href="#splitchunkslayer" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <h4 id="splitchunkscachegroupscachegrouplayer"><code>splitChunks.cacheGroups.{cacheGroup}.layer</code><a href="#splitchunkscachegroupscachegrouplayer" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p><code>RegExp</code> <code>string</code> <code>function</code></p> <p>모듈 계층별로 캐시 그룹에 모듈을 할당합니다.</p> <h3 id="splitchunksmaxsize"><code>splitChunks.maxSize</code><a href="#splitchunksmaxsize" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>number = 0</code></p> <p><code>maxSize</code>를 사용하면(캐시 그룹 <code>optimization.splitChunks.cacheGroups[x].maxSize</code>당 전역적으로 <code>optimization.splitChunks.maxSize</code> 또는 대체 캐시 그룹 <code>optimization.splitChunks.fallbackCacheGroup.maxSize</code>의 경우) webpack이 <code>maxSize</code> byte보다 큰 청크를 더 작은 부분으로 분할하도록 합니다. 분할된 크기는 최소 <code>minSize</code>(<code>maxSize</code> 다음)입니다. 알고리즘은 결정론적이며 모듈 변경은 로컬에만 영향을 미칩니다. 따라서 장기 캐싱을 사용할 때 사용할 수 있으며 기록이 필요하지 않습니다. <code>maxSize</code>는 힌트일 뿐이며 모듈이 <code>maxSize</code> 보다 크거나 분할이 <code>minSize</code>를 벗어날 때 위반될 수 있습니다.</p> <p>청크에 이미 이름이 있는 경우 각 부분은 해당 이름에서 파생된 새 이름을 얻습니다. <code>optimization.splitChunks.hidePathInfo</code>의 값에 따라 첫 번째 모듈 이름이나 해시에서 파생된 키를 추가합니다.</p> <p><code>maxSize</code> 옵션은 HTTP/2 및 장기 캐싱과 함께 사용하기 위한 것입니다. 더 나은 캐싱을 위해 요청수가 증가합니다. 빠른 재구축을 위해 파일 크기를 줄이는 데도 사용할 수 있습니다.</p> <aside class="tip"><h6 class="tip__prefix">tip</h6><p><code>maxSize</code>는 <code>maxInitialRequest/maxAsyncRequests</code>보다 우선순위가 높습니다. 실제 우선순위는 <code>maxInitialRequest/maxAsyncRequests &#x3C; maxSize &#x3C; minSize</code>입니다.</p></aside> <aside class="tip"><h6 class="tip__prefix">tip</h6><p><code>maxSize</code> 값을 설정하면 <code>maxAsyncSize</code> 및 <code>maxInitialSize</code> 값이 모두 설정됩니다.</p></aside> <h3 id="splitchunksmaxasyncsize"><code>splitChunks.maxAsyncSize</code><a href="#splitchunksmaxasyncsize" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>number</code></p> <p><code>maxSize</code>와 마찬가지로 <code>maxAsyncSize</code>는 전역적으로(<code>splitChunks.maxAsyncSize</code>) 캐시 그룹(<code>splitChunks.cacheGroups.{cacheGroup}.maxAsyncSize</code>) 또는 대체 캐시 그룹(<code>splitChunks.fallbackCacheGroup.maxAsyncSize</code>)에 적용될 수 있습니다.</p> <p><code>maxAsyncSize</code>와 <code>maxSize</code>의 차이점은 <code>maxAsyncSize</code>가 on-demand 로딩 청크에만 영향을 미친다는 점입니다.</p> <h3 id="splitchunksmaxinitialsize"><code>splitChunks.maxInitialSize</code><a href="#splitchunksmaxinitialsize" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>number</code></p> <p><code>maxSize</code>와 마찬가지로 <code>maxInitialSize</code>는 전역적으로(<code>splitChunks.maxInitialSize</code>) 캐시 그룹(<code>splitChunks.cacheGroups.{cacheGroup}.maxInitialSize</code>) 또는 대체 캐시 그룹(<code>splitChunks.fallbackCacheGroup.maxInitialSize</code>)에 적용될 수 있습니다.</p> <p><code>maxInitialSize</code>와 <code>maxSize</code>의 차이점은 <code>maxInitialSize</code>가 초기 로딩 청크 에만 영향을 미친다는 것입니다.</p> <h3 id="splitchunksname"><code>splitChunks.name</code><a href="#splitchunksname" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>boolean = false</code> <code>function (module, chunks, cacheGroupKey) => string</code> <code>string</code></p> <p>또한 <code>splitChunks.cacheGroups.{cacheGroup}.name</code>와 같이 각 캐시 그룹에 대해서도 사용 가능합니다.</p> <p>이는 분할 청크의 이름입니다. <code>false</code>를 제공하면 청크의 이름이 동일하게 유지되므로 불필요하게 이름이 변경되지 않습니다. 프로덕션 빌드에 권장되는 값입니다.</p> <p>문자열이나 함수를 제공하면 이름을 커스텀 할 수 있습니다. 항상 같은 문자열을 반환하는 문자열이나 함수를 지정하면 모든 공통 모듈과 vendor가 단일 청크로 병합됩니다. 이로 인해 초기 다운로드가 더 커지고 페이지 로드가 느려질 수 있습니다.</p> <p>함수를 명시한 경우 청크의 이름을 선택하는 데 특히 유용한 <code>chunk.name</code> 및 <code>chunk.hash</code> 속성(여기서 <code>chunk</code>는 <code>chunks</code> 배열의 요소)을 찾을 수 있습니다.</p> <p><code>splitChunks.name</code>이 <a href="/configuration/entry-context/#entry">엔트리 포인트</a>와 일치하면 엔트리 포인트가 제거됩니다.</p> <p><strong>main.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> _ <span class="token keyword">from</span> <span class="token string">\'lodash\'</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'Hello\'</span><span class="token punctuation">,</span> <span class="token string">\'webpack\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">\' \'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    splitChunks<span class="token operator">:</span> <span class="token punctuation">{</span>\n      cacheGroups<span class="token operator">:</span> <span class="token punctuation">{</span>\n        commons<span class="token operator">:</span> <span class="token punctuation">{</span>\n          test<span class="token operator">:</span> <span class="token regex">/[\\\\/]node_modules[\\\\/]/</span><span class="token punctuation">,</span>\n          <span class="token comment">// 여기서 cacheGroupKey는 cacheGroup의 키로 `commons`입니다.</span>\n          <span class="token function">name</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> chunks<span class="token punctuation">,</span> cacheGroupKey</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">const</span> moduleFileName <span class="token operator">=</span> module\n              <span class="token punctuation">.</span><span class="token function">identifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n              <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\'/\'</span><span class="token punctuation">)</span>\n              <span class="token punctuation">.</span><span class="token function">reduceRight</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">const</span> allChunksNames <span class="token operator">=</span> chunks<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">\'~\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>cacheGroupKey<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>allChunksNames<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>moduleFileName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          chunks<span class="token operator">:</span> <span class="token string">\'all\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p><code>splitChunks</code> 구성으로 webpack을 실행하면 다음의 이름으로 공통 그룹 청크도 출력됩니다. <code>commons-main-lodash.js.e7519d2bb8777058fa27.js</code>(해시는 실제 출력의 예로 제공됩니다).</p> <aside class="warning"><h6 class="warning__prefix">warning</h6><p>다른 분할 청크에 동일한 이름을 할당할 때 모든 vendor 모듈은 단일 공유 청크에 배치되지만, 더 많은 코드가 다운로드될 수 있으므로 권장하지 않습니다.</p></aside> <h3 id="splitchunksusedexports"><code>splitChunks.usedExports</code><a href="#splitchunksusedexports" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <h4 id="splitchunkscachegroupscachegroupusedexports"><code>splitChunks.cacheGroups{cacheGroup}.usedExports</code><a href="#splitchunkscachegroupscachegroupusedexports" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p><code>boolean = true</code></p> <p>모듈이 export 할 파일의 이름을 수정(mangle)하고 사용하지 않는 export를 생략하고 보다 효율적인 코드를 생성하기 위해 어떤 export를 사용하는지 알아봅니다. <code>true</code>인 경우 각 런타임에 대해 사용된 export를 분석하고, <code>"global"</code>인 경우 결합한 모든 런타임에 대해 전역적으로 export를 분석합니다.</p> <h3 id="splitchunkscachegroups"><code>splitChunks.cacheGroups</code><a href="#splitchunkscachegroups" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>캐시 그룹은 <code>splitChunks.*</code>의 모든 옵션을 상속 및(또는) 재정의할 수 있습니다. 그러나 <code>test</code>, <code>priority</code> 및 <code>reuseExistingChunk</code>는 캐시 그룹 수준에서만 구성할 수 있습니다. 기본 캐시 그룹을 비활성화하려면 <code>false</code>로 설정하세요.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    splitChunks<span class="token operator">:</span> <span class="token punctuation">{</span>\n      cacheGroups<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h4 id="splitchunkscachegroupscachegrouppriority"><code>splitChunks.cacheGroups.{cacheGroup}.priority</code><a href="#splitchunkscachegroupscachegrouppriority" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p><code>number = -20</code></p> <p>모듈은 여러 캐시 그룹에 속할 수 있습니다. 최적화는 <code>priority</code>(우선순위)가 더 높은 캐시 그룹을 선호합니다. 기본 그룹은 커스텀 그룹이 더 높은 우선순위를 가질 수 있도록 음수 우선순위를 갖습니다(커스텀 그룹일 경우 기본값은 <code>0</code>입니다).</p> <h4 id="splitchunkscachegroupscachegroupreuseexistingchunk"><code>splitChunks.cacheGroups.{cacheGroup}.reuseExistingChunk</code><a href="#splitchunkscachegroupscachegroupreuseexistingchunk" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p><code>boolean = true</code></p> <p>현재 청크에 이미 기본 번들에서 분리된 모듈이 포함되어 있으면 새로 생성되는 대신 재사용됩니다. 이것은 청크의 파일 이름에 영향을 줄 수 있습니다.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    splitChunks<span class="token operator">:</span> <span class="token punctuation">{</span>\n      cacheGroups<span class="token operator">:</span> <span class="token punctuation">{</span>\n        defaultVendors<span class="token operator">:</span> <span class="token punctuation">{</span>\n          reuseExistingChunk<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h4 id="splitchunkscachegroupscachegrouptype"><code>splitChunks.cacheGroups.{cacheGroup}.type</code><a href="#splitchunkscachegroupscachegrouptype" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p><code>function</code> <code>RegExp</code> <code>string</code></p> <p>모듈 유형별로 캐시 그룹에 모듈을 할당할 수 있습니다.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    splitChunks<span class="token operator">:</span> <span class="token punctuation">{</span>\n      cacheGroups<span class="token operator">:</span> <span class="token punctuation">{</span>\n        json<span class="token operator">:</span> <span class="token punctuation">{</span>\n          type<span class="token operator">:</span> <span class="token string">\'json\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h4 id="splitchunkscachegroupstest"><code>splitChunks.cacheGroups.test</code><a href="#splitchunkscachegroupstest" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <h4 id="splitchunkscachegroupscachegrouptest"><code>splitChunks.cacheGroups.{cacheGroup}.test</code><a href="#splitchunkscachegroupscachegrouptest" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p><code>function (module, { chunkGraph, moduleGraph }) => boolean</code> <code>RegExp</code> <code>string</code></p> <p>캐시 그룹에 의해 선택되는 모듈을 제어합니다. 생략하면 모든 모듈이 선택됩니다. 이는 절대 경로 모듈 리소스 또는 청크 이름과 일치할 수 있습니다. 청크 이름이 일치하면 청크의 모든 모듈이 선택됩니다.</p> <p>아래와 같이 <code>{cacheGroup}.test</code>에 기능을 제공합니다.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    splitChunks<span class="token operator">:</span> <span class="token punctuation">{</span>\n      cacheGroups<span class="token operator">:</span> <span class="token punctuation">{</span>\n        svgGroup<span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">module</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// `module.resource`는 디스크에 있는 파일의 절대 경로를 포함합니다.</span>\n            <span class="token comment">// 플랫폼 간 호환성을 위해 / 또는 \\ 대신 `path.sep`을 사용합니다.</span>\n            <span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> <span class="token punctuation">(</span>\n              module<span class="token punctuation">.</span>resource <span class="token operator">&#x26;&#x26;</span>\n              module<span class="token punctuation">.</span>resource<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">\'.svg\'</span><span class="token punctuation">)</span> <span class="token operator">&#x26;&#x26;</span>\n              module<span class="token punctuation">.</span>resource<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>path<span class="token punctuation">.</span>sep<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">cacheable_svgs</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>path<span class="token punctuation">.</span>sep<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n            <span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        byModuleTypeGroup<span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">module</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> module<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">\'javascript/auto\'</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p><code>module</code> 및 <code>chunks</code> 객체에서 어떤 정보를 사용할 수 있는지 확인하려면 콜백에 <code>debugger;</code> 문을 넣으면 됩니다. 그런 다음 <a href="/contribute/debugging/#devtools">디버그 모드에서 webpack 빌드를 실행</a>하여 Chromium DevTools의 파라미터를 검사합니다.</p> <p>아래는 <code>{cacheGroup}.test</code>에 <code>RegExp</code>를 제공한 경우입니다.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    splitChunks<span class="token operator">:</span> <span class="token punctuation">{</span>\n      cacheGroups<span class="token operator">:</span> <span class="token punctuation">{</span>\n        defaultVendors<span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token comment">// 플랫폼 간 호환성을 위한 경로 구분 기호로 `[\\\\/]`의 사용에 유의하세요.</span>\n          test<span class="token operator">:</span> <span class="token regex">/[\\\\/]node_modules[\\\\/]|vendor[\\\\/]analytics_provider|vendor[\\\\/]other_lib/</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h4 id="splitchunkscachegroupscachegroupfilename"><code>splitChunks.cacheGroups.{cacheGroup}.filename</code><a href="#splitchunkscachegroupscachegroupfilename" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p><code>string</code> <code>function (pathData, assetInfo) => string</code></p> <p>초기 청크인 경우에만 파일 이름을 재정의할 수 있습니다. <a href="/configuration/output/#outputfilename"><code>output.filename</code></a>에서 사용할 수 있는 모든 플레이스홀더는 여기에서도 사용할 수 있습니다.</p> <aside class="warning"><h6 class="warning__prefix">warning</h6><p>이 옵션은 <code>splitChunks.filename</code>에서 전역적으로 설정할 수도 있지만, 이는 권장되지 않으며 <a href="#splitchunkschunks"><code>splitChunks.chunks</code></a>가 <code>\'initial\'</code>로 설정되지 않는 경우 오류가 발생할 수 있습니다. 전역으로 설정하지 마세요.</p></aside> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    splitChunks<span class="token operator">:</span> <span class="token punctuation">{</span>\n      cacheGroups<span class="token operator">:</span> <span class="token punctuation">{</span>\n        defaultVendors<span class="token operator">:</span> <span class="token punctuation">{</span>\n          filename<span class="token operator">:</span> <span class="token string">\'[name].bundle.js\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>아래는 함수로 사용하는 방법입니다.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    splitChunks<span class="token operator">:</span> <span class="token punctuation">{</span>\n      cacheGroups<span class="token operator">:</span> <span class="token punctuation">{</span>\n        defaultVendors<span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token function-variable function">filename</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">pathData</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            <span class="token comment">// 요구 사항에 따라 파일 이름 문자열을 생성하기 위해 pathData 객체를 사용하세요.</span>\n            <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>pathData<span class="token punctuation">.</span>chunk<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-bundle.js</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>파일 이름 앞에 경로를 제공하여 폴더 구조를 생성할 수 있습니다(예: <code>\'js/vendor/bundle.js\'</code>).</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    splitChunks<span class="token operator">:</span> <span class="token punctuation">{</span>\n      cacheGroups<span class="token operator">:</span> <span class="token punctuation">{</span>\n        defaultVendors<span class="token operator">:</span> <span class="token punctuation">{</span>\n          filename<span class="token operator">:</span> <span class="token string">\'js/[name]/bundle.js\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h4 id="splitchunkscachegroupscachegroupenforce"><code>splitChunks.cacheGroups.{cacheGroup}.enforce</code><a href="#splitchunkscachegroupscachegroupenforce" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p><code>boolean = false</code></p> <p>Webpack에 <a href="#splitchunksminsize"><code>splitChunks.minSize</code></a>, <a href="#splitchunksminchunks"><code>splitChunks.minChunks</code></a>, <a href="#splitchunksmaxasyncrequests"><code>splitChunks.maxAsyncRequests</code></a> 및 <a href="#splitchunksmaxinitialrequests"><code>splitChunks.maxInitialRequests</code></a> 옵션을 무시하고 항상 이 캐시 그룹에 대한 청크를 생성하도록 지시합니다.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    splitChunks<span class="token operator">:</span> <span class="token punctuation">{</span>\n      cacheGroups<span class="token operator">:</span> <span class="token punctuation">{</span>\n        defaultVendors<span class="token operator">:</span> <span class="token punctuation">{</span>\n          enforce<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h4 id="splitchunkscachegroupscachegroupidhint"><code>splitChunks.cacheGroups.{cacheGroup}.idHint</code><a href="#splitchunkscachegroupscachegroupidhint" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p><code>string</code></p> <p>청크 ID에 대한 힌트를 설정합니다. 청크의 파일 이름에 추가됩니다.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    splitChunks<span class="token operator">:</span> <span class="token punctuation">{</span>\n      cacheGroups<span class="token operator">:</span> <span class="token punctuation">{</span>\n        defaultVendors<span class="token operator">:</span> <span class="token punctuation">{</span>\n          idHint<span class="token operator">:</span> <span class="token string">\'vendors\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="examples">Examples<a href="#examples" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <h3 id="defaults-example-1">Defaults: Example 1<a href="#defaults-example-1" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <pre><code class="hljs language-js"><span class="token comment">// index.js</span>\n\n<span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'./a\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 동적 import</span></code></pre> <pre><code class="hljs language-js"><span class="token comment">// a.js</span>\n<span class="token keyword">import</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">//...</span></code></pre> <p><strong>결과:</strong> <code>react</code>를 포함하는 별도의 청크가 생성됩니다. import 호출에서 이 청크는 <code>./a</code>를 포함하는 원래 청크와 병렬로 로드됩니다.</p> <p>이유:</p> <ul> <li>조건 1: 청크는 <code>node_modules</code>의 모듈을 포함합니다</li> <li>조건 2: <code>react</code>가 30kb보다 큽니다</li> <li>조건 3: import 호출 시 병렬 요청 수는 2입니다</li> <li>조건 4: 초기 페이지 로드 시 요청에 영향을 주지 않습니다</li> </ul> <p>이 이유는 무엇일까요? <code>react</code>는 애플리케이션 코드만큼 자주 변경되지 않을 것입니다. 별도의 청크로 이동하면 이 청크를 앱 코드와 별도로 캐시할 수 있습니다(청크 해시, 레코드, Cache-Control 또는 장기 캐시 접근 방식을 사용한다고 가정합니다).</p> <h3 id="defaults-example-2">Defaults: Example 2<a href="#defaults-example-2" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <pre><code class="hljs language-js"><span class="token comment">// entry.js</span>\n\n<span class="token comment">// 동적 imports</span>\n<span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'./a\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'./b\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <pre><code class="hljs language-js"><span class="token comment">// a.js</span>\n<span class="token keyword">import</span> <span class="token string">\'./helpers\'</span><span class="token punctuation">;</span> <span class="token comment">// helpers의 크기는 40kb입니다</span>\n\n<span class="token comment">//...</span></code></pre> <pre><code class="hljs language-js"><span class="token comment">// b.js</span>\n<span class="token keyword">import</span> <span class="token string">\'./helpers\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'./more-helpers\'</span><span class="token punctuation">;</span> <span class="token comment">// more-helpers 또한 40kb의 크기를 가집니다</span>\n\n<span class="token comment">//...</span></code></pre> <p><strong>결과:</strong> <code>./helpers</code>와 이에 대한 모든 의존성을 포함하는 별도의 청크가 생성됩니다. import 호출에서 이 청크는 원래 청크와 병렬로 로드됩니다.</p> <p>이유:</p> <ul> <li>조건 1: 청크는 두 import 호출 간에 공유됩니다</li> <li>조건 2: <code>helpers</code>는 30kb보다 큽니다</li> <li>조건 3: import 호출 시 병렬 요청 수는 2입니다</li> <li>조건 4: 초기 페이지 로드 시 요청에 영향을 주지 않습니다</li> </ul> <p><code>helpers</code>의 내용을 각 청크에 넣으면 코드가 두 번 다운로드됩니다. 별도의 청크를 사용하면 한 번만 발생합니다. 우리는 추가 요청 비용을 지불하며 이는 절충안으로 간주할 수 있습니다. 그렇기 때문에 최소 크기는 30kb입니다.</p> <h3 id="split-chunks-example-1">Split Chunks: Example 1<a href="#split-chunks-example-1" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>엔트리 포인트 간에 공유되는 모든 코드를 포함하는 <code>commons</code> 청크를 만듭니다.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    splitChunks<span class="token operator">:</span> <span class="token punctuation">{</span>\n      cacheGroups<span class="token operator">:</span> <span class="token punctuation">{</span>\n        commons<span class="token operator">:</span> <span class="token punctuation">{</span>\n          name<span class="token operator">:</span> <span class="token string">\'commons\'</span><span class="token punctuation">,</span>\n          chunks<span class="token operator">:</span> <span class="token string">\'initial\'</span><span class="token punctuation">,</span>\n          minChunks<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <aside class="warning"><h6 class="warning__prefix">warning</h6><p>이 구성은 초기 번들을 확장할 수 있으므로 모듈이 즉시 필요하지 않을 때 동적 import를 사용하는 것이 좋습니다.</p></aside> <h3 id="split-chunks-example-2">Split Chunks: Example 2<a href="#split-chunks-example-2" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>전체 애플리케이션에서 <code>node_modules</code>의 모든 코드를 포함하는 <code>vendors</code> 청크를 만듭니다.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    splitChunks<span class="token operator">:</span> <span class="token punctuation">{</span>\n      cacheGroups<span class="token operator">:</span> <span class="token punctuation">{</span>\n        commons<span class="token operator">:</span> <span class="token punctuation">{</span>\n          test<span class="token operator">:</span> <span class="token regex">/[\\\\/]node_modules[\\\\/]/</span><span class="token punctuation">,</span>\n          name<span class="token operator">:</span> <span class="token string">\'vendors\'</span><span class="token punctuation">,</span>\n          chunks<span class="token operator">:</span> <span class="token string">\'all\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <aside class="warning"><h6 class="warning__prefix">warning</h6><p>이로 인해 모든 외부 패키지가 포함된 큰 청크가 생성될 수 있습니다. 핵심 프레임워크와 유틸리티만 포함하고 나머지 종속성을 동적으로 로드하는 것이 좋습니다.</p></aside> <h3 id="split-chunks-example-3">Split Chunks: Example 3<a href="#split-chunks-example-3" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>RegExp</code>와 일치하는 특정 <code>node_modules</code> 패키지를 포함하는 <code>custom vendor</code> 청크를 만듭니다.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    splitChunks<span class="token operator">:</span> <span class="token punctuation">{</span>\n      cacheGroups<span class="token operator">:</span> <span class="token punctuation">{</span>\n        vendor<span class="token operator">:</span> <span class="token punctuation">{</span>\n          test<span class="token operator">:</span> <span class="token regex">/[\\\\/]node_modules[\\\\/](react|react-dom)[\\\\/]/</span><span class="token punctuation">,</span>\n          name<span class="token operator">:</span> <span class="token string">\'vendor\'</span><span class="token punctuation">,</span>\n          chunks<span class="token operator">:</span> <span class="token string">\'all\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>이로 인해 <code>react</code>와 <code>react-dom</code>이 별도의 청크로 분할됩니다. 어떤 패키지가 청크에 포함되었는지 확실하지 않은 경우 자세한 내용은 <a href="/guides/code-splitting/#bundle-analysis">Bundle Analysis</a> 섹션을 참고하세요.</p></aside> '}}]);