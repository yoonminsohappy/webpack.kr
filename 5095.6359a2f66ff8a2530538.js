(self.webpackChunk=self.webpackChunk||[]).push([[5095],{5095:function(e,o,a){"use strict";a.r(o),o.default='<p>다음의 Node.js 옵션은 특정 <a href="https://nodejs.org/docs/latest/api/globals.html">Node.js globals</a>을 폴리필할지 mock할지 설정합니다.</p> <p>이 기능은 webpack 내부 <a href="https://github.com/webpack/webpack/blob/master/lib/NodeStuffPlugin.js"><code>NodeStuffPlugin</code></a> 플러그인에서 제공합니다.</p> <aside class="warning"><h6 class="warning__prefix">warning</h6><p>webpack5 부터, <code>node</code> 옵션에서 <code>global</code>, <code>__filename</code> 또는 <code>__dirname</code>만 설정할 수 있습니다. webpack5의 Node.js에서 <code>fs</code>를 폴리필할 방법을 찾고 있다면 <a href="/configuration/resolve/#resolvefallback">resolve.fallback</a>를 참고하세요.</p></aside> <h2 id="node"><code>node</code><a href="#node" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean: false</code> <code>object</code></p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  node<span class="token operator">:</span> <span class="token punctuation">{</span>\n    global<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    __filename<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    __dirname<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>webpack 3.0.0부터, <code>node</code> 옵션을 <code>false</code>로 설정하여 <code>NodeStuffPlugin</code> 플러그인을 완전히 끌 수 있습니다.</p> <h2 id="nodeglobal"><code>node.global</code><a href="#nodeglobal" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean</code></p> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>전역변수가 필요한 모듈을 사용하는 경우 <code>global</code> 대신 <code>ProvidePlugin</code>을 사용하세요.</p></aside> <p>이 객체의 정확한 동작은 <a href="https://nodejs.org/api/globals.html#globals_global">Node.js 문서</a>를 참고하세요.</p> <p>옵션:</p> <ul> <li><code>true</code>: 폴리필 제공.</li> <li><code>false</code>: 아무것도 제공하지 않습니다. 이 객체를 예상하는 코드는 <code>ReferenceError</code>가 발생할 수 있습니다.</li> </ul> <h2 id="node__filename"><code>node.__filename</code><a href="#node__filename" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean</code> <code>string: \'mock\' | \'eval-only\'</code></p> <p>옵션:</p> <ul> <li><code>true</code>: <a href="/configuration/entry-context/#context"><code>context</code> 옵션</a>에 상대적인 <strong>입력</strong> 파일의 dirname.</li> <li><code>false</code>: Webpack은 <code>__filename</code> 코드를 건드리지 않습니다. 즉 일반적인 Node.js <code>__filename</code> 동작이 있음을 의미합니다. Node.js 환경에서 실행할 때 <strong>출력</strong> 파일 이름입니다.</li> <li><code>\'mock\'</code>: 고정값 <code>\'/index.js\'</code>.</li> <li><code>\'eval-only\'</code></li> </ul> <h2 id="node__dirname"><code>node.__dirname</code><a href="#node__dirname" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean</code> <code>string: \'mock\' | \'eval-only\'</code></p> <p>옵션:</p> <ul> <li><code>true</code>: <a href="/configuration/entry-context/#context"><code>context</code> 옵션</a>에 상대적인 <strong>입력</strong> 파일의 dirname.</li> <li><code>false</code>: Webpack은 <code>__dirname</code> 코드를 건드리지 않습니다. 즉 일반적인 Node.js <code>__dirname</code> 동작이 있음을 의미합니다. Node.js 환경에서 실행할 때 <strong>출력</strong> 파일 이름입니다.</li> <li><code>\'mock\'</code>: 고정값 <code>\'/\'</code>.</li> <li><code>\'eval-only\'</code></li> </ul> '}}]);