(self.webpackChunk=self.webpackChunk||[]).push([[443],{443:function(a,n,e){"use strict";e.r(n),n.default='<p>For proper usage and easier distribution of this configuration, webpack can be configured with <code>webpack.config.js</code>. Any parameters sent to the CLI will map to a corresponding parameter in the configuration file.</p> <p>Read the <a href="/guides/installation">installation guide</a> if you don\'t already have webpack and CLI installed.</p> <h2 id="commands">Commands<a href="#commands" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>webpack-cli offers a variety of commands to make working with webpack easier. By default webpack ships with</p> <table> <thead> <tr> <th>Command</th> <th>Usage</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td data-th="Command"><span><code>build</code></span></td> <td data-th="Usage"><span><code>build|bundle|b [entries...] [options]</code></span></td> <td data-th="Description"><span>Run webpack (default command, can be omitted).</span></td> </tr> <tr> <td data-th="Command"><span><a href="#configtest"><code>configtest</code></a></span></td> <td data-th="Usage"><span><code>configtest|t [config-path]</code></span></td> <td data-th="Description"><span>Validate a webpack configuration.</span></td> </tr> <tr> <td data-th="Command"><span><a href="#help"><code>help</code></a></span></td> <td data-th="Usage"><span><code>help|h [command] [option]</code></span></td> <td data-th="Description"><span>Display help for commands and options.</span></td> </tr> <tr> <td data-th="Command"><span><a href="#info"><code>info</code></a></span></td> <td data-th="Usage"><span><code>info|i [options]</code></span></td> <td data-th="Description"><span>Outputs information about your system.</span></td> </tr> <tr> <td data-th="Command"><span><a href="#init"><code>init</code></a></span></td> <td data-th="Usage"><span><code>init|create|c|new|n [generation-path] [options]</code></span></td> <td data-th="Description"><span>Initialize a new webpack project.</span></td> </tr> <tr> <td data-th="Command"><span><code>loader</code></span></td> <td data-th="Usage"><span><code>loader|l [output-path] [options]</code></span></td> <td data-th="Description"><span>Scaffold a loader.</span></td> </tr> <tr> <td data-th="Command"><span><code>plugin</code></span></td> <td data-th="Usage"><span><code>plugin|p [output-path] [options]</code></span></td> <td data-th="Description"><span>Scaffold a plugin.</span></td> </tr> <tr> <td data-th="Command"><span><a href="/configuration/dev-server/"><code>serve</code></a></span></td> <td data-th="Usage"><span><code>serve|server|s [options]</code></span></td> <td data-th="Description"><span>Run the <code>webpack-dev-server</code>.</span></td> </tr> <tr> <td data-th="Command"><span><a href="#version"><code>version</code></a></span></td> <td data-th="Usage"><span><code>version|v [commands...]</code></span></td> <td data-th="Description"><span>Output the version number of <code>webpack</code>, <code>webpack-cli</code> and <code>webpack-dev-server</code>.</span></td> </tr> <tr> <td data-th="Command"><span><code>watch</code></span></td> <td data-th="Usage"><span><code>watch|w [entries...] [options]</code></span></td> <td data-th="Description"><span>Run webpack and watch for files changes.</span></td> </tr> </tbody> </table> <h3 id="init">Init<a href="#init" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Used to initialize a new webpack project.</p> <pre><code class="hljs language-bash">npx webpack init <span class="token punctuation">[</span>generation-path<span class="token punctuation">]</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span></code></pre> <p><strong>example</strong></p> <pre><code class="hljs language-bash">npx webpack init ./my-app --force --template<span class="token operator">=</span>default</code></pre> <h4 id="generation-path">Generation Path<a href="#generation-path" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>Location of where to generate the configuration. Defaults to <code>process.cwd()</code>.</p> <h4 id="options">Options<a href="#options" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p><strong><code>-t</code>, <code>--template</code></strong></p> <p><code>string = \'default\'</code></p> <p>Name of template to generate.</p> <p><strong><code>-f</code>, <code>--force</code></strong></p> <p><code>boolean</code></p> <p>To generate a project without questions. When enabled, default answer for each question will be used.</p> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>See the <a href="https://github.com/webpack/webpack-cli/blob/master/packages/generators/INIT.md">full documentation of <code>webpack init</code> command</a>.</p></aside> <h3 id="info">Info<a href="#info" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Outputs information about your system.</p> <pre><code class="hljs language-bash">npx webpack info <span class="token punctuation">[</span>options<span class="token punctuation">]</span></code></pre> <p><strong>example</strong></p> <pre><code class="hljs language-bash">npx webpack info --output<span class="token operator">=</span>json</code></pre> <h4 id="options-for-info">Options for info<a href="#options-for-info" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p><strong><code>-o</code>, <code>--output</code></strong></p> <p><code>string : \'json\' | \'markdown\'</code></p> <p>To get the output in a specified format.</p> <h3 id="configtest">Configtest<a href="#configtest" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Validate a webpack configuration.</p> <pre><code class="hljs language-bash">npx webpack configtest <span class="token punctuation">[</span>config-path<span class="token punctuation">]</span></code></pre> <p><strong>example</strong></p> <pre><code class="hljs language-bash">npx webpack configtest ./webpack.config.js</code></pre> <h4 id="config-path">Config Path<a href="#config-path" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>Path to your webpack configuration file. Defaults to <code>./webpack.config.js</code>.</p> <h2 id="flags">Flags<a href="#flags" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>By default webpack ships with the following flags:</p> <table> <thead> <tr> <th>Flag / Alias</th> <th>Type</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td data-th="Flag / Alias"><span><a href="#entry"><code>--entry</code></a></span></td> <td data-th="Type"><span>string[]</span></td> <td data-th="Description"><span>The entry point(s) of your application e.g. <code>./src/main.js</code></span></td> </tr> <tr> <td data-th="Flag / Alias"><span><a href="#config"><code>--config, -c</code></a></span></td> <td data-th="Type"><span>string[]</span></td> <td data-th="Description"><span>Provide path to a webpack configuration file e.g. <code>./webpack.config.js</code></span></td> </tr> <tr> <td data-th="Flag / Alias"><span><a href="#config-name"><code>--config-name</code></a></span></td> <td data-th="Type"><span>string[]</span></td> <td data-th="Description"><span>Name of the configuration to use</span></td> </tr> <tr> <td data-th="Flag / Alias"><span><code>--name</code></span></td> <td data-th="Type"><span>string</span></td> <td data-th="Description"><span>Name of the configuration. Used when loading multiple configurations</span></td> </tr> <tr> <td data-th="Flag / Alias"><span><code>--color</code></span></td> <td data-th="Type"><span>boolean</span></td> <td data-th="Description"><span>Enable colors on console</span></td> </tr> <tr> <td data-th="Flag / Alias"><span><a href="#merge"><code>--merge, -m</code></a></span></td> <td data-th="Type"><span>boolean</span></td> <td data-th="Description"><span>Merge two or more configurations using <code>webpack-merge</code></span></td> </tr> <tr> <td data-th="Flag / Alias"><span><a href="#env"><code>--env</code></a></span></td> <td data-th="Type"><span>string[]</span></td> <td data-th="Description"><span>Environment passed to the configuration when it is a function</span></td> </tr> <tr> <td data-th="Flag / Alias"><span><a href="#node-env"><code>--node-env</code></a></span></td> <td data-th="Type"><span>string</span></td> <td data-th="Description"><span>Set <code>process.env.NODE_ENV</code> to the specified value</span></td> </tr> <tr> <td data-th="Flag / Alias"><span><a href="#progress"><code>--progress</code></a></span></td> <td data-th="Type"><span>boolean, string</span></td> <td data-th="Description"><span>Print compilation progress during build</span></td> </tr> <tr> <td data-th="Flag / Alias"><span><a href="#help"><code>--help</code></a></span></td> <td data-th="Type"><span>boolean</span></td> <td data-th="Description"><span>Outputs list of supported flags and commands</span></td> </tr> <tr> <td data-th="Flag / Alias"><span><a href="#output-path"><code>--output-path, -o</code></a></span></td> <td data-th="Type"><span>string</span></td> <td data-th="Description"><span>Output location of the file generated by webpack e.g. <code>./dist</code></span></td> </tr> <tr> <td data-th="Flag / Alias"><span><code>--target, -t</code></span></td> <td data-th="Type"><span>string[]</span></td> <td data-th="Description"><span>Sets the build target</span></td> </tr> <tr> <td data-th="Flag / Alias"><span><code>--watch, -w</code></span></td> <td data-th="Type"><span>boolean</span></td> <td data-th="Description"><span>Watch for file changes</span></td> </tr> <tr> <td data-th="Flag / Alias"><span><code>--watch-options-stdin</code></span></td> <td data-th="Type"><span>boolean</span></td> <td data-th="Description"><span>Stop watching when stdin stream has ended</span></td> </tr> <tr> <td data-th="Flag / Alias"><span><code>--hot, -h</code></span></td> <td data-th="Type"><span>boolean</span></td> <td data-th="Description"><span>Enables Hot Module Replacement</span></td> </tr> <tr> <td data-th="Flag / Alias"><span><code>--devtool, -d</code></span></td> <td data-th="Type"><span>string</span></td> <td data-th="Description"><span>Controls if and how source maps are generated.</span></td> </tr> <tr> <td data-th="Flag / Alias"><span><code>--prefetch</code></span></td> <td data-th="Type"><span>string</span></td> <td data-th="Description"><span>Prefetch this request</span></td> </tr> <tr> <td data-th="Flag / Alias"><span><a href="#json"><code>--json, -j</code></a></span></td> <td data-th="Type"><span>boolean, string</span></td> <td data-th="Description"><span>Prints result as JSON or store it in a file</span></td> </tr> <tr> <td data-th="Flag / Alias"><span><code>--mode</code></span></td> <td data-th="Type"><span>string</span></td> <td data-th="Description"><span>Defines the mode to pass to webpack</span></td> </tr> <tr> <td data-th="Flag / Alias"><span><a href="#version"><code>--version, -v</code></a></span></td> <td data-th="Type"><span>boolean</span></td> <td data-th="Description"><span>Get current version</span></td> </tr> <tr> <td data-th="Flag / Alias"><span><code>--stats</code></span></td> <td data-th="Type"><span>boolean, string</span></td> <td data-th="Description"><span>It instructs webpack on how to treat the stats</span></td> </tr> <tr> <td data-th="Flag / Alias"><span><a href="#analyzing-bundle"><code>--analyze</code></a></span></td> <td data-th="Type"><span>boolean</span></td> <td data-th="Description"><span>It invokes <code>webpack-bundle-analyzer</code> plugin to get bundle information</span></td> </tr> </tbody> </table> <h3 id="negated-flags">Negated Flags<a href="#negated-flags" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <table> <thead> <tr> <th>Flag</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td data-th="Flag"><span><code>--no-color</code></span></td> <td data-th="Description"><span>Disables any color on the console</span></td> </tr> <tr> <td data-th="Flag"><span><code>--no-hot</code></span></td> <td data-th="Description"><span>Disables hot reloading if you have it enabled via your config</span></td> </tr> <tr> <td data-th="Flag"><span><code>--no-stats</code></span></td> <td data-th="Description"><span>Disables any compilation stats emitted by webpack</span></td> </tr> <tr> <td data-th="Flag"><span><code>--no-watch</code></span></td> <td data-th="Description"><span>Do not watch for file changes</span></td> </tr> <tr> <td data-th="Flag"><span><code>--no-devtool</code></span></td> <td data-th="Description"><span>Do not generate source maps</span></td> </tr> <tr> <td data-th="Flag"><span><code>--no-watch-options-stdin</code></span></td> <td data-th="Description"><span>Do not stop watching when stdin stream has ended</span></td> </tr> </tbody> </table> <h3 id="core-flags">Core Flags<a href="#core-flags" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Starting CLI v4 and webpack v5, CLI imports the entire configuration schema from webpack core to allow tuning almost every configuration option from the command line.</p> <p><strong>Here\'s the list of all the core flags supported by webpack v5 with CLI v4 - <a href="https://github.com/webpack/webpack-cli/blob/master/OPTIONS.md">link</a></strong></p> <p>For example if you want to enable performance hints in your project you\'d use <a href="https://webpack.js.org/configuration/performance/#performancehints">this</a> option in configuration, with core flags you can do -</p> <pre><code class="hljs language-bash">npx webpack --performance-hints warning</code></pre> <h2 id="usage">Usage<a href="#usage" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <h3 id="with-configuration-file">With configuration file<a href="#with-configuration-file" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <pre><code class="hljs language-bash">npx webpack <span class="token punctuation">[</span>--config webpack.config.js<span class="token punctuation">]</span></code></pre> <p>See <a href="/configuration">configuration</a> for the options in the configuration file.</p> <h3 id="without-configuration-file">Without configuration file<a href="#without-configuration-file" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <pre><code class="hljs language-bash">npx webpack --entry <span class="token operator">&#x3C;</span>entry<span class="token operator">></span> --output-path <span class="token operator">&#x3C;</span>output-path<span class="token operator">></span></code></pre> <p><strong>example</strong></p> <pre><code class="hljs language-bash">npx webpack --entry ./first.js --entry ./second.js --output-path /build</code></pre> <h4 id="entry">entry<a href="#entry" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>A filename or a set of named filenames which act as the entry point to build your project. You can pass multiple entries (every entry is loaded on startup). Following are the multiple ways of specifying entry file(s) via CLI -</p> <pre><code class="hljs language-bash">npx webpack ./first-entry.js</code></pre> <pre><code class="hljs language-bash">npx webpack --entry ./first-entry.js</code></pre> <pre><code class="hljs language-bash">npx webpack ./first-entry.js ./other-entry.js</code></pre> <pre><code class="hljs language-bash">npx webpack --entry ./first-entry.js ./other-entry.js</code></pre> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>Use <code>webpack [command] [entries...] [option]</code> syntax because some options can accept multiple values so <code>webpack --target node ./entry.js</code> means <code>target: [\'node\', \'./entry.js\']</code></p></aside> <h4 id="output-path">output-path<a href="#output-path" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>A path for the bundled file to be saved in. It will be mapped to the configuration options <code>output.path</code>.</p> <p><strong>Example</strong></p> <p>If your project structure is as follows -</p> <pre><code class="hljs language-bash"><span class="token builtin class-name">.</span>\n├── dist\n├── index.html\n└── src\n    ├── index.js\n    ├── index2.js\n    └── others.js</code></pre> <pre><code class="hljs language-bash">npx webpack ./src/index.js --output-path dist</code></pre> <p>This will bundle your source code with entry as <code>index.js</code>, and the output bundle file will have a path of <code>dist</code>.</p> <pre><code class="hljs language-bash">asset main.js <span class="token number">142</span> bytes <span class="token punctuation">[</span>compared <span class="token keyword">for</span> emit<span class="token punctuation">]</span> <span class="token punctuation">[</span>minimized<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: main<span class="token punctuation">)</span>\n./src/index.js <span class="token number">30</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n./src/others.js <span class="token number">1</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\nwebpack <span class="token number">5.1</span>.0 compiled successfully <span class="token keyword">in</span> <span class="token number">187</span> ms</code></pre> <pre><code class="hljs language-bash">npx webpack ./src/index.js ./src/others2.js --output-path dist/</code></pre> <p>This will form the bundle with both the files as separate entry points.</p> <pre><code class="hljs language-bash">asset main.js <span class="token number">142</span> bytes <span class="token punctuation">[</span>compared <span class="token keyword">for</span> emit<span class="token punctuation">]</span> <span class="token punctuation">[</span>minimized<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: main<span class="token punctuation">)</span>\n./src/index.js <span class="token number">30</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n./src/others2.js <span class="token number">1</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n./src/others.js <span class="token number">1</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\nwebpack <span class="token number">5.1</span>.0 compiled successfully <span class="token keyword">in</span> <span class="token number">198</span> ms</code></pre> <h2 id="default-configurations">Default Configurations<a href="#default-configurations" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>CLI will look for some default configurations in the path of your project, here are the config files picked up by CLI.</p> <p>This is the lookup priority in increasing order</p> <blockquote> <p>example - config file lookup will be in order of .webpack/webpackfile > .webpack/webpack.config.js > webpack.config.js</p> </blockquote> <pre><code class="hljs language-txt">\'webpack.config\',\n\'.webpack/webpack.config\',\n\'.webpack/webpackfile\',\n</code></pre> <h2 id="common-options">Common Options<a href="#common-options" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <aside class="warning"><h6 class="warning__prefix">warning</h6><p>Note that Command Line Interface has a higher precedence for the arguments you use it with than your configuration file. For instance, if you pass <a href="/configuration/mode/#usage"><code>--mode="production"</code></a> to webpack CLI and your configuration file uses <code>development</code>, <code>production</code> will be used.</p></aside> <h3 id="help">help<a href="#help" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><strong>List basic commands and flags available on the cli</strong></p> <p>Both <code>webpack help [command] [option]</code> and <code>webpack [command] --help</code> are valid to get help:</p> <pre><code class="hljs language-bash">npx webpack --help\n\n<span class="token comment"># or</span>\n\nnpx webpack <span class="token builtin class-name">help</span></code></pre> <p><strong>List all supported commands and flags by cli</strong></p> <pre><code class="hljs language-bash">npx webpack --help<span class="token operator">=</span>verbose</code></pre> <p><strong>See help for a specific command or option</strong></p> <pre><code class="hljs language-bash">npx webpack <span class="token builtin class-name">help</span> --mode</code></pre> <h3 id="version">version<a href="#version" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><strong>Show version of installed packages and sub-packages</strong></p> <p>To inspect the version of <code>webpack</code> and <code>webpack-cli</code> you are using, run the command:</p> <pre><code class="hljs language-bash">npx webpack --version\n\n<span class="token comment"># or</span>\n\nnpx webpack version</code></pre> <p>This will output the following result:</p> <pre><code class="hljs language-bash">webpack <span class="token number">5.31</span>.2\nwebpack-cli <span class="token number">4.6</span>.0</code></pre> <p>It will output the version of <code>webpack-dev-server</code> as well if you have it installed:</p> <pre><code class="hljs language-bash">webpack <span class="token number">5.31</span>.2\nwebpack-cli <span class="token number">4.6</span>.0\nwebpack-dev-server <span class="token number">3.11</span>.2</code></pre> <p>To inspect the version of any <code>webpack-cli</code> sub-package (like <code>@webpack-cli/info</code>), run command similar to the following:</p> <pre><code class="hljs language-bash">npx webpack info --version</code></pre> <p>This will output the following result:</p> <pre><code class="hljs language-bash">@webpack-cli/info <span class="token number">1.2</span>.3\nwebpack <span class="token number">5.31</span>.2\nwebpack-cli <span class="token number">4.6</span>.0\nwebpack-dev-server <span class="token number">3.11</span>.2</code></pre> <h3 id="config">config<a href="#config" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><strong>Build source using a configuration file</strong></p> <p>Specify a different <a href="/configuration">configuration</a> file other than <code>webpack.config.js</code>, which is one of the defaults.</p> <pre><code class="hljs language-bash">npx webpack --config example.config.js</code></pre> <h3 id="config-name">config-name<a href="#config-name" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>In case your configuration file exports multiple configurations, you can use <code>--config-name</code> to specify which configuration to run.</p> <p>Consider the following <code>webpack.config.js</code>:</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    output<span class="token operator">:</span> <span class="token punctuation">{</span>\n      filename<span class="token operator">:</span> <span class="token string">\'./dist-first.js\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    name<span class="token operator">:</span> <span class="token string">\'first\'</span><span class="token punctuation">,</span>\n    entry<span class="token operator">:</span> <span class="token string">\'./src/first.js\'</span><span class="token punctuation">,</span>\n    mode<span class="token operator">:</span> <span class="token string">\'development\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    output<span class="token operator">:</span> <span class="token punctuation">{</span>\n      filename<span class="token operator">:</span> <span class="token string">\'./dist-second.js\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    name<span class="token operator">:</span> <span class="token string">\'second\'</span><span class="token punctuation">,</span>\n    entry<span class="token operator">:</span> <span class="token string">\'./src/second.js\'</span><span class="token punctuation">,</span>\n    mode<span class="token operator">:</span> <span class="token string">\'development\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    output<span class="token operator">:</span> <span class="token punctuation">{</span>\n      filename<span class="token operator">:</span> <span class="token string">\'./dist-third.js\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    name<span class="token operator">:</span> <span class="token string">\'third\'</span><span class="token punctuation">,</span>\n    entry<span class="token operator">:</span> <span class="token string">\'./src/third.js\'</span><span class="token punctuation">,</span>\n    mode<span class="token operator">:</span> <span class="token string">\'none\'</span><span class="token punctuation">,</span>\n    stats<span class="token operator">:</span> <span class="token string">\'verbose\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre> <p>To run only the <code>second</code> configuration:</p> <pre><code class="hljs language-bash">npx webpack --config-name second</code></pre> <p>You can also pass multiple values:</p> <pre><code class="hljs language-bash">npx webpack --config-name first --config-name second</code></pre> <h3 id="merge">merge<a href="#merge" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>You can merge two or more different webpack configurations with the help of <code>--merge</code>:</p> <pre><code class="hljs language-bash">npx webpack --config ./first.js --config ./second.js --merge</code></pre> <h3 id="json">json<a href="#json" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><strong>Print result of webpack as JSON</strong></p> <pre><code class="hljs language-bash">npx webpack --json</code></pre> <p><strong>If you want to store stats as json instead of printing it, you can use -</strong></p> <pre><code class="hljs language-bash">npx webpack --json stats.json</code></pre> <p>In every other case, webpack prints out a set of stats showing bundle, chunk and timing details. Using this option, the output can be a JSON object. This response is accepted by webpack\'s <a href="https://webpack.github.io/analyse/">analyse tool</a>, or chrisbateman\'s <a href="https://chrisbateman.github.io/webpack-visualizer/">webpack-visualizer</a>, or th0r\'s <a href="https://github.com/webpack-contrib/webpack-bundle-analyzer">webpack-bundle-analyzer</a>. The analyse tool will take in the JSON and provide all the details of the build in graphical form.</p> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>See the <a href="/api/stats">stats data api</a> to read more about the stats generated here.</p></aside> <h2 id="environment-options">Environment Options<a href="#environment-options" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>When the webpack configuration <a href="/configuration/configuration-types/#exporting-a-function">exports a function</a>, an "environment" may be passed to it.</p> <h3 id="env">env<a href="#env" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <pre><code class="hljs language-bash">npx webpack --env production    <span class="token comment"># env.production = true</span></code></pre> <p>The <code>--env</code> argument accepts multiple values:</p> <table> <thead> <tr> <th>Invocation</th> <th>Resulting environment</th> </tr> </thead> <tbody> <tr> <td data-th="Invocation"><span><code>npx webpack --env prod</code></span></td> <td data-th="Resulting environment"><span><code>{ prod: true }</code></span></td> </tr> <tr> <td data-th="Invocation"><span><code>npx webpack --env prod --env min</code></span></td> <td data-th="Resulting environment"><span><code>{ prod: true, min: true }</code></span></td> </tr> <tr> <td data-th="Invocation"><span><code>npx webpack --env platform=app --env production</code></span></td> <td data-th="Resulting environment"><span><code>{ platform: "app", production: true }</code></span></td> </tr> <tr> <td data-th="Invocation"><span><code>npx webpack --env foo=bar=app</code></span></td> <td data-th="Resulting environment"><span><code>{ foo: "bar=app"}</code></span></td> </tr> <tr> <td data-th="Invocation"><span><code>npx webpack --env app.platform="staging" --env app.name="test"</code></span></td> <td data-th="Resulting environment"><span><code>{ app: { platform: "staging", name: "test" }</code></span></td> </tr> </tbody> </table> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>See the <a href="/guides/environment-variables/">environment variables</a> guide for more information on its usage.</p></aside> <p>In addition to the customized <code>env</code> showed above, there are some built-in ones under <code>env</code> to be used inside your webpack configuration:</p> <table> <thead> <tr> <th>Environment Variable</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td data-th="Environment Variable"><span><code>WEBPACK_SERVE</code></span></td> <td data-th="Description"><span><code>true</code> if <code>serve|s</code> is being used.</span></td> </tr> <tr> <td data-th="Environment Variable"><span><code>WEBPACK_BUILD</code></span></td> <td data-th="Description"><span><code>true</code> if <code>build|bundle|b</code> is being used.</span></td> </tr> <tr> <td data-th="Environment Variable"><span><code>WEBPACK_WATCH</code></span></td> <td data-th="Description"><span><code>true</code> if <code>--watch|watch|w</code> is being used.</span></td> </tr> </tbody> </table> <p>Note that you can not access those built-in environment variables inside the bundled code.</p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">env<span class="token punctuation">,</span> argv</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    mode<span class="token operator">:</span> env<span class="token punctuation">.</span><span class="token constant">WEBPACK_SERVE</span> <span class="token operator">?</span> <span class="token string">\'development\'</span> <span class="token operator">:</span> <span class="token string">\'production\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="node-env">node-env<a href="#node-env" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>You can use <code>--node-env</code> option to set <code>process.env.NODE_ENV</code>:</p> <pre><code class="hljs language-bash">npx webpack --node-env production   <span class="token comment"># process.env.NODE_ENV = \'production\'</span></code></pre> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>The <code>mode</code> option would respect the <code>--node-env</code> option if you don\'t set it explicitly, i.e. <code>--node-env production</code> would set both <code>process.env.NODE_ENV</code> and <code>mode</code> to <code>\'production\'</code></p></aside> <h2 id="configuration-options">Configuration Options<a href="#configuration-options" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <table> <thead> <tr> <th>Parameter</th> <th>Explanation</th> <th>Input type</th> <th>Default</th> </tr> </thead> <tbody> <tr> <td data-th="Parameter"><span><code>--config</code></span></td> <td data-th="Explanation"><span>Path to the configuration file</span></td> <td data-th="Input type"><span>string[]</span></td> <td data-th="Default"><span><a href="/api/cli/#default-configurations">Default Configs</a></span></td> </tr> <tr> <td data-th="Parameter"><span><code>--config-name</code></span></td> <td data-th="Explanation"><span>Name of the configuration to use</span></td> <td data-th="Input type"><span>string[]</span></td> <td data-th="Default"><span>-</span></td> </tr> <tr> <td data-th="Parameter"><span><code>--env</code></span></td> <td data-th="Explanation"><span>Environment passed to the configuration, when it is a function</span></td> <td data-th="Input type"><span>string[]</span></td> <td data-th="Default"><span>-</span></td> </tr> </tbody> </table> <h2 id="analyzing-bundle">Analyzing Bundle<a href="#analyzing-bundle" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>You can also use <code>webpack-bundle-analyzer</code> to analyze your output bundles emitted by webpack. You can use <code>--analyze</code> flag to invoke it via CLI.</p> <pre><code class="hljs language-bash">npx webpack --analyze</code></pre> <aside class="warning"><h6 class="warning__prefix">warning</h6><p>Make sure you have <code>webpack-bundle-analyzer</code> installed in your project else CLI will prompt you to install it.</p></aside> <h2 id="progress">Progress<a href="#progress" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>To check the progress of any webpack compilation you can use the <code>--progress</code> flag.</p> <pre><code class="hljs language-bash">npx webpack --progress</code></pre> <p>To collect profile data for progress steps you can pass <code>profile</code> as value to <code>--progress</code> flag.</p> <pre><code class="hljs language-bash">npx webpack --progress<span class="token operator">=</span>profile</code></pre> <h2 id="pass-cli-arguments-to-nodejs">Pass CLI arguments to Node.js<a href="#pass-cli-arguments-to-nodejs" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>To pass arguments directly to Node.js process, you can use the <code>NODE_OPTIONS</code> option.</p> <p>For example, to increase the memory limit of Node.js process to 4 GB</p> <pre><code class="hljs language-bash"><span class="token assign-left variable">NODE_OPTIONS</span><span class="token operator">=</span><span class="token string">"--max-old-space-size=4096"</span> webpack</code></pre> <p>Also, you can pass multiple options to Node.js process</p> <pre><code class="hljs language-bash"><span class="token assign-left variable">NODE_OPTIONS</span><span class="token operator">=</span><span class="token string">"--max-old-space-size=4096 -r /path/to/preload/file.js"</span> webpack</code></pre> <h2 id="exit-codes-and-their-meanings">Exit codes and their meanings<a href="#exit-codes-and-their-meanings" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <table> <thead> <tr> <th>Exit Code</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td data-th="Exit Code"><span><code>0</code></span></td> <td data-th="Description"><span>Success</span></td> </tr> <tr> <td data-th="Exit Code"><span><code>1</code></span></td> <td data-th="Description"><span>Errors from webpack</span></td> </tr> <tr> <td data-th="Exit Code"><span><code>2</code></span></td> <td data-th="Description"><span>Configuration/options problem or an internal error</span></td> </tr> </tbody> </table> <h2 id="cli-environment-variables">CLI Environment Variables<a href="#cli-environment-variables" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <table> <thead> <tr> <th>Environment Variable</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td data-th="Environment Variable"><span><code>WEBPACK_CLI_SKIP_IMPORT_LOCAL</code></span></td> <td data-th="Description"><span>when <code>true</code> it will skip using the local instance of <code>webpack-cli</code>.</span></td> </tr> <tr> <td data-th="Environment Variable"><span><code>WEBPACK_CLI_FORCE_LOAD_ESM_CONFIG</code></span></td> <td data-th="Description"><span>when <code>true</code> it will force load the ESM config.</span></td> </tr> <tr> <td data-th="Environment Variable"><span><a href="#webpack_package"><code>WEBPACK_PACKAGE</code></a></span></td> <td data-th="Description"><span>Use a custom webpack version in CLI.</span></td> </tr> <tr> <td data-th="Environment Variable"><span><code>WEBPACK_CLI_HELP_WIDTH</code></span></td> <td data-th="Description"><span>Use a custom width for help output.</span></td> </tr> </tbody> </table> <pre><code class="hljs language-bash"><span class="token assign-left variable">WEBPACK_CLI_FORCE_LOAD_ESM_CONFIG</span><span class="token operator">=</span>true npx webpack --config ./webpack.config.esm</code></pre> <h3 id="webpack_package">WEBPACK_PACKAGE<a href="#webpack_package" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Use a custom webpack version in CLI. Considering the following content in your <code>package.json</code>:</p> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"webpack"</span><span class="token operator">:</span> <span class="token string">"^4.0.0"</span><span class="token punctuation">,</span>\n  <span class="token property">"webpack-5"</span><span class="token operator">:</span> <span class="token string">"npm:webpack@^5.32.0"</span><span class="token punctuation">,</span>\n  <span class="token property">"webpack-cli"</span><span class="token operator">:</span> <span class="token string">"^4.5.0"</span>\n<span class="token punctuation">}</span></code></pre> <p>To use <code>webpack v4.0.0</code>:</p> <pre><code class="hljs language-bash">npx webpack</code></pre> <p>To use <code>webpack v5.32.0</code>:</p> <pre><code class="hljs language-bash"><span class="token assign-left variable">WEBPACK_PACKAGE</span><span class="token operator">=</span>webpack-5 npx webpack</code></pre> '}}]);