(self.webpackChunk=self.webpackChunk||[]).push([[8831],{8831:function(n,s,a){"use strict";a.r(s),s.default='<p><strong>플러그인은</strong> webpack의 <a href="https://github.com/webpack/tapable">기본</a>입니다. webpack 자체는 webpack 설정에서 사용하는 것과 <strong>동일한 플러그인 시스템으로</strong> 구축되어 있습니다.</p> <p><a href="/concepts/loaders">로더</a>가 할 수 없는 <strong>다른 작업을</strong> 수행할 목적으로 제공됩니다.</p> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>플러그인에서 <a href="https://github.com/webpack/webpack-sources"><code>webpack-sources</code></a> 패키지를 사용할 때 <code>require(\'webpack-sources\')</code> 대신 <code>require(\'webpack\').sources</code>를 사용하면, 영구 캐시에 대한 버전 충돌을 방지합니다.</p></aside> <h2 id="anatomy">Anatomy<a href="#anatomy" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>webpack <strong>플러그인은</strong> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply"><code>apply</code></a> 메서드를 가지고 있는 객체입니다. <code>apply</code> 메서드는 webpack 컴파일러에 의해 호출되며, <strong>전체</strong> 컴파일 라이프사이클에 접근 할 수 있습니다.</p> <p><strong>ConsoleLogOnBuildWebpackPlugin.js</strong></p> <pre><code class="hljs language-javascript"><span class="token keyword">const</span> pluginName <span class="token operator">=</span> <span class="token string">\'ConsoleLogOnBuildWebpackPlugin\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">ConsoleLogOnBuildWebpackPlugin</span> <span class="token punctuation">{</span>\n  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>run<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span>pluginName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">compilation</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'The webpack build process is starting!!!\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> ConsoleLogOnBuildWebpackPlugin<span class="token punctuation">;</span></code></pre> <p>컴파일러 훅의 탭 메서드의 첫번째 파라미터는 플러그인 이름의 Camelcase 버전으로 작성해야 합니다. 모든 훅에서 재사용 할 수 있도록 하기 위해서 상수를 사용하는 것이 좋습니다.</p> <h2 id="usage">Usage<a href="#usage" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><strong>플러그인은</strong> 매개변수 및 옵션을 사용할 수 있으므로, webpack 설정에서 <code>plugins</code> 속성에 <code>새로운</code> 인스턴스로 전달해야 합니다.</p> <p>webpack을 사용하는 방법에 따라 여러 가지 방법으로 플러그인을 사용 할 수 있습니다.</p> <h3 id="configuration">Configuration<a href="#configuration" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript"><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'html-webpack-plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//npm 으로 설치됨</span>\n<span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//빌트인 플러그인에 접근하기 위함</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token operator">:</span> <span class="token string">\'./path/to/my/entry/file.js\'</span><span class="token punctuation">,</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    filename<span class="token operator">:</span> <span class="token string">\'my-first-webpack.bundle.js\'</span><span class="token punctuation">,</span>\n    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.(js|jsx)$/</span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token string">\'babel-loader\'</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProgressPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> template<span class="token operator">:</span> <span class="token string">\'./src/index.html\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p><code>ProgressPlugin</code>은 컴파일하는 동안 리포트를 사용자 정의로 생성 할 수 있으며 <code>HtmlWebpackPlugin</code>은 <code>script</code>를 사용하여 <code>my-first-webpack.bundle.js</code> 파일을 포함하는 HTML 파일을 생성합니다.</p> <h3 id="node-api">Node API<a href="#node-api" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Node API를 사용할 때 설정의 <code>플러그인</code> 속성을 통해 플러그인을 전달 할 수도 있습니다.</p> <p><strong>some-node-script.js</strong></p> <pre><code class="hljs language-javascript"><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//webpack 런타임에 접근하기 위함</span>\n<span class="token keyword">const</span> configuration <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./webpack.config.js\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> compiler <span class="token operator">=</span> <span class="token function">webpack</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProgressPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ncompiler<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> stats</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>위에서 본 예제가 <a href="https://github.com/webpack/webpack/blob/e7087ffeda7fa37dfe2ca70b5593c6e899629a2c/bin/webpack.js#L290-L292">webpack 런타임 자체</a>와 매우 유사한 걸 눈치채셨나요? <a href="https://github.com/webpack/webpack">webpack 소스 코드</a>에는 사용자의 설정과 스크립트에 적용할 수 있는 훌륭하고 많은 사용 사례가 숨어 있습니다!</p></aside> '}}]);