"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1552],{1552:function(n,s,a){a.r(s),s.default='<p><code>webpack</code> 컴파일러는 ES2015 모듈, CommonJS 또는 AMD로 작성된 모듈을 이해할 수 있습니다. 그러나 일부 써드 파티 라이브러리는 전역 종속성을 필요로 할 수 있습니다. (예: <code>jQuery</code>의 경우 <code>$</code>) 라이브러리는 내보낼 필요가 있는 전역 변수를 만들 수도 있습니다. 이러한 "깨진 모듈은" <em>shimming이</em> 작동하는 하나의 인스턴스입니다.</p> <aside class="warning"><h6 class="warning__prefix">warning</h6><p><strong>전역 변수를 사용하지 않는 것이 좋습니다!</strong> webpack의 전체 개념은 더 많은 모듈식 프런트엔드 개발을 허용하는 것입니다. 이는 응집도가 높고 숨겨진 종속성(예: 전역 변수)에 의존하지 않는 격리 된 모듈을 작성하는 것을 의미합니다. 그러므로 필요한 경우에만 이 기능을 사용하세요.</p></aside> <p><em>shimming</em> 이 유용한 또 다른 경우는 더 많은 사용자를 지원하기 위해 브라우저 기능을 <a href="https://en.wikipedia.org/wiki/Polyfill_%28programming%29">폴리필</a>하려는 경우입니다. 이 경우 패치가 필요한 브라우저에만 해당 폴리필을 제공할 수 있습니다. (예: 요청 시 로드)</p> <p>해당 글에서는 이러한 두 가지 사용 사례를 모두 살펴봅니다.</p> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>간단하게 시작하기 위해 이 가이드는 <a href="/guides/getting-started">시작하기</a>의 예에서 시작합니다. 계속해서 진행하기에 앞서 설정에 익숙해져야 합니다.</p></aside> <h2 id="shimming-globals">Shimming Globals<a href="#shimming-globals" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>전역 변수 shimming의 첫 번째 사용 사례부터 시작하겠습니다. 시작하기 전에 프로젝트를 다시 한번 살펴보겠습니다.</p> <p><strong>프로젝트</strong></p> <pre><code class="hljs language-diff">webpack-demo\n|- package.json\n|- webpack.config.js\n|- /dist\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> |- index.html\n</span></span>|- /src\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> |- index.js\n</span></span>|- /node_modules</code></pre> <p>우리가 사용했던 <code>lodash</code> 패키지를 기억하시나요? 데모 목적으로 애플리케이션에서 전역적으로 제공하고 싶다고 가정해 보겠습니다. 이를 위해 <code>ProvidePlugin</code>을 사용할 수 있습니다.</p> <p><a href="/plugins/provide-plugin"><code>ProvidePlugin</code></a>은 webpack을 통해 컴파일된 모든 모듈에서 패키지를 변수로 사용할 수 있게 해줍니다. 변수가 사용되는 것을 webpack에서 확인하면 최종 번들에 주어진 패키지를 포함합니다. <code>lodash</code>에 대한 <code>import</code>문을 제거하고 플러그인을 통해 제공해보겠습니다.</p> <p><strong>src/index.js</strong></p> <pre><code class="hljs language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">import _ from \'lodash\';\n</span><span class="token prefix deleted">-</span><span class="token line">\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">function component() {\n</span><span class="token prefix unchanged"> </span><span class="token line">  const element = document.createElement(\'div\');\n</span></span>\n<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">  // 이제 이 스크립트로 Lodash를 가져옵니다.\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  return element;\n</span><span class="token prefix unchanged"> </span><span class="token line">}\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">document.body.appendChild(component());</span></span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const path = require(\'path\');\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">const webpack = require(\'webpack\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">  entry: \'./src/index.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">  output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    filename: \'main.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">    path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  plugins: [\n</span><span class="token prefix inserted">+</span><span class="token line">    new webpack.ProvidePlugin({\n</span><span class="token prefix inserted">+</span><span class="token line">      _: \'lodash\',\n</span><span class="token prefix inserted">+</span><span class="token line">    }),\n</span><span class="token prefix inserted">+</span><span class="token line">  ],\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">};</span></span></code></pre> <p>여기서 우리가 실질적으로 한 것은 webpack에게 알려주는 것입니다.</p> <blockquote> <p>변수 <code>_</code>의 인스턴스가 하나 이상 존재한다면 <code>lodash</code> 패키지를 포함하고 필요한 모듈에 제공합니다.</p> </blockquote> <p>빌드를 실행해도 동일한 출력이 표시되어야 합니다.</p> <pre><code class="hljs language-bash">$ <span class="token function">npm</span> run build\n\n<span class="token punctuation">..</span>\n\n<span class="token punctuation">[</span>webpack-cli<span class="token punctuation">]</span> Compilation finished\nasset main.js <span class="token number">69.1</span> KiB <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span> <span class="token punctuation">[</span>minimized<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: main<span class="token punctuation">)</span> <span class="token number">1</span> related asset\nruntime modules <span class="token number">344</span> bytes <span class="token number">2</span> modules\ncacheable modules <span class="token number">530</span> KiB\n  ./src/index.js <span class="token number">191</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n  ./node_modules/lodash/lodash.js <span class="token number">530</span> KiB <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\nwebpack <span class="token number">5.4</span>.0 compiled successfully <span class="token keyword">in</span> <span class="token number">2910</span> ms</code></pre> <p>또한 <code>ProvidePlugin</code>에서 "배열 경로"(예: <code>[module, child, ...children?]</code>)를 구성하여 모듈의 일부분만 내보낼 수 있습니다. 호출될 때마다 <code>lodash</code>에서 <code>join</code> 메소드만 제공하고 싶다고 가정해 보겠습니다.</p> <p><strong>src/index.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">function component() {\n</span><span class="token prefix unchanged"> </span><span class="token line">  const element = document.createElement(\'div\');\n</span></span>\n<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">  element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  element.innerHTML = join([\'Hello\', \'webpack\'], \' \');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  return element;\n</span><span class="token prefix unchanged"> </span><span class="token line">}\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">document.body.appendChild(component());</span></span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const path = require(\'path\');\n</span><span class="token prefix unchanged"> </span><span class="token line">const webpack = require(\'webpack\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">  entry: \'./src/index.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">  output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    filename: \'main.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">    path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  plugins: [\n</span><span class="token prefix unchanged"> </span><span class="token line">    new webpack.ProvidePlugin({\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">      _: \'lodash\',\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">      join: [\'lodash\', \'join\'],\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">    }),\n</span><span class="token prefix unchanged"> </span><span class="token line">  ],\n</span><span class="token prefix unchanged"> </span><span class="token line">};</span></span></code></pre> <p><code>lodash</code> 라이브러리의 나머지는 삭제되므로 <a href="/guides/tree-shaking">트리 쉐이킹</a>이 잘 수행됩니다.</p> <h2 id="granular-shimming">Granular Shimming<a href="#granular-shimming" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>일부 레거시 모듈은 <code>this</code>가 <code>window</code> 객체에 의존합니다. <code>index.js</code>를 업데이트해 보겠습니다.</p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">function component() {\n</span><span class="token prefix unchanged"> </span><span class="token line">  const element = document.createElement(\'div\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  element.innerHTML = join([\'Hello\', \'webpack\'], \' \');\n</span></span>\n<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  // `window의` 컨텍스트에 있다고 가정합니다.\n</span><span class="token prefix inserted">+</span><span class="token line">  this.alert("Hmmm, this probably isn\'t a great idea...");\n</span><span class="token prefix inserted">+</span><span class="token line">\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  return element;\n</span><span class="token prefix unchanged"> </span><span class="token line">}\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">document.body.appendChild(component());</span></span></code></pre> <p>이것은 <code>this</code>가 <code>module.exports</code>와 같은 CommonJS 컨텍스트에서 모듈이 실행될 때 문제가 됩니다. 이 경우 <a href="/loaders/imports-loader/"><code>imports-loader</code></a>를 사용하여 <code>this</code>를 재정의할 수 있습니다.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const path = require(\'path\');\n</span><span class="token prefix unchanged"> </span><span class="token line">const webpack = require(\'webpack\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">  entry: \'./src/index.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">  output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    filename: \'main.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">    path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  module: {\n</span><span class="token prefix inserted">+</span><span class="token line">    rules: [\n</span><span class="token prefix inserted">+</span><span class="token line">      {\n</span><span class="token prefix inserted">+</span><span class="token line">        test: require.resolve(\'./src/index.js\'),\n</span><span class="token prefix inserted">+</span><span class="token line">        use: \'imports-loader?wrapper=window\',\n</span><span class="token prefix inserted">+</span><span class="token line">      },\n</span><span class="token prefix inserted">+</span><span class="token line">    ],\n</span><span class="token prefix inserted">+</span><span class="token line">  },\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  plugins: [\n</span><span class="token prefix unchanged"> </span><span class="token line">    new webpack.ProvidePlugin({\n</span><span class="token prefix unchanged"> </span><span class="token line">      join: [\'lodash\', \'join\'],\n</span><span class="token prefix unchanged"> </span><span class="token line">    }),\n</span><span class="token prefix unchanged"> </span><span class="token line">  ],\n</span><span class="token prefix unchanged"> </span><span class="token line">};</span></span></code></pre> <h2 id="global-exports">Global Exports<a href="#global-exports" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>라이브러리가 사용자가 사용할 것으로 예상하는 전역 변수를 생성한다고 가정해 보겠습니다. 이를 증명하기 위해 작은 모듈을 추가할 수 있습니다.</p> <p><strong>프로젝트</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> webpack-demo\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- package.json\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- webpack.config.js\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /dist\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /src\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- index.js\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   |- globals.js\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> |- /node_modules</span></span></code></pre> <p><strong>src/globals.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">const</span> file <span class="token operator">=</span> <span class="token string">\'blah.txt\'</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> helpers <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">test</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'test something\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">parse</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'parse something\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>소스 코드에서 이러한 작업을 수행할 수는 없지만, 위에 표시된 코드와 유사한 오래된 라이브러리를 접했을 수 있습니다. 이 경우 <a href="/loaders/exports-loader/"><code>exports-loader</code></a>를 사용하여 해당 전역 변수를 일반 모듈로 내보낼 수 있습니다. 예를 들어 <code>file</code>을 <code>file</code>로, <code>helpers.parse</code>를 <code>parse</code>로 내보내 봅시다.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const path = require(\'path\');\n</span><span class="token prefix unchanged"> </span><span class="token line">const webpack = require(\'webpack\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">  entry: \'./src/index.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">  output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    filename: \'main.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">    path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  module: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    rules: [\n</span><span class="token prefix unchanged"> </span><span class="token line">      {\n</span><span class="token prefix unchanged"> </span><span class="token line">        test: require.resolve(\'./src/index.js\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">        use: \'imports-loader?wrapper=window\',\n</span><span class="token prefix unchanged"> </span><span class="token line">      },\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">      {\n</span><span class="token prefix inserted">+</span><span class="token line">        test: require.resolve(\'./src/globals.js\'),\n</span><span class="token prefix inserted">+</span><span class="token line">        use:\n</span><span class="token prefix inserted">+</span><span class="token line">          \'exports-loader?type=commonjs&#x26;exports=file,multiple|helpers.parse|parse\',\n</span><span class="token prefix inserted">+</span><span class="token line">      },\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">    ],\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  plugins: [\n</span><span class="token prefix unchanged"> </span><span class="token line">    new webpack.ProvidePlugin({\n</span><span class="token prefix unchanged"> </span><span class="token line">      join: [\'lodash\', \'join\'],\n</span><span class="token prefix unchanged"> </span><span class="token line">    }),\n</span><span class="token prefix unchanged"> </span><span class="token line">  ],\n</span><span class="token prefix unchanged"> </span><span class="token line">};</span></span></code></pre> <p>이제 엔트리 스크립트(예: <code>src/index.js</code>)에서 <code>const {file, parse} = require(\'./globals.js\');</code>를 사용할 수 있으며 원활하게 작동합니다.</p> <h2 id="loading-polyfills">Loading Polyfills<a href="#loading-polyfills" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>지금까지 논의한 대부분은 레거시 패키지 처리와 관련이 있습니다. 두 번째 주제인 <strong>폴리필로</strong> 넘어가겠습니다.</p> <p>폴리필을 로드하는 방법에는 여러 가지가 있습니다. 예를 들어 <a href="https://babeljs.io/docs/en/babel-polyfill/"><code>babel-polyfill</code></a>을 포함하려면 다음과 같이하면 됩니다.</p> <pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save babel-polyfill</code></pre> <p>메인 번들에 포함되도록 <code>import</code> 합니다.</p> <p><strong>src/index.js</strong></p> <pre><code class="hljs language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">import \'babel-polyfill\';\n</span><span class="token prefix inserted">+</span><span class="token line">\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">function component() {\n</span><span class="token prefix unchanged"> </span><span class="token line">  const element = document.createElement(\'div\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  element.innerHTML = join([\'Hello\', \'webpack\'], \' \');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  // `window`의 컨텍스트에 있다고 가정합니다.\n</span><span class="token prefix unchanged"> </span><span class="token line">  this.alert("Hmmm, this probably isn\'t a great idea...");\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  return element;\n</span><span class="token prefix unchanged"> </span><span class="token line">}\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">document.body.appendChild(component());</span></span></code></pre> <aside class="tip"><h6 class="tip__prefix">tip</h6><p><code>import</code>한 것을 변수에 바인딩하지 않습니다. 이는 폴리필이 나머지 코드 베이스 이전에 자체적으로 실행되는 특정 기능이 존재한다고 가정하기 때문입니다.</p></aside> <p>이 접근 방식은 번들 크기보다 정확성을 우선시합니다. 안전과 견고함을 위해서는 폴리필이나 shim이 <strong>다른 모든 코드보다 먼저</strong> 실행되어야 하므로 동기식으로 로드하거나 모든 앱 코드는 모든 폴리필이나 shim이 로드된 후에 로드해야 합니다. 또한 커뮤니티에는 최신 브라우저에 폴리필이 "필요하지 않다"거나 폴리필이나 shim이 누락된 기능을 추가하는 역할 만한다는 오해가 많이 있습니다. 사실, 가장 최신 브라우저에서도 종종 <em>깨진 구현을 복구</em> 합니다. 따라서 번들 크기 비용이 발생하더라도 모든 폴리필이나 shim을 무조건 동기식으로 로드하는 것이 모범 사례입니다.</p> <p>문제가 해결됐다고 생각하고 위험을 감수하고 싶다면 다음과 같은 방법도 있습니다. <code>import</code>를 새 파일로 이동하고 <a href="https://github.com/github/fetch"><code>whatwg-fetch</code></a> 폴리필을 추가해 보겠습니다.</p> <pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save whatwg-fetch</code></pre> <p><strong>src/index.js</strong></p> <pre><code class="hljs language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">import \'babel-polyfill\';\n</span><span class="token prefix deleted">-</span><span class="token line">\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">function component() {\n</span><span class="token prefix unchanged"> </span><span class="token line">  const element = document.createElement(\'div\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  element.innerHTML = join([\'Hello\', \'webpack\'], \' \');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  // `window`의 컨텍스트에 있다고 가정합니다.\n</span><span class="token prefix unchanged"> </span><span class="token line">  this.alert("Hmmm, this probably isn\'t a great idea...");\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  return element;\n</span><span class="token prefix unchanged"> </span><span class="token line">}\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">document.body.appendChild(component());</span></span></code></pre> <p><strong>project</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> webpack-demo\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- package.json\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- webpack.config.js\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /dist\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /src\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- index.js\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- globals.js\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   |- polyfills.js\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> |- /node_modules</span></span></code></pre> <p><strong>src/polyfills.js</strong></p> <pre><code class="hljs language-javascript"><span class="token keyword">import</span> <span class="token string">\'babel-polyfill\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'whatwg-fetch\'</span><span class="token punctuation">;</span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const path = require(\'path\');\n</span><span class="token prefix unchanged"> </span><span class="token line">const webpack = require(\'webpack\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">module.exports = {\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">  entry: \'./src/index.js\',\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  entry: {\n</span><span class="token prefix inserted">+</span><span class="token line">    polyfills: \'./src/polyfills\',\n</span><span class="token prefix inserted">+</span><span class="token line">    index: \'./src/index.js\',\n</span><span class="token prefix inserted">+</span><span class="token line">  },\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  output: {\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">    filename: \'main.js\',\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    filename: \'[name].bundle.js\',\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">    path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  module: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    rules: [\n</span><span class="token prefix unchanged"> </span><span class="token line">      {\n</span><span class="token prefix unchanged"> </span><span class="token line">        test: require.resolve(\'./src/index.js\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">        use: \'imports-loader?wrapper=window\',\n</span><span class="token prefix unchanged"> </span><span class="token line">      },\n</span><span class="token prefix unchanged"> </span><span class="token line">      {\n</span><span class="token prefix unchanged"> </span><span class="token line">        test: require.resolve(\'./src/globals.js\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">        use:\n</span><span class="token prefix unchanged"> </span><span class="token line">          \'exports-loader?type=commonjs&#x26;exports[]=file&#x26;exports[]=multiple|helpers.parse|parse\',\n</span><span class="token prefix unchanged"> </span><span class="token line">      },\n</span><span class="token prefix unchanged"> </span><span class="token line">    ],\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  plugins: [\n</span><span class="token prefix unchanged"> </span><span class="token line">    new webpack.ProvidePlugin({\n</span><span class="token prefix unchanged"> </span><span class="token line">      join: [\'lodash\', \'join\'],\n</span><span class="token prefix unchanged"> </span><span class="token line">    }),\n</span><span class="token prefix unchanged"> </span><span class="token line">  ],\n</span><span class="token prefix unchanged"> </span><span class="token line">};</span></span></code></pre> <p>이를 통해 새로운 <code>polyfills.bundle.js</code> 파일을 조건부로 로드하는 로직을 추가 할 수 있습니다. 이 결정을 내리는 방법은 지원 기술과 브라우저에 따라 다릅니다. polyfill이 필요한지 여부를 확인하기 위해 몇 가지 간단한 테스트를 수행합니다.</p> <p><strong>dist/index.html</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">&#x3C;!DOCTYPE html>\n</span><span class="token prefix unchanged"> </span><span class="token line">&#x3C;html>\n</span><span class="token prefix unchanged"> </span><span class="token line">  &#x3C;head>\n</span><span class="token prefix unchanged"> </span><span class="token line">    &#x3C;meta charset="utf-8" />\n</span><span class="token prefix unchanged"> </span><span class="token line">    &#x3C;title>Getting Started&#x3C;/title>\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    &#x3C;script>\n</span><span class="token prefix inserted">+</span><span class="token line">      const modernBrowser = \'fetch\' in window &#x26;&#x26; \'assign\' in Object;\n</span><span class="token prefix inserted">+</span><span class="token line">\n</span><span class="token prefix inserted">+</span><span class="token line">      if (!modernBrowser) {\n</span><span class="token prefix inserted">+</span><span class="token line">        const scriptElement = document.createElement(\'script\');\n</span><span class="token prefix inserted">+</span><span class="token line">\n</span><span class="token prefix inserted">+</span><span class="token line">        scriptElement.async = false;\n</span><span class="token prefix inserted">+</span><span class="token line">        scriptElement.src = \'/polyfills.bundle.js\';\n</span><span class="token prefix inserted">+</span><span class="token line">        document.head.appendChild(scriptElement);\n</span><span class="token prefix inserted">+</span><span class="token line">      }\n</span><span class="token prefix inserted">+</span><span class="token line">    &#x3C;/script>\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  &#x3C;/head>\n</span><span class="token prefix unchanged"> </span><span class="token line">  &#x3C;body>\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">    &#x3C;script src="main.js">&#x3C;/script>\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    &#x3C;script src="index.bundle.js">&#x3C;/script>\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  &#x3C;/body>\n</span><span class="token prefix unchanged"> </span><span class="token line">&#x3C;/html></span></span></code></pre> <p>이제 엔트리 스크립트에서 일부 데이터를 가져올 수 있습니다.</p> <p><strong>src/index.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">function component() {\n</span><span class="token prefix unchanged"> </span><span class="token line">  const element = document.createElement(\'div\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  element.innerHTML = join([\'Hello\', \'webpack\'], \' \');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  // `window`의 컨텍스트에 있다고 가정합니다.\n</span><span class="token prefix unchanged"> </span><span class="token line">  this.alert("Hmmm, this probably isn\'t a great idea...");\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  return element;\n</span><span class="token prefix unchanged"> </span><span class="token line">}\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">document.body.appendChild(component());\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">\n</span><span class="token prefix inserted">+</span><span class="token line">fetch(\'https://jsonplaceholder.typicode.com/users\')\n</span><span class="token prefix inserted">+</span><span class="token line">  .then((response) => response.json())\n</span><span class="token prefix inserted">+</span><span class="token line">  .then((json) => {\n</span><span class="token prefix inserted">+</span><span class="token line">    console.log(\n</span><span class="token prefix inserted">+</span><span class="token line">      "We retrieved some data! AND we\'re confident it will work on a variety of browser distributions."\n</span><span class="token prefix inserted">+</span><span class="token line">    );\n</span><span class="token prefix inserted">+</span><span class="token line">    console.log(json);\n</span><span class="token prefix inserted">+</span><span class="token line">  })\n</span><span class="token prefix inserted">+</span><span class="token line">  .catch((error) =>\n</span><span class="token prefix inserted">+</span><span class="token line">    console.error(\'Something went wrong when fetching this data: \', error)\n</span><span class="token prefix inserted">+</span><span class="token line">  );</span></span></code></pre> <p>빌드를 실행하면 <code>polyfills.bundle.js</code> 파일이 생성되고 브라우저에서 원활하게 동작하게 됩니다. 이 설정은 개선될 수 있지만 실제로 필요한 사용자에게만 폴리필을 제공하는 방법에 대한 좋은 아이디어입니다.</p> <h2 id="further-optimizations">Further Optimizations<a href="#further-optimizations" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>babel-preset-env</code> 패키지는 <a href="https://github.com/browserslist/browserslist">browserslist</a>를 사용하여 브라우저 매트릭스에서 지원되지 않는 항목만 트랜스파일합니다. 이 사전 설정은 <a href="https://babeljs.io/docs/en/babel-preset-env#usebuiltins"><code>useBuiltIns</code></a> 옵션(기본값 <code>false</code>)과 함께 제공되며, 전역 <code>babel-polyfill</code>을 가져오는 것을 <code>import</code> 패턴을 통해 더 세분화 된 기능으로 변환할 수 있습니다.</p> <pre><code class="hljs language-js"><span class="token keyword">import</span> <span class="token string">\'core-js/modules/es7.string.pad-start\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'core-js/modules/es7.string.pad-end\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'core-js/modules/web.timers\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'core-js/modules/web.immediate\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'core-js/modules/web.dom.iterable\'</span><span class="token punctuation">;</span></code></pre> <p>자세한 내용은 <a href="https://babeljs.io/docs/en/babel-preset-env">babel-preset-env 문서</a>를 참고하세요.</p> <h2 id="node-built-ins">Node Built-Ins<a href="#node-built-ins" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>process</code>와 같은 Node 내장 기능은 특별한 로더나 플러그인을 사용하지 않고도 설정 파일에서 직접 폴리필 할 수 있습니다. 자세한 내용과 예제는 <a href="/configuration/node">node 설정 페이지</a>를 참고하세요.</p> <h2 id="other-utilities">Other Utilities<a href="#other-utilities" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>레거시 모듈을 다룰 때 도움이 될 수 있는 몇 가지 도구가 있습니다.</p> <p>모듈에 AMD/CommonJS 버전이 없고 <code>dist</code>를 포함하려는 경우 <a href="/configuration/module/#modulenoparse"><code>noParse</code></a>에서 플래그를 지정할 수 있습니다. 이렇게하면 webpack이 모듈을 파싱하거나 <code>require()</code> 및 <code>import</code> 문을 해석하지 않고 모듈을 포함하게됩니다. 이 방법은 빌드 성능을 향상시키는데도 사용됩니다.</p> <aside class="warning"><h6 class="warning__prefix">warning</h6><p><code>ProvidePlugin</code>과 같이 AST가 필요한 기능은 동작하지 않습니다.</p></aside> <p>마지막으로 여러 <a href="/concepts/modules">모듈 스타일</a>을 지원하는 모듈이 있습니다. (예: AMD, CommonJS 및 레거시의 조합) 대부분의 경우, 먼저 <code>define</code>을 확인한 다음 일부 코드를 사용하여 속성을 내보냅니다. 이 경우 <a href="/loaders/imports-loader/"><code>imports-loader</code></a>를 통해 <code>additionalCode=var%define%20=%20false;</code>를 설정하여 CommonJS 경로를 강제하는 것이 도움이 될 수 있습니다.</p> '}}]);