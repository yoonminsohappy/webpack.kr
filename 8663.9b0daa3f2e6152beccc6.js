"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8663],{8663:function(e,p,a){a.r(p),p.default='<p>하나의 파일이 다른 파일에 의존할 때마다, webpack은 이것을 <em>의존성으로</em> 취급합니다. 이를 통해 webpack은 이미지 또는 웹 폰트와 같은 코드가 아닌 애셋을 가져와, 애플리케이션에 <em>의존성으로</em> 제공할 수 있습니다.</p> <p>webpack은 애플리케이션을 처리할 때, 커맨드 라인 또는 설정 파일에 정의 된 모듈 목록에서 시작합니다. <a href="/concepts/entry-points/"><em>엔트리 포인트</em></a>에서 시작하여, webpack은 애플리케이션에서 필요한 모든 모듈을 포함하는 <em>디펜던시 그래프를</em> 재귀적으로 빌드한 다음, 모든 모듈을 브라우저에 의해 로드 되는 작은 수(보통 하나)의 <em>번들로</em> 묶습니다.</p> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>애플리케이션 번들링은 브라우저가 새 요청을 시작하는 동안 앱이 기다려야 하는 횟수를 최소화하므로 <em>HTTP/1.1</em> 클라이언트에 특히 강력합니다. <em>HTTP/2의</em> 경우, <a href="/guides/code-splitting/">코드 스플리팅</a>을 사용하여 좋은 결과를 얻을 수도 있습니다.</p></aside> '}}]);