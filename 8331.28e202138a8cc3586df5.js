(self.webpackChunk=self.webpackChunk||[]).push([[8331],{8331:function(e,d,a){"use strict";a.r(d),d.default='<p>Compilation 객체에는 사용 가능한 많은 메서드와 훅이 있습니다. 이 페이지에서는, 사용 가능한 메서드와 프로퍼티를 나열합니다.</p> <h2 id="compilation-object-methods">compilation object methods<a href="#compilation-object-methods" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <h3 id="getstats">getStats<a href="#getstats" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function</code></p> <p>현재 컴파일에 대한 State 객체를 반환합니다.</p> <h3 id="addmodule">addModule<a href="#addmodule" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (module, cacheGroup)</code></p> <p>현재 컴파일에 모듈을 추가합니다.</p> <p>파라미터:</p> <ul> <li><code>module</code> - 추가할 모듈.</li> <li><code>cacheGroup</code> - 모듈의 <code>cacheGroup</code>.</li> </ul> <h3 id="getmodule">getModule<a href="#getmodule" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (module)</code></p> <p>식별자를 통해 컴파일에서 모듈을 가져옵니다.</p> <p>파라미터:</p> <ul> <li><code>module</code> - 가져올 모듈. 식별자는 <code>module.identifier()</code> 메서드를 사용한 컴파일을 통해 모듈에서 추출됩니다.</li> </ul> <h3 id="findmodule">findModule<a href="#findmodule" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (module)</code></p> <p>식별자로 모듈 검색을 시도합니다.</p> <p>파라미터:</p> <ul> <li><code>module</code> - 검색할 모듈. 식별자는 <code>module.identifier()</code> 메서드를 사용한 컴파일을 통해 모듈에서 추출됩니다.</li> </ul> <h3 id="buildmodule">buildModule<a href="#buildmodule" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (module, optional, origin, dependencies)</code></p> <p>주어진 모듈을 빌드합니다.</p> <p>파라미터:</p> <ul> <li><code>module</code> - 빌드할 모듈.</li> <li><code>optional</code> - 선택적 플래그.</li> <li><code>origin</code> - 모듈 빌드가 요청된 원본 모듈.</li> <li><code>dependencies</code> - 빌드할 모듈의 선택적 의존성.</li> </ul> <h3 id="processmoduledependencies">processModuleDependencies<a href="#processmoduledependencies" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (module, callback)</code></p> <p>주어진 모듈 의존성을 처리합니다.</p> <p>파라미터:</p> <ul> <li><code>module</code> - 의존성에 대해 처리할 모듈.</li> <li><code>callback</code> - 모듈의 의존성이 처리되었을 때 호출되는 함수.</li> </ul> <h3 id="addentry">addEntry<a href="#addentry" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (context, entry, name, callback)</code></p> <p>컴파일에 엔트리를 추가합니다.</p> <p>파라미터:</p> <ul> <li><code>context</code> - 엔트리의 컨텍스트 경로.</li> <li><code>entry</code> - 엔트리 의존성.</li> <li><code>name</code> - 엔트리 이름.</li> <li><code>callback</code> - addEntry가 완료될 때 호출되는 함수.</li> </ul> <h3 id="rebuildmodule">rebuildModule<a href="#rebuildmodule" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (module, thisCallback)</code></p> <p>모듈 재빌드를 트리거 합니다.</p> <p>파라미터:</p> <ul> <li><code>module</code> - 재빌드 할 모듈.</li> <li><code>thisCallback</code> - 모듈이 재빌드를 마쳤을 때 호출되는 함수.</li> </ul> <h3 id="finish">finish<a href="#finish" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (callback)</code></p> <p>컴파일을 완료하고 주어진 콜백을 호출합니다.</p> <p>파라미터:</p> <ul> <li><code>callback</code> - 컴파일이 완료되면 호출되는 함수.</li> </ul> <h3 id="seal">seal<a href="#seal" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (callback)</code></p> <p>컴파일을 봉인합니다.</p> <p>파라미터:</p> <ul> <li><code>callback</code> - 컴파일이 봉인되었을 때 호출되는 함수.</li> </ul> <h3 id="unseal">unseal<a href="#unseal" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function</code></p> <p>컴파일 봉인을 해제합니다.</p> <p>파라미터:</p> <ul> <li><code>callback</code> - 컴파일 봉인이 해제될 때 호출되는 함수.</li> </ul> <h3 id="reportdependencyerrorsandwarnings">reportDependencyErrorsAndWarnings<a href="#reportdependencyerrorsandwarnings" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (module, blocks)</code></p> <p>컴파일 오류 및 경고에 주어진 모듈의 오류 및 경고를 추가합니다.</p> <p>파라미터:</p> <ul> <li><code>module</code> - 오류 및 경고를 보고할 모듈.</li> <li><code>blocks</code> - 보고할 의존성 블록 집합.</li> </ul> <h3 id="addchunkingroup">addChunkInGroup<a href="#addchunkingroup" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (groupOptions, module, loc, request)</code></p> <p>기존 청크 그룹에 모듈을 추가하거나 새 그룹을 만듭니다. <code>chunkGroup</code>을 반환합니다.</p> <p>파라미터:</p> <ul> <li><code>groupOptions</code> - 청크 그룹에 대한 옵션.</li> <li><code>module</code> - 청크 그룹을 참조하는 모듈.</li> <li><code>loc</code> - 청크 그룹이 참조되는 위치(모듈 내부).</li> <li><code>request</code> - 청크 그룹이 참조되는 요청.</li> </ul> <h3 id="addchunk">addChunk<a href="#addchunk" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (name)</code></p> <p><code>compilation.chunks</code>에 새 청크를 만들고 추가합니다. 해당 <code>chunk</code>를 반환합니다.</p> <p>파라미터:</p> <ul> <li><code>name</code> - 청크 이름.</li> </ul> <h3 id="assigndepth">assignDepth<a href="#assigndepth" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (module)</code></p> <p>주어진 모듈과 그 의존성 블록에 재귀적으로 <code>depth</code>를 할당합니다.</p> <p>파라미터:</p> <ul> <li><code>module</code> - depth를 할당할 모듈.</li> </ul> <h3 id="getdependencyreference">getDependencyReference<a href="#getdependencyreference" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (module, dependency)</code></p> <p>주어진 모듈에서 의존성에 대한 참조를 반환합니다.</p> <p>파라미터:</p> <ul> <li><code>module</code> - 주어진 모듈.</li> <li><code>dependency</code> - 참조할 의존성.</li> </ul> <h3 id="processdependenciesblocksforchunkgroups">processDependenciesBlocksForChunkGroups<a href="#processdependenciesblocksforchunkgroups" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (inputChunkGroups)</code></p> <p><code>Module</code> 그래프에서 <code>Chunk</code> 그래프를 생성합니다. 이 과정은 두 단계로 이루어집니다. 1단계: 모듈 그래프를 탐색하고 <code>chunkDependencies</code>에서 기본 청크 그래프를 빌드합니다. 2단계: 기본 청크 그래프를 통해 가능한 모든 방법을 탐색하고 사용 가능한 모듈을 추적합니다. 탐색하는 동안, <code>processDependenciesBlocksForChunkGroups</code>는 청크를 서로 연결하고 <code>Blocks</code>는 <code>Chunks</code>와 연결합니다. 청크에 대한 모든 모듈이 이미 사용 가능하고 불필요한 청크를 연결하지 않으면 탐색을 중지합니다.</p> <p>파라미터:</p> <ul> <li><code>inputChunkGroups</code> - 처리되는 청크 그룹.</li> </ul> <h3 id="removereasonsofdependencyblock">removeReasonsOfDependencyBlock<a href="#removereasonsofdependencyblock" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (module, block)</code></p> <p>모듈과 의존성 블록의 관계를 제거합니다.</p> <p>파라미터:</p> <ul> <li><code>module</code> - 제거할 모듈 관계.</li> <li><code>block</code> - 의존성 블록.</li> </ul> <h3 id="patchchunksafterreasonremoval">patchChunksAfterReasonRemoval<a href="#patchchunksafterreasonremoval" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (module, chunk)</code></p> <p>의존성 이유를 제거한 후 모듈 및 청크의 연결을 패치합니다. <code>removeReasonsOfDependencyBlock</code>에 의해 자동으로 호출됩니다.</p> <p>파라미터:</p> <ul> <li><code>module</code> - 패치 할 모듈.</li> <li><code>chunk</code> - 패치 할 청크.</li> </ul> <h3 id="removechunkfromdependencies">removeChunkFromDependencies<a href="#removechunkfromdependencies" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (block, chunk)</code></p> <p>의존성 이유를 제거한 후 의존성 블록 모듈 및 청크에서 주어진 청크를 제거합니다. <code>removeReasonsOfDependencyBlock</code>에 의해 자동으로 호출됩니다.</p> <p>파라미터:</p> <ul> <li><code>block</code> - <code>Chunk</code>의 블록.</li> <li><code>chunk</code> - 의존성에서 제거할 청크.</li> </ul> <h3 id="sortitemswithmoduleids">sortItemsWithModuleIds<a href="#sortitemswithmoduleids" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function</code></p> <h3 id="sortitemswithchunkids">sortItemsWithChunkIds<a href="#sortitemswithchunkids" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function</code></p> <h3 id="summarizedependencies">summarizeDependencies<a href="#summarizedependencies" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function</code></p> <h3 id="createhash">createHash<a href="#createhash" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function</code></p> <h3 id="createmoduleassets">createModuleAssets<a href="#createmoduleassets" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function</code></p> <h3 id="createchunkassets">createChunkAssets<a href="#createchunkassets" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function</code></p> <h3 id="getpath">getPath<a href="#getpath" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (filename, data)</code></p> <p>삽입된 경로를 반환합니다.</p> <p>파라미터:</p> <ul> <li><code>filename</code> - 해시로 애셋 경로를 얻는 데 사용.</li> <li><code>data</code> - data 객체.</li> </ul> <h3 id="getpathwithinfo">getPathWithInfo<a href="#getpathwithinfo" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (filename, data)</code></p> <p>삽입된 경로 및 애셋 정보를 반환합니다.</p> <p>파라미터:</p> <ul> <li><code>filename</code> - 해시로 애셋 경로를 얻는 데 사용.</li> <li><code>data</code> - data 객체.</li> </ul> <h3 id="createchildcompiler">createChildCompiler<a href="#createchildcompiler" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (name, outputOptions, plugins)</code></p> <p>webpack 내에서 webpack의 다른 인스턴스를 실행할 수 있습니다. 그러나, 다른 설정과 구성이 적용된 하위 컴파일러로서 상위(또는 최상위 컴파일러)에서 모든 훅과 플러그인을 복사하고 하위 <code>Compiler</code> 인스턴스를 만듭니다. 생성된 <code>Compiler</code>를 반환합니다.</p> <p>파라미터:</p> <ul> <li><code>name</code> - 하위 <code>Compiler</code>의 이름.</li> <li><code>outputOptions</code> - 출력 옵션 객체.</li> <li><code>plugins</code> - 적용될 webpack 플러그인.</li> </ul> <h3 id="checkconstraints">checkConstraints<a href="#checkconstraints" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function</code></p> <h3 id="emitasset">emitAsset<a href="#emitasset" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (file, source, assetInfo = {})</code></p> <aside class="warning"><h6 class="warning__prefix">warning</h6><p>webpack 4.40.0부터 사용 가능</p></aside> <p>파라미터:</p> <ul> <li><code>file</code> - 애셋의 파일 이름</li> <li><code>source</code> - 애셋의 소스</li> <li><code>assetInfo</code> - 추가 애셋 정보</li> </ul> <h3 id="updateasset">updateAsset<a href="#updateasset" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (file, newSourceOrFunction, assetInfoUpdateOrFunction)</code></p> <aside class="warning"><h6 class="warning__prefix">warning</h6><p>webpack 4.40.0부터 사용 가능</p></aside> <p>파라미터:</p> <ul> <li><code>file</code> - 애셋의 파일 이름</li> <li><code>newSourceOrFunction</code> - 새 애셋 소스 또는 이전의 것을 새것으로 변환하는 함수</li> <li><code>assetInfoUpdateOrFunction</code> - 새 애셋 정보 또는 이전의 것을 새것으로 변환하는 함수</li> </ul> <h3 id="deleteasset">deleteAsset<a href="#deleteasset" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (file)</code></p> <p>파라미터:</p> <ul> <li><code>file</code> - 애셋의 파일 이름</li> </ul> <h3 id="getassets">getAssets<a href="#getassets" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function</code></p> <aside class="warning"><h6 class="warning__prefix">warning</h6><p>webpack 4.40.0부터 사용 가능</p></aside> <p>현재 컴파일에서 모든 애셋의 배열을 반환합니다.</p> <h3 id="getasset">getAsset<a href="#getasset" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (name)</code></p> <aside class="warning"><h6 class="warning__prefix">warning</h6><p>webpack 4.40.0부터 사용 가능</p></aside> <p>파라미터:</p> <ul> <li><code>name</code> - 반환할 애셋의 이름</li> </ul> '}}]);