(self.webpackChunk=self.webpackChunk||[]).push([[692],{692:function(n,s,a){"use strict";a.r(s),s.default='<p><a href="https://npmjs.com/package/worker-loader"><img src="https://img.shields.io/npm/v/worker-loader.svg" alt="npm"></a> <a href="https://nodejs.org"><img src="https://img.shields.io/node/v/worker-loader.svg" alt="node"></a> <a href="https://david-dm.org/webpack-contrib/worker-loader"><img src="https://david-dm.org/webpack-contrib/worker-loader.svg" alt="deps"></a> <a href="https://github.com/webpack-contrib/worker-loader/actions"><img src="https://github.com/webpack-contrib/worker-loader/workflows/worker-loader/badge.svg" alt="tests"></a> <a href="https://codecov.io/gh/webpack-contrib/worker-loader"><img src="https://codecov.io/gh/webpack-contrib/worker-loader/branch/master/graph/badge.svg" alt="coverage"></a> <a href="https://gitter.im/webpack/webpack"><img src="https://badges.gitter.im/webpack/webpack.svg" alt="chat"></a> <a href="https://packagephobia.now.sh/result?p=worker-loader"><img src="https://packagephobia.now.sh/badge?p=worker-loader" alt="size"></a></p> <p>Web Worker loader for webpack 4.</p> <p>Note that this is specific to webpack 4. To use Web Workers in webpack 5, see <a href="https://webpack.js.org/guides/web-workers/">https://webpack.js.org/guides/web-workers/</a>.</p> <h2 id="getting-started">Getting Started<a href="#getting-started" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>To begin, you\'ll need to install <code>worker-loader</code>:</p> <pre><code class="hljs language-console">$ npm install worker-loader --save-dev\n</code></pre> <h3 id="inlined">Inlined<a href="#inlined" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><strong>App.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> Worker <span class="token keyword">from</span> <span class="token string">"worker-loader!./Worker.js"</span><span class="token punctuation">;</span></code></pre> <h3 id="config">Config<a href="#config" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.worker\\.js$/</span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">{</span> loader<span class="token operator">:</span> <span class="token string">"worker-loader"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p><strong>App.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> Worker <span class="token keyword">from</span> <span class="token string">"./file.worker.js"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nworker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nworker<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nworker<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>And run <code>webpack</code> via your preferred method.</p> <h2 id="options">Options<a href="#options" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <table> <thead> <tr> <th align="center">Name</th> <th align="center">Type</th> <th align="center">Default</th> <th align="left">Description</th> </tr> </thead> <tbody> <tr> <td align="center" data-th="Name"><span><strong><a href="#worker"><code>worker</code></a></strong></span></td> <td align="center" data-th="Type"><span><code>{String|Object}</code></span></td> <td align="center" data-th="Default"><span><code>Worker</code></span></td> <td align="left" data-th="Description"><span>Allows to set web worker constructor name and options</span></td> </tr> <tr> <td align="center" data-th="Name"><span><strong><a href="#publicpath"><code>publicPath</code></a></strong></span></td> <td align="center" data-th="Type"><span><code>{String|Function}</code></span></td> <td align="center" data-th="Default"><span>based on <code>output.publicPath</code></span></td> <td align="left" data-th="Description"><span>specifies the public URL address of the output files when referenced in a browser</span></td> </tr> <tr> <td align="center" data-th="Name"><span><strong><a href="#filename"><code>filename</code></a></strong></span></td> <td align="center" data-th="Type"><span><code>{String|Function}</code></span></td> <td align="center" data-th="Default"><span>based on <code>output.filename</code></span></td> <td align="left" data-th="Description"><span>The filename of entry chunks for web workers</span></td> </tr> <tr> <td align="center" data-th="Name"><span><strong><a href="#chunkfilename"><code>chunkFilename</code></a></strong></span></td> <td align="center" data-th="Type"><span><code>{String}</code></span></td> <td align="center" data-th="Default"><span>based on <code>output.chunkFilename</code></span></td> <td align="left" data-th="Description"><span>The filename of non-entry chunks for web workers</span></td> </tr> <tr> <td align="center" data-th="Name"><span><strong><a href="#inline"><code>inline</code></a></strong></span></td> <td align="center" data-th="Type"><span><code>\'no-fallback\'|\'fallback\'</code></span></td> <td align="center" data-th="Default"><span><code>undefined</code></span></td> <td align="left" data-th="Description"><span>Allow to inline the worker as a <code>BLOB</code></span></td> </tr> <tr> <td align="center" data-th="Name"><span><strong><a href="#esmodule"><code>esModule</code></a></strong></span></td> <td align="center" data-th="Type"><span><code>{Boolean}</code></span></td> <td align="center" data-th="Default"><span><code>true</code></span></td> <td align="left" data-th="Description"><span>Use ES modules syntax</span></td> </tr> </tbody> </table> <h3 id="worker"><code>worker</code><a href="#worker" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Type: <code>String|Object</code> Default: <code>Worker</code></p> <p>Set the worker type.</p> <h4 id="string"><code>String</code><a href="#string" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>Allows to set web worker constructor name.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.worker\\.(c|m)?js$/i</span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"worker-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          worker<span class="token operator">:</span> <span class="token string">"SharedWorker"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h4 id="object"><code>Object</code><a href="#object" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>Allow to set web worker constructor name and options.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.worker\\.(c|m)?js$/i</span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"worker-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          worker<span class="token operator">:</span> <span class="token punctuation">{</span>\n            type<span class="token operator">:</span> <span class="token string">"SharedWorker"</span><span class="token punctuation">,</span>\n            options<span class="token operator">:</span> <span class="token punctuation">{</span>\n              type<span class="token operator">:</span> <span class="token string">"classic"</span><span class="token punctuation">,</span>\n              credentials<span class="token operator">:</span> <span class="token string">"omit"</span><span class="token punctuation">,</span>\n              name<span class="token operator">:</span> <span class="token string">"my-custom-worker-name"</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="publicpath"><code>publicPath</code><a href="#publicpath" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Type: <code>String|Function</code> Default: based on <code>output.publicPath</code></p> <p>The <code>publicPath</code> specifies the public URL address of the output files when referenced in a browser. If not specified, the same public path used for other webpack assets is used.</p> <h4 id="string-1"><code>String</code><a href="#string-1" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.worker\\.(c|m)?js$/i</span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"worker-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          publicPath<span class="token operator">:</span> <span class="token string">"/scripts/workers/"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h4 id="function"><code>Function</code><a href="#function" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.worker\\.(c|m)?js$/i</span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"worker-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token function-variable function">publicPath</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">pathData<span class="token punctuation">,</span> assetInfo</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/scripts/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>pathData<span class="token punctuation">.</span>hash<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/workers/</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="filename"><code>filename</code><a href="#filename" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Type: <code>String|Function</code> Default: based on <code>output.filename</code>, adding <code>worker</code> suffix, for example - <code>output.filename: \'[name].js\'</code> value of this option will be <code>[name].worker.js</code></p> <p>The filename of entry chunks for web workers.</p> <h4 id="string-2"><code>String</code><a href="#string-2" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.worker\\.(c|m)?js$/i</span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"worker-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          filename<span class="token operator">:</span> <span class="token string">"[name].[contenthash].worker.js"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h4 id="function-1"><code>Function</code><a href="#function-1" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.worker\\.(c|m)?js$/i</span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"worker-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token function-variable function">filename</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">pathData</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>\n              <span class="token regex">/\\.worker\\.(c|m)?js$/i</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>pathData<span class="token punctuation">.</span>chunk<span class="token punctuation">.</span>entryModule<span class="token punctuation">.</span>resource<span class="token punctuation">)</span>\n            <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token keyword">return</span> <span class="token string">"[name].custom.worker.js"</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            <span class="token keyword">return</span> <span class="token string">"[name].js"</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="chunkfilename"><code>chunkFilename</code><a href="#chunkfilename" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Type: <code>String</code> Default: based on <code>output.chunkFilename</code>, adding <code>worker</code> suffix, for example - <code>output.chunkFilename: \'[id].js\'</code> value of this option will be <code>[id].worker.js</code></p> <p>The filename of non-entry chunks for web workers.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.worker\\.(c|m)?js$/i</span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"worker-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          chunkFilename<span class="token operator">:</span> <span class="token string">"[id].[contenthash].worker.js"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="inline"><code>inline</code><a href="#inline" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Type: <code>\'fallback\' | \'no-fallback\'</code> Default: <code>undefined</code></p> <p>Allow to inline the worker as a <code>BLOB</code>.</p> <p>Inline mode with the <code>fallback</code> value will create file for browsers without support web workers, to disable this behavior just use <code>no-fallback</code> value.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.worker\\.(c|m)?js$/i</span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"worker-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          inline<span class="token operator">:</span> <span class="token string">"fallback"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="esmodule"><code>esModule</code><a href="#esmodule" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Type: <code>Boolean</code> Default: <code>true</code></p> <p>By default, <code>worker-loader</code> generates JS modules that use the ES modules syntax.</p> <p>You can enable a CommonJS modules syntax using:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.worker\\.(c|m)?js$/i</span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"worker-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          esModule<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="examples">Examples<a href="#examples" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <h3 id="basic">Basic<a href="#basic" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>The worker file can import dependencies just like any other file:</p> <p><strong>index.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> Worker <span class="token keyword">from</span> <span class="token string">"./my.worker.js"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> result<span class="token punctuation">;</span>\n\nworker<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    result <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    result<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"result"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  result<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nbutton<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  worker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> postMessage<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p><strong>my.worker.js</strong></p> <pre><code class="hljs language-js"><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> workerResult <span class="token operator">=</span> event<span class="token punctuation">.</span>data<span class="token punctuation">;</span>\n\n  workerResult<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\n  <span class="token function">postMessage</span><span class="token punctuation">(</span>workerResult<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.worker\\.(c|m)?js$/i</span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"worker-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          esModule<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="integrating-with-es6-features">Integrating with ES6+ features<a href="#integrating-with-es6-features" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>You can even use ES6+ features if you have the <a href="https://github.com/babel/babel-loader"><code>babel-loader</code></a> configured.</p> <p><strong>index.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> Worker <span class="token keyword">from</span> <span class="token string">"./my.worker.js"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> result<span class="token punctuation">;</span>\n\nworker<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    result <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    result<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"result"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  result<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nbutton<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  worker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> postMessage<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p><strong>my.worker.js</strong></p> <pre><code class="hljs language-js"><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> workerResult <span class="token operator">=</span> event<span class="token punctuation">.</span>data<span class="token punctuation">;</span>\n\n  workerResult<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\n  <span class="token function">postMessage</span><span class="token punctuation">(</span>workerResult<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.worker\\.(c|m)?js$/i</span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">"worker-loader"</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">"babel-loader"</span><span class="token punctuation">,</span>\n            options<span class="token operator">:</span> <span class="token punctuation">{</span>\n              presets<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"@babel/preset-env"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="integrating-with-typescript">Integrating with TypeScript<a href="#integrating-with-typescript" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>To integrate with TypeScript, you will need to define a custom module for the exports of your worker.</p> <h4 id="loading-with-worker-loader">Loading with <code>worker-loader!</code><a href="#loading-with-worker-loader" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p><strong>typings/worker-loader.d.ts</strong></p> <pre><code class="hljs language-typescript"><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">"worker-loader!*"</span> <span class="token punctuation">{</span>\n  <span class="token comment">// You need to change `Worker`, if you specified a different value for the `workerType` option</span>\n  <span class="token keyword">class</span> <span class="token class-name">WebpackWorker</span> <span class="token keyword">extends</span> <span class="token class-name">Worker</span> <span class="token punctuation">{</span>\n    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// Uncomment this if you set the `esModule` option to `false`</span>\n  <span class="token comment">// export = WebpackWorker;</span>\n  <span class="token keyword">export</span> <span class="token keyword">default</span> WebpackWorker<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <p><strong>my.worker.ts</strong></p> <pre><code class="hljs language-typescript"><span class="token keyword">const</span> ctx<span class="token operator">:</span> Worker <span class="token operator">=</span> self <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Post data to parent thread</span>\nctx<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token string">"foo"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Respond to message from parent thread</span>\nctx<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p><strong>index.ts</strong></p> <pre><code class="hljs language-typescript"><span class="token keyword">import</span> Worker <span class="token keyword">from</span> <span class="token string">"worker-loader!./Worker"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nworker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nworker<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nworker<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h4 id="loading-without-worker-loader">Loading without <code>worker-loader!</code><a href="#loading-without-worker-loader" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>Alternatively, you can ommit the <code>worker-loader!</code> prefix passed to <code>import</code> statement by using the following notation. This is useful for executing the code using a non-WebPack runtime environment (such as Jest with <a href="https://github.com/astagi/workerloader-jest-transformer"><code>workerloader-jest-transformer</code></a>).</p> <p><strong>typings/worker-loader.d.ts</strong></p> <pre><code class="hljs language-typescript"><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">"*.worker.ts"</span> <span class="token punctuation">{</span>\n  <span class="token comment">// You need to change `Worker`, if you specified a different value for the `workerType` option</span>\n  <span class="token keyword">class</span> <span class="token class-name">WebpackWorker</span> <span class="token keyword">extends</span> <span class="token class-name">Worker</span> <span class="token punctuation">{</span>\n    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// Uncomment this if you set the `esModule` option to `false`</span>\n  <span class="token comment">// export = WebpackWorker;</span>\n  <span class="token keyword">export</span> <span class="token keyword">default</span> WebpackWorker<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <p><strong>my.worker.ts</strong></p> <pre><code class="hljs language-typescript"><span class="token keyword">const</span> ctx<span class="token operator">:</span> Worker <span class="token operator">=</span> self <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Post data to parent thread</span>\nctx<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token string">"foo"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Respond to message from parent thread</span>\nctx<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p><strong>index.ts</strong></p> <pre><code class="hljs language-typescript"><span class="token keyword">import</span> MyWorker <span class="token keyword">from</span> <span class="token string">"./my.worker.ts"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nworker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nworker<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nworker<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token comment">// Place this *before* the `ts-loader`.</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.worker\\.ts$/</span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"worker-loader"</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.ts$/</span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"ts-loader"</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>\n    extensions<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">".ts"</span><span class="token punctuation">,</span> <span class="token string">".js"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="cross-origin-policy">Cross-Origin Policy<a href="#cross-origin-policy" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API"><code>WebWorkers</code></a> are restricted by a <a href="https://en.wikipedia.org/wiki/Same-origin_policy">same-origin policy</a>, so if your <code>webpack</code> assets are not being served from the same origin as your application, their download may be blocked by your browser. This scenario can commonly occur if you are hosting your assets under a CDN domain. Even downloads from the <code>webpack-dev-server</code> could be blocked.</p> <p>There are two workarounds:</p> <p>Firstly, you can inline the worker as a blob instead of downloading it as an external script via the <a href="#inline"><code>inline</code></a> parameter</p> <p><strong>App.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> Worker <span class="token keyword">from</span> <span class="token string">"./file.worker.js"</span><span class="token punctuation">;</span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        loader<span class="token operator">:</span> <span class="token string">"worker-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span> inline<span class="token operator">:</span> <span class="token string">"fallback"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>Secondly, you may override the base download URL for your worker script via the <a href="#publicpath"><code>publicPath</code></a> option</p> <p><strong>App.js</strong></p> <pre><code class="hljs language-js"><span class="token comment">// This will cause the worker to be downloaded from `/workers/file.worker.js`</span>\n<span class="token keyword">import</span> Worker <span class="token keyword">from</span> <span class="token string">"./file.worker.js"</span><span class="token punctuation">;</span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        loader<span class="token operator">:</span> <span class="token string">"worker-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span> publicPath<span class="token operator">:</span> <span class="token string">"/workers/"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="contributing">Contributing<a href="#contributing" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>Please take a moment to read our contributing guidelines if you haven\'t yet done so.</p> <p><a href="https://github.com/webpack-contrib/worker-loader/blob/master/.github/CONTRIBUTING.md">CONTRIBUTING</a></p> <h2 id="license">License<a href="#license" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><a href="https://github.com/webpack-contrib/worker-loader/blob/master/LICENSE">MIT</a></p> '}}]);