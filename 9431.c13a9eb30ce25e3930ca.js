(self.webpackChunk=self.webpackChunk||[]).push([[9431],{9431:function(n,s,a){"use strict";a.r(s),s.default='<p><code>publicPath</code> 설정은 다양한 경우에서 유용하게 사용될 수 있습니다. 애플리케이션의 모든 애셋에 대한 기본 경로를 지정할 수 있습니다.</p> <h2 id="use-cases">Use Cases<a href="#use-cases" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>이 기능이 특히 유용한 실제 애플리케이션에서의 몇 가지 사용 사례가 있습니다. 기본적으로 <code>output.path</code> 디렉터리로 내보내는 모든 파일은 <code>output.publicPath</code>에서 참조됩니다. 여기에는 하위 청크 (<a href="/guides/code-splitting/">코드 스플리팅</a>을 통해 생성됨) 및 디펜던시 그래프의 일부 애셋(예: 이미지, 글꼴 등)이 포함됩니다.</p> <h3 id="environment-based">Environment Based<a href="#environment-based" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>예를 들어 개발 과정에서 index 페이지와 동일한 수준에 있는 <code>assets/</code> 폴더가 있을 수 있습니다. 프로덕션 환경에서 정적 애셋을 CDN에 호스팅하려면 어떻게 해야할까요?</p> <p>이 문제를 해결하기 위해 오랫동안 사용 중인 환경 변수를 사용해봅시다. <code>ASSET_PATH</code> 변수가 있다고 가정해 보겠습니다.</p> <pre><code class="hljs language-js"><span class="token keyword">import</span> webpack <span class="token keyword">from</span> <span class="token string">\'webpack\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 환경 변수를 사용하고 존재하지 않는다면 루트를 사용하세요.</span>\n<span class="token keyword">const</span> <span class="token constant">ASSET_PATH</span> <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">ASSET_PATH</span> <span class="token operator">||</span> <span class="token string">\'/\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    publicPath<span class="token operator">:</span> <span class="token constant">ASSET_PATH</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// 코드에서 환경 변수를 안전하게 사용할 수 있습니다.</span>\n    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token string">\'process.env.ASSET_PATH\'</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token constant">ASSET_PATH</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="on-the-fly">On The Fly<a href="#on-the-fly" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>또 다른 사용 사례는 <code>publicPath</code>를 직접 설정하는 것입니다. webpack은 이를 가능하게 하는 <code>__webpack_public_path라는__</code> 전역 변수를 노출합니다. 따라서 애플리케이션의 엔트리 포인트에서 간단하게 처리할 수 있습니다.</p> <pre><code class="hljs language-js">__webpack_public_path__ <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">ASSET_PATH</span><span class="token punctuation">;</span></code></pre> <p>이게 전부입니다. 이미 설정에서 <code>DefinePlugin</code>을 사용하고 있음으로 <code>process.env.ASSET_PATH</code>는 항상 정의되어 안전하게 사용할 수 있습니다.</p> <aside class="warning"><h6 class="warning__prefix">warning</h6><p>엔트리 파일에서 ES6 모듈 가져오기를 사용하는 경우 가져오기 후에 <code>__webpack_public_path__</code> 할당이 수행됩니다. 이러한 경우 공용 경로 할당을 전용 모듈로 이동 한 다음 entry.js 위에서 가져와야 합니다.</p></aside> <pre><code class="hljs language-js"><span class="token comment">// entry.js</span>\n<span class="token keyword">import</span> <span class="token string">\'./public-path\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'./app\'</span><span class="token punctuation">;</span></code></pre> <aside class="tip"><h6 class="tip__prefix">tip</h6><p><code>web</code> 또는 <code>web-worker</code>를 대상으로 사용하는 경우, <code>publicPath</code>는 <code>\'auto\'</code>로 기본 설정되어 <code>import.meta.url</code>, <code>document.currentScript</code>, <code>&#x3C;script /></code>, <code>self.location</code> 중 하나를 공개 경로로 자동으로 결정합니다.</p></aside> '}}]);