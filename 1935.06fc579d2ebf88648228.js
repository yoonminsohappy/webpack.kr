(self.webpackChunk=self.webpackChunk||[]).push([[1935],{1935:function(n,a,s){"use strict";s.r(a),a.default='<p>webpack 설정이 정확히 동일한 경우는 거의 없습니다. 이것은 <strong>webpack의 설정 파일이 webpack <a href="/configuration/">설정</a>을 내보내는 JavaScript 파일이기 때문입니다.</strong> 설정은 정의된 속성에 따라 webpack에서 처리됩니다.</p> <p>webpack은 표준 Node.js CommonJS 모듈이므로, <strong>다음과 같은 작업을 할 수 있습니다.</strong></p> <ul> <li><code>require(...)</code>를 통해 다른 파일 가져오기</li> <li><code>require(...)</code>를 통해 npm 유틸리티 사용하기</li> <li><code>?:</code> 연산자 같은 JavaScript 제어 흐름 표현식 사용하기</li> <li>자주 사용되는 값에 상수 또는 변수 사용하기</li> <li>설정 일부를 만들어 내는 함수 작성 및 실행하기</li> </ul> <p>상황에 따라 적절한 기능을 사용하세요.</p> <p>기술적으로는 가능하지만, <strong>아래 방법의 사용은 피해야 합니다.</strong></p> <ul> <li>webpack CLI를 사용할 때 자체 CLI를 작성하거나 <a href="/configuration/configuration-types/"><code>--env</code></a>를 사용하는 대신, CLI 인자에 접근하기</li> <li>결정되지 않은 값을 내보내기 (webpack을 두 번 호출하면 동일한 출력 파일이 생성됩니다)</li> <li>긴 설정 작성하기 (대신 설정을 여러 파일로 분할)</li> </ul> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>이 문서에서 가장 중요한 부분은 webpack 설정을 형식화하고 스타일을 지정하는 다양한 방법이 있다는 것입니다. 핵심은 이해하고 유지보수할 수 있는 방식을 선택하여 일관된 형식을 유지하는 것입니다.</p></aside> <p>아래의 예제는 webpack 설정이 <strong>코드이기</strong> 때문에 표현적이면서 설정 가능하다는 것을 설명합니다.</p> <h2 id="introductory-configuration">Introductory Configuration<a href="#introductory-configuration" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  mode<span class="token operator">:</span> <span class="token string">\'development\'</span><span class="token punctuation">,</span>\n  entry<span class="token operator">:</span> <span class="token string">\'./foo.js\'</span><span class="token punctuation">,</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    filename<span class="token operator">:</span> <span class="token string">\'foo.bundle.js\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>지원하는 모든 설정 옵션에 대해서는 <a href="/configuration/">설정 섹션</a>을 <em>봐주세요.</em></p> <h2 id="multiple-targets">Multiple Targets<a href="#multiple-targets" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>단일 설정을 객체, <a href="/configuration/configuration-types/#exporting-a-function">함수</a> 또는 <a href="/configuration/configuration-types/#exporting-a-promise">promise</a>로 export 하는 것과 함께, 다중 설정을 export 할 수 있습니다.</p> <p><a href="/configuration/configuration-types/#exporting-multiple-configurations">다중 설정 내보내기</a>를 <em>봐주세요.</em></p> <h2 id="using-other-configuration-languages">Using other Configuration Languages<a href="#using-other-configuration-languages" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>webpack은 다양한 프로그래밍 및 데이터 언어로 작성된 설정 파일을 허용합니다.</p> <p><a href="/configuration/configuration-languages/">설정 언어</a>를 <em>봐주세요.</em></p> '}}]);