"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1879],{1879:function(n,s,a){a.r(s),s.default='<p>처음부터 가이드를 따라왔다면 이제 "Hello webpack"을 표시하는 작은 프로젝트가 생성되었을 것입니다. 이제 이미지와 같은 다른 애셋을 통합하고, 애셋이 어떻게 처리되는지 살펴보겠습니다.</p> <p>webpack 이전에 프런트엔드 개발자는 <a href="https://gruntjs.com/">grunt</a>와 <a href="https://gulpjs.com/">gulp</a> 같은 도구를 사용하여 애셋을 처리하고 <code>/src</code> 폴더에서 <code>/dist</code> 또는 <code>/build</code> 디렉터리로 옮겼습니다. JavaScript 모듈에도 동일한 아이디어가 사용되었지만, webpack과 같은 도구는 모든 의존성을 <strong>동적으로 번들합니다.</strong> (<a href="/concepts/dependency-graph">디펜던시 그래프</a>로 알려진 것을 생성합니다). 이것이 좋은 이유는 이제 모든 모듈이 <strong>의존성을 명확하게 명시하고</strong> 사용하지 않는 모듈을 번들에서 제외할 수 있기 때문입니다.</p> <p>webpack의 가장 멋진 기능 중 하나는 JavaScript 외에도 로더 또는 내장 <a href="/guides/asset-modules/">애셋 모듈</a>이 지원하는 <strong>다른 유형의 파일도 포함</strong> 할 수 있다는 것입니다. 즉, 위에 나열된 JavaScript의 이점(예: 명시적 의존성)을 웹 사이트 또는 웹 앱을 만드는 데 사용한 모든 것에 적용할 수 있습니다. 이미 설정에 익숙 할 수 있는 CSS부터 시작해 보겠습니다.</p> <h2 id="setup">Setup<a href="#setup" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>시작하기 전에 프로젝트를 조금 변경해 보겠습니다.</p> <p><strong>dist/index.html</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">&#x3C;!DOCTYPE html>\n</span><span class="token prefix unchanged"> </span><span class="token line">&#x3C;html>\n</span><span class="token prefix unchanged"> </span><span class="token line">  &#x3C;head>\n</span><span class="token prefix unchanged"> </span><span class="token line">    &#x3C;meta charset="utf-8" />\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">    &#x3C;title>Getting Started&#x3C;/title>\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    &#x3C;title>Asset Management&#x3C;/title>\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  &#x3C;/head>\n</span><span class="token prefix unchanged"> </span><span class="token line">  &#x3C;body>\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">    &#x3C;script src="main.js">&#x3C;/script>\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    &#x3C;script src="bundle.js">&#x3C;/script>\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  &#x3C;/body>\n</span><span class="token prefix unchanged"> </span><span class="token line">&#x3C;/html></span></span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const path = require(\'path\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">  entry: \'./src/index.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">  output: {\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">    filename: \'main.js\',\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    filename: \'bundle.js\',\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">    path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">};</span></span></code></pre> <h2 id="loading-css">Loading CSS<a href="#loading-css" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>JavaScript 모듈 내에서 CSS 파일을 <code>import</code> 하려면 <a href="/loaders/style-loader">style-loader</a>와 <a href="/loaders/css-loader">css-loader</a>를 설치하고 <a href="/configuration/module"><code>module</code> 설정</a>에 추가해야 합니다.</p> <pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev style-loader css-loader</code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const path = require(\'path\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">  entry: \'./src/index.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">  output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    filename: \'bundle.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">    path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  module: {\n</span><span class="token prefix inserted">+</span><span class="token line">    rules: [\n</span><span class="token prefix inserted">+</span><span class="token line">      {\n</span><span class="token prefix inserted">+</span><span class="token line">        test: /\\.css$/i,\n</span><span class="token prefix inserted">+</span><span class="token line">        use: [\'style-loader\', \'css-loader\'],\n</span><span class="token prefix inserted">+</span><span class="token line">      },\n</span><span class="token prefix inserted">+</span><span class="token line">    ],\n</span><span class="token prefix inserted">+</span><span class="token line">  },\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">};</span></span></code></pre> <p>모듈 로더는 체인으로 연결할 수 있습니다. 체인의 각 로더는 리소스에 변형을 적용합니다. 체인은 역순으로 실행됩니다. 첫 번째 로더는 결과(변형이 적용된 리소스)를 다음 로더로 전달합니다. 마지막으로 webpack은 체인의 마지막 로더가 JavaScript를 반환할 것으로 예상합니다.</p> <p>위의 로더 순서는 유지되어야 합니다. <a href="/loaders/style-loader"><code>\'style-loader\'</code></a>가 먼저 오고 그 뒤에 <a href="/loaders/css-loader"><code>\'css-loader\'</code></a>가 따라오게 됩니다. 이 컨벤션을 따르지 않으면 webpack에서 오류가 발생할 수 있습니다.</p> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>webpack은 정규 표현식을 사용하여 어떤 파일을 찾아 특정 로더에 전달해야 하는지 알아냅니다. 이 경우 <code>.css</code>로 끝나는 모든 파일은 <code>style-loader</code>와 <code>css-loader</code>에 전달됩니다.</p></aside> <p>이렇게 하면 스타일이 필요한 파일에 <code>import \'./style.css\'</code>하여 가져올 수 있습니다. 이제 모듈이 실행될 때 html 파일의 <code>&#x3C;head></code>에 문자열화 된 CSS가 <code>&#x3C;style></code>태그로 삽입됩니다.</p> <p>이제 새로운 <code>style.css</code> 파일을 프로젝트에 추가하고 <code>index.js</code>로 가져와 볼까요?</p> <p><strong>project</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> webpack-demo\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- package.json\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- webpack.config.js\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /dist\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- bundle.js\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- index.html\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /src\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   |- style.css\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   |- index.js\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /node_modules</span></span></code></pre> <p><strong>src/style.css</strong></p> <pre><code class="hljs language-css"><span class="token selector">.hello</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <p><strong>src/index.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">import _ from \'lodash\';\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">import \'./style.css\';\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">function component() {\n</span><span class="token prefix unchanged"> </span><span class="token line">  const element = document.createElement(\'div\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  // Lodash, now imported by this script\n</span><span class="token prefix unchanged"> </span><span class="token line">  element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  element.classList.add(\'hello\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  return element;\n</span><span class="token prefix unchanged"> </span><span class="token line">}\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">document.body.appendChild(component());</span></span></code></pre> <p>이제 빌드 커맨드를 실행합니다.</p> <pre><code class="hljs language-bash">$ <span class="token function">npm</span> run build\n\n<span class="token punctuation">..</span>.\n<span class="token punctuation">[</span>webpack-cli<span class="token punctuation">]</span> Compilation finished\nasset bundle.js <span class="token number">72.6</span> KiB <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span> <span class="token punctuation">[</span>minimized<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: main<span class="token punctuation">)</span> <span class="token number">1</span> related asset\nruntime modules <span class="token number">1000</span> bytes <span class="token number">5</span> modules\norphan modules <span class="token number">326</span> bytes <span class="token punctuation">[</span>orphan<span class="token punctuation">]</span> <span class="token number">1</span> module\ncacheable modules <span class="token number">539</span> KiB\n  modules by path ./node_modules/ <span class="token number">538</span> KiB\n    ./node_modules/lodash/lodash.js <span class="token number">530</span> KiB <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n    ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js <span class="token number">6.67</span> KiB <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n    ./node_modules/css-loader/dist/runtime/api.js <span class="token number">1.57</span> KiB <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n  modules by path ./src/ <span class="token number">965</span> bytes\n    ./src/index.js + <span class="token number">1</span> modules <span class="token number">639</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n    ./node_modules/css-loader/dist/cjs.js<span class="token operator">!</span>./src/style.css <span class="token number">326</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\nwebpack <span class="token number">5.4</span>.0 compiled successfully <span class="token keyword">in</span> <span class="token number">2231</span> ms</code></pre> <p>브라우저에서 <code>dist/index.html</code>을 다시 열면 이제 <code>Hello webpack</code>이 빨간색으로 표시됩니다. webpack이 무엇을 했는지 확인하려면 페이지를 검사하여 head 태그를 살펴보세요. (<code>&#x3C;style></code>태그는 JavaScript를 통해 동적으로 생성되며 결과를 표시하지 않으므로 페이지 소스를 확인하지 마세요) head 태그에 <code>index.js</code>에서 가져온 스타일 블록이 포함되어 있을 것입니다.</p> <p>대부분의 경우 필수겠지만, 이제 프로덕션에서 로드 시간을 단축하기 위해 <a href="/plugins/mini-css-extract-plugin/#minimizing-for-production">css를 압축</a> 할 수 있습니다. 또한 생각할 수 있는 거의 모든 종류의 CSS 로더가 존재합니다. 몇 가지 예를 들면 <a href="/loaders/postcss-loader">postcss</a>, <a href="/loaders/sass-loader">sass</a> 및 <a href="/loaders/less-loader">less</a> 등이 있습니다.</p> <h2 id="loading-images">Loading Images<a href="#loading-images" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>이제 CSS는 가져왔는데, 배경이나 아이콘과 같은 이미지는 어떻게 할까요? 이미지도 webpack 5부터 내장된 <a href="/guides/asset-modules/">Asset Modules</a>를 사용하여 시스템에 쉽게 통합할 수 있습니다.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const path = require(\'path\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">  entry: \'./src/index.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">  output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    filename: \'bundle.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">    path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  module: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    rules: [\n</span><span class="token prefix unchanged"> </span><span class="token line">      {\n</span><span class="token prefix unchanged"> </span><span class="token line">        test: /\\.css$/i,\n</span><span class="token prefix unchanged"> </span><span class="token line">        use: [\'style-loader\', \'css-loader\'],\n</span><span class="token prefix unchanged"> </span><span class="token line">      },\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">      {\n</span><span class="token prefix inserted">+</span><span class="token line">        test: /\\.(png|svg|jpg|jpeg|gif)$/i,\n</span><span class="token prefix inserted">+</span><span class="token line">        type: \'asset/resource\',\n</span><span class="token prefix inserted">+</span><span class="token line">      },\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">    ],\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">};</span></span></code></pre> <p>이제 <code>import myImage from \'./my-image.png\'</code>를 사용하면 해당 이미지가 처리되어 <code>output</code> 디렉터리에 추가됩니다. <em>그리고</em> <code>MyImage</code> 변수는 이미지의 최종 URL을 포함합니다. 위와 같이 <a href="/loaders/css-loader">css-loader</a>를 사용하면 CSS 내의 <code>url(\'./my-image.png\')</code>에도 유사한 프로세스가 적용됩니다. 로더는 이것이 로컬 파일임을 인식하고<code> \'./my-image.png\'</code> 경로를 <code>output</code> 디렉터리에 있는 이미지의 최종 경로로 변경합니다. <a href="/loaders/html-loader">html-loader</a>는 <code>&#x3C;img src="./my-image.png" /></code>를 동일한 방식으로 처리합니다.</p> <p>이제 프로젝트에 이미지를 추가하고 어떻게 작동하는지 살펴볼까요? 원하는 이미지를 아무거나 사용해도 좋습니다.</p> <p><strong>project</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> webpack-demo\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- package.json\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- webpack.config.js\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /dist\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- bundle.js\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- index.html\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /src\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   |- icon.png\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   |- style.css\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- index.js\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /node_modules</span></span></code></pre> <p><strong>src/index.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">import _ from \'lodash\';\n</span><span class="token prefix unchanged"> </span><span class="token line">import \'./style.css\';\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">import Icon from \'./icon.png\';\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">function component() {\n</span><span class="token prefix unchanged"> </span><span class="token line">  const element = document.createElement(\'div\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  // Lodash, now imported by this script\n</span><span class="token prefix unchanged"> </span><span class="token line">  element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n</span><span class="token prefix unchanged"> </span><span class="token line">  element.classList.add(\'hello\');\n</span></span>\n<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  // 원래 있던 div 에 이미지를 추가합니다.\n</span><span class="token prefix inserted">+</span><span class="token line">  const myIcon = new Image();\n</span><span class="token prefix inserted">+</span><span class="token line">  myIcon.src = Icon;\n</span><span class="token prefix inserted">+</span><span class="token line">\n</span><span class="token prefix inserted">+</span><span class="token line">  element.appendChild(myIcon);\n</span><span class="token prefix inserted">+</span><span class="token line">\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  return element;\n</span><span class="token prefix unchanged"> </span><span class="token line">}\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">document.body.appendChild(component());</span></span></code></pre> <p><strong>src/style.css</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">.hello {\n</span><span class="token prefix unchanged"> </span><span class="token line">  color: red;\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  background: url(\'./icon.png\');\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">}</span></span></code></pre> <p>새 빌드를 만들고 <code>index.html</code> 파일을 다시 엽니다.</p> <pre><code class="hljs language-bash">$ <span class="token function">npm</span> run build\n\n<span class="token punctuation">..</span>.\n<span class="token punctuation">[</span>webpack-cli<span class="token punctuation">]</span> Compilation finished\nassets by status <span class="token number">9.88</span> KiB <span class="token punctuation">[</span>cached<span class="token punctuation">]</span> <span class="token number">1</span> asset\nasset bundle.js <span class="token number">73.4</span> KiB <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span> <span class="token punctuation">[</span>minimized<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: main<span class="token punctuation">)</span> <span class="token number">1</span> related asset\nruntime modules <span class="token number">1.82</span> KiB <span class="token number">6</span> modules\norphan modules <span class="token number">326</span> bytes <span class="token punctuation">[</span>orphan<span class="token punctuation">]</span> <span class="token number">1</span> module\ncacheable modules <span class="token number">540</span> KiB <span class="token punctuation">(</span>javascript<span class="token punctuation">)</span> <span class="token number">9.88</span> KiB <span class="token punctuation">(</span>asset<span class="token punctuation">)</span>\n  modules by path ./node_modules/ <span class="token number">539</span> KiB\n    modules by path ./node_modules/css-loader/dist/runtime/*.js <span class="token number">2.38</span> KiB\n      ./node_modules/css-loader/dist/runtime/api.js <span class="token number">1.57</span> KiB <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n      ./node_modules/css-loader/dist/runtime/getUrl.js <span class="token number">830</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n    ./node_modules/lodash/lodash.js <span class="token number">530</span> KiB <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n    ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js <span class="token number">6.67</span> KiB <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n  modules by path ./src/ <span class="token number">1.45</span> KiB <span class="token punctuation">(</span>javascript<span class="token punctuation">)</span> <span class="token number">9.88</span> KiB <span class="token punctuation">(</span>asset<span class="token punctuation">)</span>\n    ./src/index.js + <span class="token number">1</span> modules <span class="token number">794</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n    ./src/icon.png <span class="token number">42</span> bytes <span class="token punctuation">(</span>javascript<span class="token punctuation">)</span> <span class="token number">9.88</span> KiB <span class="token punctuation">(</span>asset<span class="token punctuation">)</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n    ./node_modules/css-loader/dist/cjs.js<span class="token operator">!</span>./src/style.css <span class="token number">648</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\nwebpack <span class="token number">5.4</span>.0 compiled successfully <span class="token keyword">in</span> <span class="token number">1972</span> ms</code></pre> <p>모든 것이 순조롭게 진행되었다면 이제 아이콘이 반복해서 배경으로 표시되고, <code>Hello webpack</code> 텍스트 옆에 <code>img</code> 요소가 보이게 됩니다. 이 요소를 살펴보면 실제 파일 이름이 <code>29822eaa871e8eadeaa4.png</code>와 같이 변경된 것을 볼 수 있습니다. 이것은 webpack이 <code>src</code> 폴더에서 파일을 찾아서 처리했음을 의미합니다!</p> <h2 id="loading-fonts">Loading Fonts<a href="#loading-fonts" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>그렇다면 폰트와 같은 다른 애셋은 어떨까요? 애셋 모듈은 로드한 모든 파일을 가져와 빌드 디렉터리로 내보냅니다. 즉, 폰트를 포함한 모든 종류의 파일에 사용할 수 있습니다. 폰트 파일을 처리하도록 <code>webpack.config.js</code>를 업데이트해 보겠습니다.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const path = require(\'path\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">  entry: \'./src/index.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">  output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    filename: \'bundle.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">    path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  module: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    rules: [\n</span><span class="token prefix unchanged"> </span><span class="token line">      {\n</span><span class="token prefix unchanged"> </span><span class="token line">        test: /\\.css$/i,\n</span><span class="token prefix unchanged"> </span><span class="token line">        use: [\'style-loader\', \'css-loader\'],\n</span><span class="token prefix unchanged"> </span><span class="token line">      },\n</span><span class="token prefix unchanged"> </span><span class="token line">      {\n</span><span class="token prefix unchanged"> </span><span class="token line">        test: /\\.(png|svg|jpg|jpeg|gif)$/i,\n</span><span class="token prefix unchanged"> </span><span class="token line">        type: \'asset/resource\',\n</span><span class="token prefix unchanged"> </span><span class="token line">      },\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">      {\n</span><span class="token prefix inserted">+</span><span class="token line">        test: /\\.(woff|woff2|eot|ttf|otf)$/i,\n</span><span class="token prefix inserted">+</span><span class="token line">        type: \'asset/resource\',\n</span><span class="token prefix inserted">+</span><span class="token line">      },\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">    ],\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">};</span></span></code></pre> <p>프로젝트에 몇 개의 폰트 파일을 추가합니다.</p> <p><strong>project</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> webpack-demo\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- package.json\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- webpack.config.js\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /dist\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- bundle.js\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- index.html\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /src\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   |- my-font.woff\n</span><span class="token prefix inserted">+</span><span class="token line">   |- my-font.woff2\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   |- icon.png\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- style.css\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- index.js\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /node_modules</span></span></code></pre> <p>로더를 설정하고 폰트가 맞는 위치에 있으면 <code>@font-face</code> 선언을 통해 적용 할 수 있습니다. 로컬 <code>url(...)</code> 지시문은 이미지와 마찬가지로 webpack에서 골라냅니다.</p> <p><strong>src/style.css</strong></p> <pre><code class="hljs language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">@font-face {\n</span><span class="token prefix inserted">+</span><span class="token line">  font-family: \'MyFont\';\n</span><span class="token prefix inserted">+</span><span class="token line">  src: url(\'./my-font.woff2\') format(\'woff2\'),\n</span><span class="token prefix inserted">+</span><span class="token line">    url(\'./my-font.woff\') format(\'woff\');\n</span><span class="token prefix inserted">+</span><span class="token line">  font-weight: 600;\n</span><span class="token prefix inserted">+</span><span class="token line">  font-style: normal;\n</span><span class="token prefix inserted">+</span><span class="token line">}\n</span><span class="token prefix inserted">+</span><span class="token line">\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">.hello {\n</span><span class="token prefix unchanged"> </span><span class="token line">  color: red;\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  font-family: \'MyFont\';\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  background: url(\'./icon.png\');\n</span><span class="token prefix unchanged"> </span><span class="token line">}</span></span></code></pre> <p>이제 새 빌드를 실행하고 webpack이 폰트를 처리했는지 살펴보겠습니다.</p> <pre><code class="hljs language-bash">$ <span class="token function">npm</span> run build\n\n<span class="token punctuation">..</span>.\n<span class="token punctuation">[</span>webpack-cli<span class="token punctuation">]</span> Compilation finished\nassets by status <span class="token number">9.88</span> KiB <span class="token punctuation">[</span>cached<span class="token punctuation">]</span> <span class="token number">1</span> asset\nassets by info <span class="token number">33.2</span> KiB <span class="token punctuation">[</span>immutable<span class="token punctuation">]</span>\n  asset 55055dbfc7c6a83f60ba.woff <span class="token number">18.8</span> KiB <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span> <span class="token punctuation">[</span>immutable<span class="token punctuation">]</span> <span class="token punctuation">[</span>from: src/my-font.woff<span class="token punctuation">]</span> <span class="token punctuation">(</span>auxiliary name: main<span class="token punctuation">)</span>\n  asset 8f717b802eaab4d7fb94.woff2 <span class="token number">14.5</span> KiB <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span> <span class="token punctuation">[</span>immutable<span class="token punctuation">]</span> <span class="token punctuation">[</span>from: src/my-font.woff2<span class="token punctuation">]</span> <span class="token punctuation">(</span>auxiliary name: main<span class="token punctuation">)</span>\nasset bundle.js <span class="token number">73.7</span> KiB <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span> <span class="token punctuation">[</span>minimized<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: main<span class="token punctuation">)</span> <span class="token number">1</span> related asset\nruntime modules <span class="token number">1.82</span> KiB <span class="token number">6</span> modules\norphan modules <span class="token number">326</span> bytes <span class="token punctuation">[</span>orphan<span class="token punctuation">]</span> <span class="token number">1</span> module\ncacheable modules <span class="token number">541</span> KiB <span class="token punctuation">(</span>javascript<span class="token punctuation">)</span> <span class="token number">43.1</span> KiB <span class="token punctuation">(</span>asset<span class="token punctuation">)</span>\n  javascript modules <span class="token number">541</span> KiB\n    modules by path ./node_modules/ <span class="token number">539</span> KiB\n      modules by path ./node_modules/css-loader/dist/runtime/*.js <span class="token number">2.38</span> KiB <span class="token number">2</span> modules\n      ./node_modules/lodash/lodash.js <span class="token number">530</span> KiB <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n      ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js <span class="token number">6.67</span> KiB <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n    modules by path ./src/ <span class="token number">1.98</span> KiB\n      ./src/index.js + <span class="token number">1</span> modules <span class="token number">794</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n      ./node_modules/css-loader/dist/cjs.js<span class="token operator">!</span>./src/style.css <span class="token number">1.21</span> KiB <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n  asset modules <span class="token number">126</span> bytes <span class="token punctuation">(</span>javascript<span class="token punctuation">)</span> <span class="token number">43.1</span> KiB <span class="token punctuation">(</span>asset<span class="token punctuation">)</span>\n    ./src/icon.png <span class="token number">42</span> bytes <span class="token punctuation">(</span>javascript<span class="token punctuation">)</span> <span class="token number">9.88</span> KiB <span class="token punctuation">(</span>asset<span class="token punctuation">)</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n    ./src/my-font.woff2 <span class="token number">42</span> bytes <span class="token punctuation">(</span>javascript<span class="token punctuation">)</span> <span class="token number">14.5</span> KiB <span class="token punctuation">(</span>asset<span class="token punctuation">)</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n    ./src/my-font.woff <span class="token number">42</span> bytes <span class="token punctuation">(</span>javascript<span class="token punctuation">)</span> <span class="token number">18.8</span> KiB <span class="token punctuation">(</span>asset<span class="token punctuation">)</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\nwebpack <span class="token number">5.4</span>.0 compiled successfully <span class="token keyword">in</span> <span class="token number">2142</span> ms</code></pre> <p><code>dist/index.html</code>을 다시 열고 <code>Hello webpack</code> 텍스트가 새 폰트로 변경되었는지 확인합니다. 모든 것이 잘되었다면, 변경된 폰트를 확인할 수 있을 것입니다.</p> <h2 id="loading-data">Loading Data<a href="#loading-data" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>로드할 수 있는 또 다른 유용한 애셋은 JSON 파일, CSV, TSV 및 XML과 같은 데이터입니다. JSON 지원은 기본으로 내장되어 있으며 NodeJS와 유사합니다. 즉, 기본적으로 <code>import Data from \'./data.json\'</code>이 동작합니다. CSV, TSV 및 XML을 가져오려면 <a href="https://github.com/theplatapi/csv-loader">csv-loader</a> 및 <a href="https://github.com/gisikw/xml">xml-loader</a>를 사용할 수 있습니다. 세 가지 모두 로드해 보겠습니다.</p> <pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev csv-loader xml-loader</code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const path = require(\'path\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">  entry: \'./src/index.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">  output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    filename: \'bundle.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">    path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  module: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    rules: [\n</span><span class="token prefix unchanged"> </span><span class="token line">      {\n</span><span class="token prefix unchanged"> </span><span class="token line">        test: /\\.css$/i,\n</span><span class="token prefix unchanged"> </span><span class="token line">        use: [\'style-loader\', \'css-loader\'],\n</span><span class="token prefix unchanged"> </span><span class="token line">      },\n</span><span class="token prefix unchanged"> </span><span class="token line">      {\n</span><span class="token prefix unchanged"> </span><span class="token line">        test: /\\.(png|svg|jpg|jpeg|gif)$/i,\n</span><span class="token prefix unchanged"> </span><span class="token line">        type: \'asset/resource\',\n</span><span class="token prefix unchanged"> </span><span class="token line">      },\n</span><span class="token prefix unchanged"> </span><span class="token line">      {\n</span><span class="token prefix unchanged"> </span><span class="token line">        test: /\\.(woff|woff2|eot|ttf|otf)$/i,\n</span><span class="token prefix unchanged"> </span><span class="token line">        type: \'asset/resource\',\n</span><span class="token prefix unchanged"> </span><span class="token line">      },\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">      {\n</span><span class="token prefix inserted">+</span><span class="token line">        test: /\\.(csv|tsv)$/i,\n</span><span class="token prefix inserted">+</span><span class="token line">        use: [\'csv-loader\'],\n</span><span class="token prefix inserted">+</span><span class="token line">      },\n</span><span class="token prefix inserted">+</span><span class="token line">      {\n</span><span class="token prefix inserted">+</span><span class="token line">        test: /\\.xml$/i,\n</span><span class="token prefix inserted">+</span><span class="token line">        use: [\'xml-loader\'],\n</span><span class="token prefix inserted">+</span><span class="token line">      },\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">    ],\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">};</span></span></code></pre> <p>프로젝트에 데이터 파일을 추가합니다.</p> <p><strong>project</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> webpack-demo\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- package.json\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- webpack.config.js\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /dist\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- bundle.js\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- index.html\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /src\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   |- data.xml\n</span><span class="token prefix inserted">+</span><span class="token line">   |- data.csv\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   |- my-font.woff\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- my-font.woff2\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- icon.png\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- style.css\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- index.js\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /node_modules</span></span></code></pre> <p><strong>src/data.xml</strong></p> <pre><code class="hljs language-xml"><span class="token prolog">&#x3C;?xml version="1.0" encoding="UTF-8"?></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>note</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>to</span><span class="token punctuation">></span></span>Mary<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>to</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>from</span><span class="token punctuation">></span></span>John<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>from</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>heading</span><span class="token punctuation">></span></span>Reminder<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>heading</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>body</span><span class="token punctuation">></span></span>Call Cindy on Tuesday<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>note</span><span class="token punctuation">></span></span></code></pre> <p><strong>src/data.csv</strong></p> <pre><code class="hljs language-csv">to,from,heading,body\nMary,John,Reminder,Call Cindy on Tuesday\nZoe,Bill,Reminder,Buy orange juice\nAutumn,Lindsey,Letter,I miss you\n</code></pre> <p>이제 네 가지 데이터 유형(JSON, CSV, TSV, XML) 중 하나를 <code>import</code> 할 수 있으며, 가져오는 <code>Data</code> 변수에는 파싱된 JSON이 포함되어 쉽게 사용할 수 있습니다.</p> <p><strong>src/index.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">import _ from \'lodash\';\n</span><span class="token prefix unchanged"> </span><span class="token line">import \'./style.css\';\n</span><span class="token prefix unchanged"> </span><span class="token line">import Icon from \'./icon.png\';\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">import Data from \'./data.xml\';\n</span><span class="token prefix inserted">+</span><span class="token line">import Notes from \'./data.csv\';\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">function component() {\n</span><span class="token prefix unchanged"> </span><span class="token line">  const element = document.createElement(\'div\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  // Lodash, now imported by this script\n</span><span class="token prefix unchanged"> </span><span class="token line">  element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n</span><span class="token prefix unchanged"> </span><span class="token line">  element.classList.add(\'hello\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  // Add the image to our existing div.\n</span><span class="token prefix unchanged"> </span><span class="token line">  const myIcon = new Image();\n</span><span class="token prefix unchanged"> </span><span class="token line">  myIcon.src = Icon;\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  element.appendChild(myIcon);\n</span></span>\n<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  console.log(Data);\n</span><span class="token prefix inserted">+</span><span class="token line">  console.log(Notes);\n</span><span class="token prefix inserted">+</span><span class="token line">\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  return element;\n</span><span class="token prefix unchanged"> </span><span class="token line">}\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">document.body.appendChild(component());</span></span></code></pre> <p><code>npm run build</code> 명령을 다시 실행하고 <code>dist/index.html</code>을 엽니다. 개발자 도구의 콘솔에 가져온 데이터가 기록되는 것을 볼 수 있습니다!</p> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>이것은 <a href="https://github.com/d3">d3</a>와 같은 도구를 사용하여 데이터를 시각화할 때 특히 유용할 수 있습니다. ajax 요청을 만들고 런타임에 데이터를 파싱하는 대신 빌드 프로세스 중 모듈에 로드하여 모듈이 브라우저에 도달하자마자 파싱된 데이터가 준비되도록 합니다.</p></aside> <aside class="warning"><h6 class="warning__prefix">warning</h6><p>JSON 모듈의 기본 내보내기만 경고 없이 사용할 수 있습니다.</p></aside> <pre><code class="hljs language-javascript"><span class="token comment">// 경고 없음</span>\n<span class="token keyword">import</span> data <span class="token keyword">from</span> <span class="token string">\'./data.json\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 스펙에서 허용하지 않으므로 경고가 노출됨</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> foo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./data.json\'</span><span class="token punctuation">;</span></code></pre> <h3 id="customize-parser-of-json-modules">Customize parser of JSON modules<a href="#customize-parser-of-json-modules" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>특정 webpack 로더 대신 [커스텀 파서](/configuration/modules# ruleparserparse)를 사용하여 <code>toml</code>, <code>yaml</code> 또는 <code>json5</code> 파일을 JSON 모듈로 가져올 수 있습니다.</p> <p><code>src</code> 폴더에 <code>data.toml</code>, <code>data.yaml</code> 및 <code>data.json5</code> 파일이 있다고 가정해 보겠습니다.</p> <p><strong>src/data.toml</strong></p> <pre><code class="hljs language-toml">title = "TOML Example"\n\n[owner]\nname = "Tom Preston-Werner"\norganization = "GitHub"\nbio = "GitHub Cofounder &#x26; CEO\\nLikes tater tots and beer."\ndob = 1979-05-27T07:32:00Z\n</code></pre> <p><strong>src/data.yaml</strong></p> <pre><code class="hljs language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> YAML Example\n<span class="token key atrule">owner</span><span class="token punctuation">:</span>\n  <span class="token key atrule">name</span><span class="token punctuation">:</span> Tom Preston<span class="token punctuation">-</span>Werner\n  <span class="token key atrule">organization</span><span class="token punctuation">:</span> GitHub\n  <span class="token key atrule">bio</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token punctuation">-</span>\n    GitHub Cofounder &#x26; CEO\n    Likes tater tots and beer.\n  <span class="token key atrule">dob</span><span class="token punctuation">:</span> <span class="token datetime number">1979-05-27T07:32:00.000Z</span></code></pre> <p><strong>src/data.json5</strong></p> <pre><code class="hljs language-json5">{\n  // comment\n  title: \'JSON5 Example\',\n  owner: {\n    name: \'Tom Preston-Werner\',\n    organization: \'GitHub\',\n    bio: \'GitHub Cofounder &#x26; CEO\\n\\\nLikes tater tots and beer.\',\n    dob: \'1979-05-27T07:32:00.000Z\',\n  },\n}\n</code></pre> <p>먼저 <code>toml</code>, <code>yamljs</code> 및 <code>json5</code> 패키지를 설치합니다.</p> <pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> toml yamljs json5 --save-dev</code></pre> <p>그리고 webpack 설정에 추가합니다.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const path = require(\'path\');\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">const toml = require(\'toml\');\n</span><span class="token prefix inserted">+</span><span class="token line">const yaml = require(\'yamljs\');\n</span><span class="token prefix inserted">+</span><span class="token line">const json5 = require(\'json5\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">  entry: \'./src/index.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">  output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    filename: \'bundle.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">    path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  module: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    rules: [\n</span><span class="token prefix unchanged"> </span><span class="token line">      {\n</span><span class="token prefix unchanged"> </span><span class="token line">        test: /\\.css$/i,\n</span><span class="token prefix unchanged"> </span><span class="token line">        use: [\'style-loader\', \'css-loader\'],\n</span><span class="token prefix unchanged"> </span><span class="token line">      },\n</span><span class="token prefix unchanged"> </span><span class="token line">      {\n</span><span class="token prefix unchanged"> </span><span class="token line">        test: /\\.(png|svg|jpg|jpeg|gif)$/i,\n</span><span class="token prefix unchanged"> </span><span class="token line">        type: \'asset/resource\',\n</span><span class="token prefix unchanged"> </span><span class="token line">      },\n</span><span class="token prefix unchanged"> </span><span class="token line">      {\n</span><span class="token prefix unchanged"> </span><span class="token line">        test: /\\.(woff|woff2|eot|ttf|otf)$/i,\n</span><span class="token prefix unchanged"> </span><span class="token line">        type: \'asset/resource\',\n</span><span class="token prefix unchanged"> </span><span class="token line">      },\n</span><span class="token prefix unchanged"> </span><span class="token line">      {\n</span><span class="token prefix unchanged"> </span><span class="token line">        test: /\\.(csv|tsv)$/i,\n</span><span class="token prefix unchanged"> </span><span class="token line">        use: [\'csv-loader\'],\n</span><span class="token prefix unchanged"> </span><span class="token line">      },\n</span><span class="token prefix unchanged"> </span><span class="token line">      {\n</span><span class="token prefix unchanged"> </span><span class="token line">        test: /\\.xml$/i,\n</span><span class="token prefix unchanged"> </span><span class="token line">        use: [\'xml-loader\'],\n</span><span class="token prefix unchanged"> </span><span class="token line">      },\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">      {\n</span><span class="token prefix inserted">+</span><span class="token line">        test: /\\.toml$/i,\n</span><span class="token prefix inserted">+</span><span class="token line">        type: \'json\',\n</span><span class="token prefix inserted">+</span><span class="token line">        parser: {\n</span><span class="token prefix inserted">+</span><span class="token line">          parse: toml.parse,\n</span><span class="token prefix inserted">+</span><span class="token line">        },\n</span><span class="token prefix inserted">+</span><span class="token line">      },\n</span><span class="token prefix inserted">+</span><span class="token line">      {\n</span><span class="token prefix inserted">+</span><span class="token line">        test: /\\.yaml$/i,\n</span><span class="token prefix inserted">+</span><span class="token line">        type: \'json\',\n</span><span class="token prefix inserted">+</span><span class="token line">        parser: {\n</span><span class="token prefix inserted">+</span><span class="token line">          parse: yaml.parse,\n</span><span class="token prefix inserted">+</span><span class="token line">        },\n</span><span class="token prefix inserted">+</span><span class="token line">      },\n</span><span class="token prefix inserted">+</span><span class="token line">      {\n</span><span class="token prefix inserted">+</span><span class="token line">        test: /\\.json5$/i,\n</span><span class="token prefix inserted">+</span><span class="token line">        type: \'json\',\n</span><span class="token prefix inserted">+</span><span class="token line">        parser: {\n</span><span class="token prefix inserted">+</span><span class="token line">          parse: json5.parse,\n</span><span class="token prefix inserted">+</span><span class="token line">        },\n</span><span class="token prefix inserted">+</span><span class="token line">      },\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">    ],\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">};</span></span></code></pre> <p><strong>src/index.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">import _ from \'lodash\';\n</span><span class="token prefix unchanged"> </span><span class="token line">import \'./style.css\';\n</span><span class="token prefix unchanged"> </span><span class="token line">import Icon from \'./icon.png\';\n</span><span class="token prefix unchanged"> </span><span class="token line">import Data from \'./data.xml\';\n</span><span class="token prefix unchanged"> </span><span class="token line">import Notes from \'./data.csv\';\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">import toml from \'./data.toml\';\n</span><span class="token prefix inserted">+</span><span class="token line">import yaml from \'./data.yaml\';\n</span><span class="token prefix inserted">+</span><span class="token line">import json from \'./data.json5\';\n</span><span class="token prefix inserted">+</span><span class="token line">\n</span><span class="token prefix inserted">+</span><span class="token line">console.log(toml.title); // output `TOML Example`\n</span><span class="token prefix inserted">+</span><span class="token line">console.log(toml.owner.name); // output `Tom Preston-Werner`\n</span><span class="token prefix inserted">+</span><span class="token line">\n</span><span class="token prefix inserted">+</span><span class="token line">console.log(yaml.title); // output `YAML Example`\n</span><span class="token prefix inserted">+</span><span class="token line">console.log(yaml.owner.name); // output `Tom Preston-Werner`\n</span><span class="token prefix inserted">+</span><span class="token line">\n</span><span class="token prefix inserted">+</span><span class="token line">console.log(json.title); // output `JSON5 Example`\n</span><span class="token prefix inserted">+</span><span class="token line">console.log(json.owner.name); // output `Tom Preston-Werner`\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">function component() {\n</span><span class="token prefix unchanged"> </span><span class="token line">  const element = document.createElement(\'div\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  // Lodash, now imported by this script\n</span><span class="token prefix unchanged"> </span><span class="token line">  element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n</span><span class="token prefix unchanged"> </span><span class="token line">  element.classList.add(\'hello\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  // Add the image to our existing div.\n</span><span class="token prefix unchanged"> </span><span class="token line">  const myIcon = new Image();\n</span><span class="token prefix unchanged"> </span><span class="token line">  myIcon.src = Icon;\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  element.appendChild(myIcon);\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  console.log(Data);\n</span><span class="token prefix unchanged"> </span><span class="token line">  console.log(Notes);\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  return element;\n</span><span class="token prefix unchanged"> </span><span class="token line">}\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">document.body.appendChild(component());</span></span></code></pre> <p><code>npm run build</code> 명령을 다시 실행하고 <code>dist/index.html</code>을 확인합니다. 가져온 데이터가 콘솔에 기록되는 것을 볼 수 있습니다!</p> <h2 id="global-assets">Global Assets<a href="#global-assets" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>위에서 언급 한 모든 것 중 가장 멋진 점은 이러한 방식으로 애셋을 로드하면 모듈과 애셋을 보다 직관적인 방식으로 그룹화할 수 있다는 것입니다. 모든 것을 포함한 글로벌 <code>/assets</code> 디렉터리에 의존하는 대신 애셋을 사용하는 코드와 그룹화할 수 있습니다. 예를 들어 다음과 같은 구조가 유용할 수 있습니다.</p> <pre><code class="hljs language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> |- /assets\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> |– /components\n</span><span class="token prefix inserted">+</span><span class="token line"> |  |– /my-component\n</span><span class="token prefix inserted">+</span><span class="token line"> |  |  |– index.jsx\n</span><span class="token prefix inserted">+</span><span class="token line"> |  |  |– index.css\n</span><span class="token prefix inserted">+</span><span class="token line"> |  |  |– icon.svg\n</span><span class="token prefix inserted">+</span><span class="token line"> |  |  |– img.png</span></span></code></pre> <p>이러한 설정은 밀접하게 연결된 모든 것이 함께 있기 때문에 코드를 다른 곳에 훨씬 더 쉽게 적용할 수 있도록 합니다. 다른 프로젝트에서 <code>/my-component</code>를 사용한다고 가정해 봅시다. 간단히 복사하거나 다른 프로젝트의 <code>/components</code> 디렉터리로 옮기면 됩니다. <em>외부 의존성을</em> 설치하고 <em>설정에 동일한 로더가 정의되어있는 한</em> 아무 문제가 없습니다.</p> <p>그러나 예전 방식을 고수하고 있거나 여러 컴포넌트(뷰, 템플릿, 모듈 등) 간에 공유되는 애셋이 있다고 가정해 보겠습니다. 이러한 애셋을 기본 디렉터리에 저장하는 것도 가능하며 <a href="/configuration/resolve/#resolvealias">aliasing</a>을 사용하여 쉽게 <code>import</code> 할 수 있습니다.</p> <h2 id="wrapping-up">Wrapping up<a href="#wrapping-up" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>다음 가이드에서는 이 가이드에서 사용한 각기 다른 애셋을 모두 사용하지 않을 것이므로 다음 가이드인 <a href="https://webpack.js.org/guides/output-management/">Output Management</a> 준비를 위해 정리를 해 보겠습니다.</p> <p><strong>project</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> webpack-demo\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- package.json\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- webpack.config.js\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /dist\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- bundle.js\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- index.html\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /src\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">   |- data.csv\n</span><span class="token prefix deleted">-</span><span class="token line">   |- data.json5\n</span><span class="token prefix deleted">-</span><span class="token line">   |- data.toml\n</span><span class="token prefix deleted">-</span><span class="token line">   |- data.xml\n</span><span class="token prefix deleted">-</span><span class="token line">   |- data.yaml\n</span><span class="token prefix deleted">-</span><span class="token line">   |- icon.png\n</span><span class="token prefix deleted">-</span><span class="token line">   |- my-font.woff\n</span><span class="token prefix deleted">-</span><span class="token line">   |- my-font.woff2\n</span><span class="token prefix deleted">-</span><span class="token line">   |- style.css\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   |- index.js\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /node_modules</span></span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const path = require(\'path\');\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">const toml = require(\'toml\');\n</span><span class="token prefix deleted">-</span><span class="token line">const yaml = require(\'yamljs\');\n</span><span class="token prefix deleted">-</span><span class="token line">const json5 = require(\'json5\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">  entry: \'./src/index.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">  output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    filename: \'bundle.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">    path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">  module: {\n</span><span class="token prefix deleted">-</span><span class="token line">    rules: [\n</span><span class="token prefix deleted">-</span><span class="token line">      {\n</span><span class="token prefix deleted">-</span><span class="token line">        test: /\\.css$/i,\n</span><span class="token prefix deleted">-</span><span class="token line">        use: [\'style-loader\', \'css-loader\'],\n</span><span class="token prefix deleted">-</span><span class="token line">      },\n</span><span class="token prefix deleted">-</span><span class="token line">      {\n</span><span class="token prefix deleted">-</span><span class="token line">        test: /\\.(png|svg|jpg|jpeg|gif)$/i,\n</span><span class="token prefix deleted">-</span><span class="token line">        type: \'asset/resource\',\n</span><span class="token prefix deleted">-</span><span class="token line">      },\n</span><span class="token prefix deleted">-</span><span class="token line">      {\n</span><span class="token prefix deleted">-</span><span class="token line">        test: /\\.(woff|woff2|eot|ttf|otf)$/i,\n</span><span class="token prefix deleted">-</span><span class="token line">        type: \'asset/resource\',\n</span><span class="token prefix deleted">-</span><span class="token line">      },\n</span><span class="token prefix deleted">-</span><span class="token line">      {\n</span><span class="token prefix deleted">-</span><span class="token line">        test: /\\.(csv|tsv)$/i,\n</span><span class="token prefix deleted">-</span><span class="token line">        use: [\'csv-loader\'],\n</span><span class="token prefix deleted">-</span><span class="token line">      },\n</span><span class="token prefix deleted">-</span><span class="token line">      {\n</span><span class="token prefix deleted">-</span><span class="token line">        test: /\\.xml$/i,\n</span><span class="token prefix deleted">-</span><span class="token line">        use: [\'xml-loader\'],\n</span><span class="token prefix deleted">-</span><span class="token line">      },\n</span><span class="token prefix deleted">-</span><span class="token line">      {\n</span><span class="token prefix deleted">-</span><span class="token line">        test: /\\.toml$/i,\n</span><span class="token prefix deleted">-</span><span class="token line">        type: \'json\',\n</span><span class="token prefix deleted">-</span><span class="token line">        parser: {\n</span><span class="token prefix deleted">-</span><span class="token line">          parse: toml.parse,\n</span><span class="token prefix deleted">-</span><span class="token line">        },\n</span><span class="token prefix deleted">-</span><span class="token line">      },\n</span><span class="token prefix deleted">-</span><span class="token line">      {\n</span><span class="token prefix deleted">-</span><span class="token line">        test: /\\.yaml$/i,\n</span><span class="token prefix deleted">-</span><span class="token line">        type: \'json\',\n</span><span class="token prefix deleted">-</span><span class="token line">        parser: {\n</span><span class="token prefix deleted">-</span><span class="token line">          parse: yaml.parse,\n</span><span class="token prefix deleted">-</span><span class="token line">        },\n</span><span class="token prefix deleted">-</span><span class="token line">      },\n</span><span class="token prefix deleted">-</span><span class="token line">      {\n</span><span class="token prefix deleted">-</span><span class="token line">        test: /\\.json5$/i,\n</span><span class="token prefix deleted">-</span><span class="token line">        type: \'json\',\n</span><span class="token prefix deleted">-</span><span class="token line">        parser: {\n</span><span class="token prefix deleted">-</span><span class="token line">          parse: json5.parse,\n</span><span class="token prefix deleted">-</span><span class="token line">        },\n</span><span class="token prefix deleted">-</span><span class="token line">      },\n</span><span class="token prefix deleted">-</span><span class="token line">    ],\n</span><span class="token prefix deleted">-</span><span class="token line">  },\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">};</span></span></code></pre> <p><strong>src/index.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">import _ from \'lodash\';\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">import \'./style.css\';\n</span><span class="token prefix deleted">-</span><span class="token line">import Icon from \'./icon.png\';\n</span><span class="token prefix deleted">-</span><span class="token line">import Data from \'./data.xml\';\n</span><span class="token prefix deleted">-</span><span class="token line">import Notes from \'./data.csv\';\n</span><span class="token prefix deleted">-</span><span class="token line">import toml from \'./data.toml\';\n</span><span class="token prefix deleted">-</span><span class="token line">import yaml from \'./data.yaml\';\n</span><span class="token prefix deleted">-</span><span class="token line">import json from \'./data.json5\';\n</span><span class="token prefix deleted">-</span><span class="token line">\n</span><span class="token prefix deleted">-</span><span class="token line">console.log(toml.title); // output `TOML Example`\n</span><span class="token prefix deleted">-</span><span class="token line">console.log(toml.owner.name); // output `Tom Preston-Werner`\n</span><span class="token prefix deleted">-</span><span class="token line">\n</span><span class="token prefix deleted">-</span><span class="token line">console.log(yaml.title); // output `YAML Example`\n</span><span class="token prefix deleted">-</span><span class="token line">console.log(yaml.owner.name); // output `Tom Preston-Werner`\n</span><span class="token prefix deleted">-</span><span class="token line">\n</span><span class="token prefix deleted">-</span><span class="token line">console.log(json.title); // output `JSON5 Example`\n</span><span class="token prefix deleted">-</span><span class="token line">console.log(json.owner.name); // output `Tom Preston-Werner`\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">function component() {\n</span><span class="token prefix unchanged"> </span><span class="token line">  const element = document.createElement(\'div\');\n</span></span>\n<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">  // Lodash, now imported by this script\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">  element.classList.add(\'hello\');\n</span><span class="token prefix deleted">-</span><span class="token line">\n</span><span class="token prefix deleted">-</span><span class="token line">  // Add the image to our existing div.\n</span><span class="token prefix deleted">-</span><span class="token line">  const myIcon = new Image();\n</span><span class="token prefix deleted">-</span><span class="token line">  myIcon.src = Icon;\n</span><span class="token prefix deleted">-</span><span class="token line">\n</span><span class="token prefix deleted">-</span><span class="token line">  element.appendChild(myIcon);\n</span><span class="token prefix deleted">-</span><span class="token line">\n</span><span class="token prefix deleted">-</span><span class="token line">  console.log(Data);\n</span><span class="token prefix deleted">-</span><span class="token line">  console.log(Notes);\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  return element;\n</span><span class="token prefix unchanged"> </span><span class="token line">}\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">document.body.appendChild(component());</span></span></code></pre> <p>그리고 추가했던 의존성을 제거합니다.</p> <pre><code class="hljs language-bash"><span class="token function">npm</span> uninstall css-loader csv-loader json5 style-loader toml xml-loader yamljs</code></pre> <h2 id="next-guide">Next guide<a href="#next-guide" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>이제 <a href="https://webpack.js.org/guides/output-management/">Output Management</a>로 넘어가 보겠습니다.</p> <h2 id="further-reading">Further Reading<a href="#further-reading" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <ul> <li>SurviveJS의 <a href="https://survivejs.com/webpack/loading/fonts/">Loading Fonts</a></li> </ul> '}}]);