"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[834],{834:function(n,s,a){a.r(s),s.default='<aside class="tip"><h6 class="tip__prefix">tip</h6><p>이 가이드는 <a href="/guides/getting-started/"><em>시작하기</em></a> 가이드에서 파생했습니다.</p></aside> <p><a href="https://www.typescriptlang.org">TypeScript는</a> 일반 JavaScript로 컴파일되고 타입이 있는 상위 집합입니다. 이 가이드에서는 TypeScript를 webpack과 통합하는 방법에 대해 알아보겠습니다.</p> <h2 id="basic-setup">Basic Setup<a href="#basic-setup" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>먼저 다음을 실행하여 TypeScript 컴파일러와 로더를 설치하세요.</p> <pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev typescript ts-loader</code></pre> <p>이제 디렉터리 구조와 설정 파일을 수정합니다.</p> <p><strong>project</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> webpack-demo\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- package.json\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> |- tsconfig.json\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> |- webpack.config.js\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /dist\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- bundle.js\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- index.html\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /src\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- index.js\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   |- index.ts\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> |- /node_modules</span></span></code></pre> <p><strong>tsconfig.json</strong></p> <p>JSX를 지원하도록 간단하게 설정하고 TypeScript를 ES5로 컴파일 합니다.</p> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"./dist/"</span><span class="token punctuation">,</span>\n    <span class="token property">"noImplicitAny"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"es6"</span><span class="token punctuation">,</span>\n    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"es5"</span><span class="token punctuation">,</span>\n    <span class="token property">"jsx"</span><span class="token operator">:</span> <span class="token string">"react"</span><span class="token punctuation">,</span>\n    <span class="token property">"allowJs"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token property">"moduleResolution"</span><span class="token operator">:</span> <span class="token string">"node"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <p><code>tsconfig.json</code> 설정 옵션에 대한 자세한 내용은 <a href="https://www.typescriptlang.org/docs/handbook/tsconfig-json.html">TypeScript 문서를</a> 참고하세요.</p> <p>webpack 설정에 대한 자세한 내용은 <a href="/concepts/configuration/">설정 콘셉트를</a> 참고하세요.</p> <p>이제 TypeScript를 처리하도록 webpack을 설정해 보겠습니다.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token operator">:</span> <span class="token string">\'./src/index.ts\'</span><span class="token punctuation">,</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.tsx?$/</span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token string">\'ts-loader\'</span><span class="token punctuation">,</span>\n        exclude<span class="token operator">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>\n    extensions<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'.tsx\'</span><span class="token punctuation">,</span> <span class="token string">\'.ts\'</span><span class="token punctuation">,</span> <span class="token string">\'.js\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    filename<span class="token operator">:</span> <span class="token string">\'bundle.js\'</span><span class="token punctuation">,</span>\n    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>이렇게하면 webpack이 <code>./index.ts</code> 를 통해 진입하고, <code>ts-loader</code>를 통해 모든 <code>.ts</code> 및 <code>.tsx</code> 파일을 로드합니다. 그리고 현재 디렉터리에 <code>bundle.js</code>파일을 출력합니다.</p> <p><code>lodash</code>의 정의에는 기본 export 표현이 없기 때문에, 이제 <code>./index.ts</code>의 <code>lodash</code>를 import하는 부분을 변경해 보겠습니다.</p> <p><strong>./index.ts</strong></p> <pre><code class="hljs language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> import _ from \'lodash\';\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> import * as _ from \'lodash\';\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> function component() {\n</span><span class="token prefix unchanged"> </span><span class="token line">   const element = document.createElement(\'div\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   return element;\n</span><span class="token prefix unchanged"> </span><span class="token line"> }\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> document.body.appendChild(component());</span></span></code></pre> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>import 부분에서 기본적으로 이 작업을 하도록 하고 TypeScript에서 <code>import _ from \'lodash\';</code> 문법을 유지하기 위해 <strong>tsconfig.json</strong> 파일에 <code>"allowSyntheticDefaultImports" : true</code> 와 <code>"esModuleInterop" : true</code>로 설정 합니다. 이는 TypeScript 설정과 연관이 있기때문에 이 가이드에서는 정보를 제공하기 위해서만 언급하겠습니다.</p></aside> <h2 id="loader">Loader<a href="#loader" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><a href="https://github.com/TypeStrong/ts-loader"><code>ts-loader</code></a></p> <p>이 가이드에서는 <code>ts-loader</code>를 사용하여 다른 웹 애셋 import 같은 추가적인 webpack 기능을 조금 더 쉽게 활성화 할 수 있습니다.</p> <aside class="warning"><h6 class="warning__prefix">warning</h6><p><code>ts-loader</code> 는 TypeScript 컴파일러인 <code>tsc</code>를 사용하고, <code>tsconfig.json</code>의 설정을 따릅니다. <a href="https://www.typescriptlang.org/tsconfig#module"><code>모듈을</code></a> "CommonJS"로 설정하지 않도록 주의하세요. 안그러면 webpack이 <a href="/guides/tree-shaking">코드 tree-shake를</a> 할 수 없습니다.</p></aside> <p>이미 <a href="https://github.com/babel/babel-loader"><code>babel-loader</code>를</a> 사용하여 코드를 트랜스파일 하는 경우라면 <a href="https://babeljs.io/docs/en/babel-preset-typescript"><code>@babel/preset-typescript</code></a>를 사용하여 Babel이 추가 로더를 사용하는 대신 JavaScript와 TypeScript 파일을 모두 처리하도록 합니다. <code>ts-loader</code>와 달리, 기본 <a href="https://babeljs.io/docs/en/babel-plugin-transform-typescript"><code>@babel/plugin-transform-typescript</code></a> 플러그인은 어떠한 타입 검사도 수행하지 않습니다.</p> <h2 id="source-maps">Source Maps<a href="#source-maps" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>소스맵에 대한 자세한 내용은 <a href="/guides/development">개발 가이드를</a> 참고하세요.</p> <p>소스맵을 사용하려면 TypeScript가 컴파일된 JavaScript 파일로 인라인 소스맵을 출력하도록 설정해야 합니다. TypeScript 설정에 다음 내용을 꼭 추가해야합니다.</p> <p><strong>tsconfig.json</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> {\n</span><span class="token prefix unchanged"> </span><span class="token line">   "compilerOptions": {\n</span><span class="token prefix unchanged"> </span><span class="token line">     "outDir": "./dist/",\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     "sourceMap": true,\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     "noImplicitAny": true,\n</span><span class="token prefix unchanged"> </span><span class="token line">     "module": "commonjs",\n</span><span class="token prefix unchanged"> </span><span class="token line">     "target": "es5",\n</span><span class="token prefix unchanged"> </span><span class="token line">     "jsx": "react",\n</span><span class="token prefix unchanged"> </span><span class="token line">     "allowJs": true,\n</span><span class="token prefix unchanged"> </span><span class="token line">     "moduleResolution": "node",\n</span><span class="token prefix unchanged"> </span><span class="token line">   }\n</span><span class="token prefix unchanged"> </span><span class="token line"> }</span></span></code></pre> <p>이제 webpack에 이러한 소스맵을 추출해 최종 번들에 포함되도록 지시해야 합니다.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const path = require(\'path\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">   entry: \'./src/index.ts\',\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   devtool: \'inline-source-map\',\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   module: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     rules: [\n</span><span class="token prefix unchanged"> </span><span class="token line">       {\n</span><span class="token prefix unchanged"> </span><span class="token line">         test: /\\.tsx?$/,\n</span><span class="token prefix unchanged"> </span><span class="token line">         use: \'ts-loader\',\n</span><span class="token prefix unchanged"> </span><span class="token line">         exclude: /node_modules/,\n</span><span class="token prefix unchanged"> </span><span class="token line">       },\n</span><span class="token prefix unchanged"> </span><span class="token line">     ],\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line">   resolve: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     extensions: [ \'.tsx\', \'.ts\', \'.js\' ],\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line">   output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     filename: \'bundle.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">     path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line"> };</span></span></code></pre> <p>자세한 내용은 <a href="/configuration/devtool/">개발자 도구 문서를</a> 참고하세요.</p> <h2 id="using-third-party-libraries">Using Third Party Libraries<a href="#using-third-party-libraries" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>npm으로부터 타사 라이브러리를 설치할 때는 해당 라이브러리에 대한 타입 정의를 설치해야 한다는 사실을 기억해야 합니다. 이런 정의는 <a href="https://microsoft.github.io/TypeSearch/">TypeSearch에서</a> 찾을 수 있습니다.</p> <p>예를 들어 lodash를 설치하려는 경우 다음 명령을 실행해서 타입을 가져올 수 있습니다.</p> <pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev @types/lodash</code></pre> <p>자세한 내용은 <a href="https://blogs.msdn.microsoft.com/typescript/2016/06/15/the-future-of-declaration-files/">블로그 포스트를</a> 참고하세요.</p> <h2 id="importing-other-assets">Importing Other Assets<a href="#importing-other-assets" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>TypeScript와 함께 비코드 애셋을 사용하려면 이러한 import에 대한 타입을 연기해야 합니다. 이를 위해서 프로젝트에 TypeScript에 대한 사용자 정의를 나타내는 <code>custom.d.ts</code> 파일이 필요합니다. <code>.svg</code> 파일에 대한 선언을 설정해 보겠습니다.</p> <p><strong>custom.d.ts</strong></p> <pre><code class="hljs language-typescript"><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">\'*.svg\'</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> content<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\n  <span class="token keyword">export</span> <span class="token keyword">default</span> content<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <p>여기에서는 <code>.svg</code>로 끝나는 import를 지정하고 모듈의 <code>content</code>를 <code>any</code>로 정의하여 SVG를 위한 새로운 모듈을 선언합니다. 타입을 문자열로 정의하여 URL이라는 것을 더 명확하게 할 수 있습니다. CSS, SCSS, JSON 등을 포함한 다른 애셋에도 동일한 개념이 적용됩니다.</p> <h2 id="build-performance">Build Performance<a href="#build-performance" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <aside class="warning"><h6 class="warning__prefix">warning</h6><p>이로 인해 빌드 성능이 저하 될 수 있습니다.</p></aside> <p>빌드 도구에 대한 <a href="/guides/build-performance/">빌드 성능 가이드를</a> 참고하세요.</p> '}}]);