(self.webpackChunk=self.webpackChunk||[]).push([[3548],{3548:function(n,s,a){"use strict";a.r(s),s.default='<p>애플리케이션 외에도 JavaScript 라이브러리를 번들링 할 때도 webpack을 사용할 수 있습니다. 아래의 가이드는 번들링 전략을 간소화하려는 라이브러리 작성자를 위한 것입니다.</p> <h2 id="authoring-a-library">Authoring a Library<a href="#authoring-a-library" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>사용자가 1부터 5까지의 숫자를 숫자 표현에서 텍스트로 또는 그 반대로 변환할 수 있는 작은 라이브러리 <code>webpack-numbers</code>를 작성한다고 가정해 보겠습니다. 예. 2 에서 \'two\'.</p> <p>프로젝트의 기본 구조는 다음과 같을 것입니다.</p> <p><strong>project</strong></p> <pre><code class="hljs language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  |- webpack.config.js\n</span><span class="token prefix inserted">+</span><span class="token line">  |- package.json\n</span><span class="token prefix inserted">+</span><span class="token line">  |- /src\n</span><span class="token prefix inserted">+</span><span class="token line">    |- index.js\n</span><span class="token prefix inserted">+</span><span class="token line">    |- ref.json</span></span></code></pre> <p>npm을 초기화하고 <code>webpack</code>, <code>webpack-cli</code>, <code>lodash</code>를 설치합니다.</p> <pre><code class="hljs language-bash"><span class="token function">npm</span> init -y\n<span class="token function">npm</span> <span class="token function">install</span> --save-dev webpack webpack-cli lodash</code></pre> <p>라이브러리에 번들 되는 것을 막고 라이브러리가 비대해지는 것을 방지하기 위해 <code>lodash</code>를 <code>dependencies</code> 대신 <code>devDependencies</code>로 설치합니다.</p> <p><strong>src/ref.json</strong></p> <pre><code class="hljs language-json"><span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    <span class="token property">"num"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    <span class="token property">"word"</span><span class="token operator">:</span> <span class="token string">"One"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token property">"num"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n    <span class="token property">"word"</span><span class="token operator">:</span> <span class="token string">"Two"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token property">"num"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n    <span class="token property">"word"</span><span class="token operator">:</span> <span class="token string">"Three"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token property">"num"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>\n    <span class="token property">"word"</span><span class="token operator">:</span> <span class="token string">"Four"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token property">"num"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>\n    <span class="token property">"word"</span><span class="token operator">:</span> <span class="token string">"Five"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token property">"num"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    <span class="token property">"word"</span><span class="token operator">:</span> <span class="token string">"Zero"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span></code></pre> <p><strong>src/index.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> _ <span class="token keyword">from</span> <span class="token string">\'lodash\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> numRef <span class="token keyword">from</span> <span class="token string">\'./ref.json\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">numToWord</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> _<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>\n    numRef<span class="token punctuation">,</span>\n    <span class="token punctuation">(</span><span class="token parameter">accum<span class="token punctuation">,</span> ref</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> ref<span class="token punctuation">.</span>num <span class="token operator">===</span> num <span class="token operator">?</span> ref<span class="token punctuation">.</span>word <span class="token operator">:</span> accum<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token string">\'\'</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">wordToNum</span><span class="token punctuation">(</span><span class="token parameter">word</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> _<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>\n    numRef<span class="token punctuation">,</span>\n    <span class="token punctuation">(</span><span class="token parameter">accum<span class="token punctuation">,</span> ref</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> ref<span class="token punctuation">.</span>word <span class="token operator">===</span> word <span class="token operator">&#x26;&#x26;</span> word<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> ref<span class="token punctuation">.</span>num <span class="token operator">:</span> accum<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token operator">-</span><span class="token number">1</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <h2 id="webpack-configuration">Webpack Configuration<a href="#webpack-configuration" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>아래의 기본적인 webpack 설정으로 시작해봅시다.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token operator">:</span> <span class="token string">\'./src/index.js\'</span><span class="token punctuation">,</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    filename<span class="token operator">:</span> <span class="token string">\'webpack-numbers.js\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>webpack으로 애플리케이션을 번들해보았다면 익숙할 것입니다. 기본적으로 webpack에게 <code>src/index.js</code>를 <code>dist/webpack-numbers.js</code>로 번들하도록 지시합니다.</p> <h2 id="expose-the-library">Expose the Library<a href="#expose-the-library" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>지금까지는 애플리케이션 번들링과 동일하며 다른 점은 <a href="/configuration/output/#outputlibrary"><code>output.library</code></a> 옵션을 통해 엔트리 포인트를 export 해야 합니다.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const path = require(\'path\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">   entry: \'./src/index.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">   output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">     filename: \'webpack-numbers.js\',\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     library: "webpackNumbers",\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line"> };</span></span></code></pre> <p>사용자가 script 태그를 통해 사용할 수 있도록 엔트리 포인트를 <code>webpackNumbers</code>로 export 했습니다.</p> <pre><code class="hljs language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://example.org/webpack-numbers.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>script</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n  window<span class="token punctuation">.</span>webpackNumbers<span class="token punctuation">.</span><span class="token function">wordToNum</span><span class="token punctuation">(</span><span class="token string">\'Five\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>script</span><span class="token punctuation">></span></span></code></pre> <p>그러나, script 태그를 통해 참조될 때만 작동하며 CommonJS, AMD, Node.js 등과 같은 다른 환경에서는 사용할 수 없습니다.</p> <p>라이브러리 작성자는 다양한 환경에서 호환되기를 원합니다. 즉, 사용자가 아래 나열된 여러 방법으로 번들 된 라이브러리를 사용할 수 있어야 합니다.</p> <ul> <li> <p><strong>CommonJS module require</strong>:</p> <pre><code class="hljs language-js"><span class="token keyword">const</span> webpackNumbers <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack-numbers\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// ...</span>\nwebpackNumbers<span class="token punctuation">.</span><span class="token function">wordToNum</span><span class="token punctuation">(</span><span class="token string">\'Two\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> </li> <li> <p><strong>AMD module require</strong>:</p> <pre><code class="hljs language-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'webpackNumbers\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">webpackNumbers</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  webpackNumbers<span class="token punctuation">.</span><span class="token function">wordToNum</span><span class="token punctuation">(</span><span class="token string">\'Two\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> </li> <li> <p><strong>script tag</strong>:</p> <pre><code class="hljs language-html"><span class="token doctype"><span class="token punctuation">&#x3C;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>html</span><span class="token punctuation">></span></span>\n  ...\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://example.org/webpack-numbers.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>script</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">// ...</span>\n    <span class="token comment">// 전역 변수</span>\n    webpackNumbers<span class="token punctuation">.</span><span class="token function">wordToNum</span><span class="token punctuation">(</span><span class="token string">\'Five\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// window 객체의 프로퍼티</span>\n    window<span class="token punctuation">.</span>webpackNumbers<span class="token punctuation">.</span><span class="token function">wordToNum</span><span class="token punctuation">(</span><span class="token string">\'Five\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// ...</span>\n  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>script</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>html</span><span class="token punctuation">></span></span></code></pre> </li> </ul> <p><code>type</code>을 <a href="/configuration/output/#type-amd"><code>\'umd\'</code></a>로 설정하여 <code>output.library</code> 옵션을 업데이트해 보겠습니다.</p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const path = require(\'path\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">  entry: \'./src/index.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">  output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">    filename: \'webpack-numbers.js\',\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">    library: \'webpackNumbers\',\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    library: {\n</span><span class="token prefix inserted">+</span><span class="token line">      name: \'webpackNumbers\',\n</span><span class="token prefix inserted">+</span><span class="token line">      type: \'umd\',\n</span><span class="token prefix inserted">+</span><span class="token line">    },\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">};</span></span></code></pre> <p>webpack은 라이브러리를 CommonJS, AMD, script 태그에서 사용할 수 있도록 번들할 것입니다.</p> <aside class="tip"><h6 class="tip__prefix">tip</h6><p><code>library</code> 설정은 <code>entry</code> 설정과 연관되어 있습니다. 대부분의 라이브러리의 경우 단일 엔트리 포인트를 지정하는 것으로 충분합니다. <a href="https://github.com/webpack/webpack/tree/master/examples/multi-part-library">다중 진입 라이브러리</a>도 가능하지만, <a href="https://stackoverflow.com/questions/34072598/es6-exporting-importing-in-index-file">index script</a>를 통해 부분적으로 export하는 것이 더 간단합니다. 라이브러리의 <code>entry</code>를 <code>array</code>를 사용하는 것은 <strong>권장되지 않습니다.</strong></p></aside> <h2 id="externalize-lodash">Externalize Lodash<a href="#externalize-lodash" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>npx webpack</code>을 실행하면 큰 번들이 생성 된 것을 알 수 있습니다. 파일을 검사하면 lodash가 코드와 함께 번들로 제공되는 것을 볼 수 있습니다. 이 경우 <code>lodash</code>를 <em>peer dependency</em> 로 취급하는 것이 좋습니다. 사용자는 이미 <code>lodash</code>가 설치되어 있어야합니다. 따라서 이 외부 라이브러리의 제어권을 라이브러리 사용자에게 넘겨야합니다.</p> <p><a href="/configuration/externals/"><code>externals</code></a> 설정을 사용하면 됩니다.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const path = require(\'path\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">   entry: \'./src/index.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">   output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">     filename: \'webpack-numbers.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">     library: {\n</span><span class="token prefix unchanged"> </span><span class="token line">       name: "webpackNumbers",\n</span><span class="token prefix unchanged"> </span><span class="token line">       type: "umd"\n</span><span class="token prefix unchanged"> </span><span class="token line">     },\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   externals: {\n</span><span class="token prefix inserted">+</span><span class="token line">     lodash: {\n</span><span class="token prefix inserted">+</span><span class="token line">       commonjs: \'lodash\',\n</span><span class="token prefix inserted">+</span><span class="token line">       commonjs2: \'lodash\',\n</span><span class="token prefix inserted">+</span><span class="token line">       amd: \'lodash\',\n</span><span class="token prefix inserted">+</span><span class="token line">       root: \'_\',\n</span><span class="token prefix inserted">+</span><span class="token line">     },\n</span><span class="token prefix inserted">+</span><span class="token line">   },\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> };</span></span></code></pre> <p>이는 라이브러리가 사용자 환경에서 <code>lodash</code>라는 종속성을 사용할 수 있다고 예상한다는 것을 의미합니다.</p> <h3 id="external-limitations">External Limitations<a href="#external-limitations" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>종속성에서 여러 파일을 사용하는 라이브러리의 경우:</p> <pre><code class="hljs language-js"><span class="token keyword">import</span> <span class="token constant">A</span> <span class="token keyword">from</span> <span class="token string">\'library/one\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token constant">B</span> <span class="token keyword">from</span> <span class="token string">\'library/two\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ...</span></code></pre> <p>externals에서 <code>library</code>를 지정하여 번들에서 제외할 수 없습니다. 하나씩 또는 정규식을 사용하여 제외해야 합니다.</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  externals<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">\'library/one\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'library/two\'</span><span class="token punctuation">,</span>\n    <span class="token comment">// "library/"로 시작하는 모든 것</span>\n    <span class="token operator">/</span><span class="token operator">^</span>library\\<span class="token regex">/.+$/</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="final-steps">Final Steps<a href="#final-steps" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><a href="/guides/production">프로덕션 가이드</a>에 언급된 단계에 따라 프로덕션에 맞게 출력을 최적화하세요. 또한 생성된 번들의 경로를 <code>package.json</code>의 <code>main</code> 필드에 추가하세요.</p> <p><strong>package.json</strong></p> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  ...\n  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"dist/webpack-numbers.js"</span><span class="token punctuation">,</span>\n  ...\n<span class="token punctuation">}</span></code></pre> <p>또는 <a href="https://github.com/dherman/defense-of-dot-js/blob/master/proposal.md#typical-usage">이 가이드</a>에 따라 표준 모듈로 추가하세요.</p> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  ...\n  <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"src/index.js"</span><span class="token punctuation">,</span>\n  ...\n<span class="token punctuation">}</span></code></pre> <p>키 <code>main</code>은 <a href="https://docs.npmjs.com/files/package.json#main"><code>package.json</code>의 표준</a>을, <code>module</code>은 JavaScript 생태계 업그레이드가 하위 호환성을 깨지 않고 ES2015 모듈을 사용할 수 있도록 하는 제안<a href="https://github.com/dherman/defense-of-dot-js/blob/master/proposal.md">[1]</a><a href="https://github.com/rollup/rollup/wiki/pkg.module">[2]</a>을 의미합니다.</p> <aside class="warning"><h6 class="warning__prefix">warning</h6><p><code>module</code> 속성은 ES2015 모듈 구문을 사용하는 스크립트를 가리켜야 하지만 아직 브라우저나 노드에서 지원하지 않는 다른 구문 기능은 없습니다. 이를 통해 webpack은 사용자가 라이브러리의 특정 부분만 소비하는 경우 모듈 구문 자체를 파싱하여 <a href="https://webpack.js.org/guides/tree-shaking/">트리 쉐이킹</a>을 통해 보다 가벼운 번들을 제공할 수 있습니다.</p></aside> <p>이제 사용자에게 배포하기 위해 <a href="https://docs.npmjs.com/getting-started/publishing-npm-packages">npm 패키지로 게시하고</a> <a href="https://unpkg.com/#/">unpkg.com</a>에서 찾을 수 있습니다.</p> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>라이브러리와 관련된 스타일 시트를 노출하려면 <a href="/plugins/mini-css-extract-plugin"><code>MiniCssExtractPlugin</code></a>을 사용해야 합니다. 사용자는 다른 스타일 시트와 마찬가지로 이를 사용하고 로드 할 수 있습니다.</p></aside> '}}]);