(self.webpackChunk=self.webpackChunk||[]).push([[361],{361:function(n,s,e){"use strict";e.r(s),s.default='<aside class="tip"><h6 class="tip__prefix">tip</h6><p>이 가이드는 <a href="/guides/output-management">Output Management</a> 가이드에 있는 코드 예제에 대해 설명합니다.</p></aside> <p>프로그레시브 웹 애플리케이션(또는 PWA)은 네이티브 애플리케이션과 유사한 경험을 제공하는 웹 앱입니다. PWA에 기여할 수 있는 많은 것들이 있습니다. 이 중에서 가장 중요한 것은 <strong>오프라인</strong> 일 때 앱이 작동할 수 있는 기능입니다. 이는 <a href="https://developers.google.com/web/fundamentals/primers/service-workers/">Service Workers</a>라는 웹 기술을 사용하여 이루어집니다.</p> <p>이 섹션에서는 앱에 오프라인 경험을 추가하는 데 중점을 둡니다. 웹 앱에 대한 오프라인 지원을 보다 쉽게 설정하는 데 도움이 될 도구를 제공하는 <a href="https://github.com/GoogleChrome/workbox">Workbox</a>라는 Google 프로젝트를 사용하여 이 작업을 수행합니다.</p> <h2 id="we-dont-work-offline-now">We Don\'t Work Offline Now<a href="#we-dont-work-offline-now" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>지금까지 로컬 파일 시스템으로 직접 이동하여 출력을 확인했습니다. 일반적으로 실제 사용자는 네트워크를 통해 웹 앱에 접근합니다. 브라우저는 <code>.html</code>, <code>.js</code>, 그리고 <code>.css</code> 파일같은 필요한 애셋을 제공할 <strong>서버와</strong> 통신합니다.</p> <p>간단한 서버를 사용하여 테스트해 보겠습니다. <code>npm install http-server --save-dev</code> 커맨드로 <a href="https://www.npmjs.com/package/http-server">http-server</a> 패키지를 설치하여 사용해 보겠습니다. 또한 <code>package.json</code>의 <code>scripts</code> 섹션을 수정하여 <code>start</code> 스크립트를 추가하겠습니다.</p> <p><strong>package.json</strong></p> <pre><code class="hljs language-diff">{\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> ...\n</span><span class="token prefix unchanged"> </span><span class="token line"> "scripts": {\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">    "build": "webpack"\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    "build": "webpack",\n</span><span class="token prefix inserted">+</span><span class="token line">    "start": "http-server dist"\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> },\n</span><span class="token prefix unchanged"> </span><span class="token line"> ...\n</span></span>}</code></pre> <p>참고: <a href="/configuration/dev-server/">webpack DevServer</a>는 기본적으로 인-메모리를 사용합니다. http-server가 <code>./dist</code> 디렉터리 파일을 제공하도록 하려면 <a href="/configuration/dev-server/#devserverwritetodisk-">writeToDisk</a> 옵션을 활성화해야 합니다.</p> <p><code>npm run build</code> 커맨드를 실행하여 프로젝트를 빌드합니다. 그런 다음 <code>npm start</code> 커맨드를 실행합니다. 그러면 다음과 같이 출력됩니다.</p> <pre><code class="hljs language-bash"><span class="token operator">></span> http-server dist\n\nStarting up http-server, serving dist\nAvailable on:\n  http://xx.x.x.x:8080\n  http://127.0.0.1:8080\n  http://xxx.xxx.x.x:8080\nHit CTRL-C to stop the server</code></pre> <p>만약 브라우저를 <code>http://localhost:8080</code>로 연다면 <code>dist</code> 디렉터리에서 제공되는 webpack 애플리케이션을 볼 수 있습니다. 서버를 중지하고 새로 고침하면 webpack 애플리케이션을 더 이상 사용할 수 없습니다.</p> <p>이것이 변경하고자 하는 것입니다. 이 문서의 끝에서는 이제 서버를 중지하고, 새로 고침을 눌러도 애플리케이션을 계속 볼 수 있습니다.</p> <h2 id="adding-workbox">Adding Workbox<a href="#adding-workbox" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>Workbox webpack 플러그인을 추가하고 <code>webpack.config.js</code>파일을 수정해 보겠습니다.</p> <pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> workbox-webpack-plugin --save-dev</code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const path = require(\'path\');\n</span><span class="token prefix unchanged"> </span><span class="token line"> const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> const WorkboxPlugin = require(\'workbox-webpack-plugin\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">   entry: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     app: \'./src/index.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">     print: \'./src/print.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line">   plugins: [\n</span><span class="token prefix unchanged"> </span><span class="token line">     new HtmlWebpackPlugin({\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">       title: \'Output Management\',\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">       title: \'Progressive Web Application\',\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     }),\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     new WorkboxPlugin.GenerateSW({\n</span><span class="token prefix inserted">+</span><span class="token line">       // 이 옵션은 ServiceWorkers가 빠르게 도달하도록 장려합니다\n</span><span class="token prefix inserted">+</span><span class="token line">       // 그리고 "오래된" SW가 돌아다니는 것을 허용하지 않습니다\n</span><span class="token prefix inserted">+</span><span class="token line">       clientsClaim: true,\n</span><span class="token prefix inserted">+</span><span class="token line">       skipWaiting: true,\n</span><span class="token prefix inserted">+</span><span class="token line">     }),\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   ],\n</span><span class="token prefix unchanged"> </span><span class="token line">   output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     filename: \'[name].bundle.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">     path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">     clean: true,\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line"> };</span></span></code></pre> <p>이제 <code>npm run build</code>를 수행할 때 어떤 일이 발생하는지 살펴보겠습니다.</p> <pre><code class="hljs language-bash"><span class="token punctuation">..</span>.\n                  Asset       Size  Chunks                    Chunk Names\n          app.bundle.js     <span class="token number">545</span> kB    <span class="token number">0</span>, <span class="token number">1</span>  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  app\n        print.bundle.js    <span class="token number">2.74</span> kB       <span class="token number">1</span>  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>         print\n             index.html  <span class="token number">254</span> bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\nprecache-manifest.b5ca1c555e832d6fbf9462efd29d27eb.js  <span class="token number">268</span> bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n      service-worker.js       <span class="token number">1</span> kB          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n<span class="token punctuation">..</span>.</code></pre> <p>보다시피 <code>service-worker.js</code>와 <code>precache-manifest.b5ca1c555e832d6fbf9462efd29d27eb.js</code>라는 2개의 추가 파일이 생성됩니다. <code>service-worker.js</code>는 서비스 워커 파일이고 <code>precache-manifest.b5ca1c555e832d6fbf9462efd29d27eb.js</code>는 <code>service-worker.js</code>가 실행되기 위해 필요한 파일입니다. 사용자가 생성한 파일은 다를 수 있습니다. 하지만 <code>service-worker.js</code> 파일은 있어야 합니다.</p> <p>이제 서비스 워커를 만들었습니다. 다음 단계는 무엇일까요?</p> <h2 id="registering-our-service-worker">Registering Our Service Worker<a href="#registering-our-service-worker" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>서비스 워커를 등록하여 실행 할 수 있도록 합시다. 아래의 등록 코드를 추가하면 됩니다.</p> <p><strong>index.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> import _ from \'lodash\';\n</span><span class="token prefix unchanged"> </span><span class="token line"> import printMe from \'./print.js\';\n</span></span>\n<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> if (\'serviceWorker\' in navigator) {\n</span><span class="token prefix inserted">+</span><span class="token line">   window.addEventListener(\'load\', () => {\n</span><span class="token prefix inserted">+</span><span class="token line">     navigator.serviceWorker.register(\'/service-worker.js\').then(registration => {\n</span><span class="token prefix inserted">+</span><span class="token line">       console.log(\'SW registered: \', registration);\n</span><span class="token prefix inserted">+</span><span class="token line">     }).catch(registrationError => {\n</span><span class="token prefix inserted">+</span><span class="token line">       console.log(\'SW registration failed: \', registrationError);\n</span><span class="token prefix inserted">+</span><span class="token line">     });\n</span><span class="token prefix inserted">+</span><span class="token line">   });\n</span><span class="token prefix inserted">+</span><span class="token line"> }</span></span></code></pre> <p>한 번 더 <code>npm run build</code>를 통해 등록 코드를 포함한 앱 버전을 빌드합니다. 그런 다음 <code>npm start</code>를 실행합니다. <code>http://localhost:8080</code>로 이동하여 콘솔을 살펴보세요. 어딘가에 다음 내용이 표시됩니다.</p> <pre><code class="hljs language-bash">SW registered</code></pre> <p>이제 테스트해 보겠습니다. 서버를 중지하고 페이지를 새로 고침 합니다. 브라우저가 서비스 워커를 지원하는 경우 애플리케이션을 계속해서 확인할 수 있습니다. 하지만 서비스 워커가 서비스를 제공하는 것이지 서버가 <strong>제공하는 것은 아닙니다.</strong></p> <h2 id="conclusion">Conclusion<a href="#conclusion" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>Workbox 프로젝트를 사용하여 오프라인 앱을 빌드했습니다. 웹 앱을 PWA로 전환하는 여정을 시작했습니다. 이제 더 나아가는 것에 대해 생각할 수 있습니다. 도움이 되는 유용한 리소스는 <a href="https://developers.google.com/web/progressive-web-apps/">여기</a>에서 찾을 수 있습니다.</p> '}}]);