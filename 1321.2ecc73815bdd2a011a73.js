(self.webpackChunk=self.webpackChunk||[]).push([[1321],{1321:function(n,s,a){"use strict";a.r(s),s.default='<p><a href="https://npmjs.com/package/style-loader"><img src="https://img.shields.io/npm/v/style-loader.svg" alt="npm"></a> <a href="https://nodejs.org"><img src="https://img.shields.io/node/v/style-loader.svg" alt="node"></a> <a href="https://david-dm.org/webpack-contrib/style-loader"><img src="https://david-dm.org/webpack-contrib/style-loader.svg" alt="deps"></a> <a href="https://github.com/webpack-contrib/style-loader/actions"><img src="https://github.com/webpack-contrib/style-loader/workflows/style-loader/badge.svg" alt="tests"></a> <a href="https://codecov.io/gh/webpack-contrib/style-loader"><img src="https://codecov.io/gh/webpack-contrib/style-loader/branch/master/graph/badge.svg" alt="coverage"></a> <a href="https://gitter.im/webpack/webpack"><img src="https://badges.gitter.im/webpack/webpack.svg" alt="chat"></a> <a href="https://packagephobia.now.sh/result?p=style-loader"><img src="https://packagephobia.now.sh/badge?p=style-loader" alt="size"></a></p> <p>Inject CSS into the DOM.</p> <h2 id="getting-started">Getting Started<a href="#getting-started" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>To begin, you\'ll need to install <code>style-loader</code>:</p> <pre><code class="hljs language-console">npm install --save-dev style-loader\n</code></pre> <p>It\'s recommended to combine <code>style-loader</code> with the <a href="/loaders/css-loader/"><code>css-loader</code></a></p> <p>Then add the loader to your <code>webpack</code> config. For example:</p> <p><strong>style.css</strong></p> <pre><code class="hljs language-css"><span class="token selector">body</span> <span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <p><strong>component.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> <span class="token string">"./style.css"</span><span class="token punctuation">;</span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"style-loader"</span><span class="token punctuation">,</span> <span class="token string">"css-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="options">Options<a href="#options" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <table> <thead> <tr> <th align="center">Name</th> <th align="center">Type</th> <th align="center">Default</th> <th align="left">Description</th> </tr> </thead> <tbody> <tr> <td align="center" data-th="Name"><span><a href="#injecttype"><strong><code>injectType</code></strong></a></span></td> <td align="center" data-th="Type"><span><code>{String}</code></span></td> <td align="center" data-th="Default"><span><code>styleTag</code></span></td> <td align="left" data-th="Description"><span>Allows to setup how styles will be injected into the DOM</span></td> </tr> <tr> <td align="center" data-th="Name"><span><a href="#attributes"><strong><code>attributes</code></strong></a></span></td> <td align="center" data-th="Type"><span><code>{Object}</code></span></td> <td align="center" data-th="Default"><span><code>{}</code></span></td> <td align="left" data-th="Description"><span>Adds custom attributes to tag</span></td> </tr> <tr> <td align="center" data-th="Name"><span><a href="#insert"><strong><code>insert</code></strong></a></span></td> <td align="center" data-th="Type"><span><code>{String|Function}</code></span></td> <td align="center" data-th="Default"><span><code>head</code></span></td> <td align="left" data-th="Description"><span>Inserts tag at the given position into the DOM</span></td> </tr> <tr> <td align="center" data-th="Name"><span><a href="#styletagtransform"><strong><code>styleTagTransform</code></strong></a></span></td> <td align="center" data-th="Type"><span><code>{String|Function}</code></span></td> <td align="center" data-th="Default"><span><code>undefined</code></span></td> <td align="left" data-th="Description"><span>Transform tag and css when insert \'style\' tag into the DOM</span></td> </tr> <tr> <td align="center" data-th="Name"><span><a href="#base"><strong><code>base</code></strong></a></span></td> <td align="center" data-th="Type"><span><code>{Number}</code></span></td> <td align="center" data-th="Default"><span><code>true</code></span></td> <td align="left" data-th="Description"><span>Sets module ID base (DLLPlugin)</span></td> </tr> <tr> <td align="center" data-th="Name"><span><a href="#esmodule"><strong><code>esModule</code></strong></a></span></td> <td align="center" data-th="Type"><span><code>{Boolean}</code></span></td> <td align="center" data-th="Default"><span><code>true</code></span></td> <td align="left" data-th="Description"><span>Use ES modules syntax</span></td> </tr> </tbody> </table> <h3 id="injecttype"><code>injectType</code><a href="#injecttype" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Type: <code>String</code> Default: <code>styleTag</code></p> <p>Allows to setup how styles will be injected into the DOM.</p> <p>Possible values:</p> <ul> <li><code>styleTag</code></li> <li><code>singletonStyleTag</code></li> <li><code>autoStyleTag</code></li> <li><code>lazyStyleTag</code></li> <li><code>lazySingletonStyleTag</code></li> <li><code>lazyAutoStyleTag</code></li> <li><code>linkTag</code></li> </ul> <h4 id="styletag"><code>styleTag</code><a href="#styletag" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>Automatically injects styles into the DOM using multiple <code>&#x3C;style>&#x3C;/style></code>. It is <strong>default</strong> behaviour.</p> <p><strong>component.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> <span class="token string">"./styles.css"</span><span class="token punctuation">;</span></code></pre> <p>Example with Locals (CSS Modules):</p> <p><strong>component-with-css-modules.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">"./styles.css"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> divElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ndivElement<span class="token punctuation">.</span>className <span class="token operator">=</span> styles<span class="token punctuation">[</span><span class="token string">"my-class"</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre> <p>All locals (class names) stored in imported object.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token comment">// The `injectType`  option can be avoided because it is default behaviour</span>\n          <span class="token punctuation">{</span> loader<span class="token operator">:</span> <span class="token string">"style-loader"</span><span class="token punctuation">,</span> options<span class="token operator">:</span> <span class="token punctuation">{</span> injectType<span class="token operator">:</span> <span class="token string">"styleTag"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>The loader inject styles like:</p> <pre><code class="hljs language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">\n  <span class="token selector">.foo</span> <span class="token punctuation">{</span>\n    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>style</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">\n  <span class="token selector">.bar</span> <span class="token punctuation">{</span>\n    <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>style</span><span class="token punctuation">></span></span></code></pre> <h4 id="singletonstyletag"><code>singletonStyleTag</code><a href="#singletonstyletag" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>Automatically injects styles into the DOM using one <code>&#x3C;style>&#x3C;/style></code>.</p> <blockquote> <p>⚠ Source maps do not work.</p> </blockquote> <p><strong>component.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> <span class="token string">"./styles.css"</span><span class="token punctuation">;</span></code></pre> <p><strong>component-with-css-modules.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">"./styles.css"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> divElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ndivElement<span class="token punctuation">.</span>className <span class="token operator">=</span> styles<span class="token punctuation">[</span><span class="token string">"my-class"</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre> <p>All locals (class names) stored in imported object.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">"style-loader"</span><span class="token punctuation">,</span>\n            options<span class="token operator">:</span> <span class="token punctuation">{</span> injectType<span class="token operator">:</span> <span class="token string">"singletonStyleTag"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>The loader inject styles like:</p> <pre><code class="hljs language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">\n  <span class="token selector">.foo</span> <span class="token punctuation">{</span>\n    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token selector">.bar</span> <span class="token punctuation">{</span>\n    <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>style</span><span class="token punctuation">></span></span></code></pre> <h4 id="autostyletag"><code>autoStyleTag</code><a href="#autostyletag" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>Works the same as a <a href="#styletag"><code>styleTag</code></a>, but if the code is executed in IE6-9, turns on the <a href="#singletonstyletag"><code>singletonStyleTag</code></a> mode.</p> <h4 id="lazystyletag"><code>lazyStyleTag</code><a href="#lazystyletag" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>Injects styles into the DOM using multiple <code>&#x3C;style>&#x3C;/style></code> on demand. We recommend following <code>.lazy.css</code> naming convention for lazy styles and the <code>.css</code> for basic <code>style-loader</code> usage (similar to other file types, i.e. <code>.lazy.less</code> and <code>.less</code>). When you <code>lazyStyleTag</code> value the <code>style-loader</code> injects the styles lazily making them useable on-demand via <code>style.use()</code> / <code>style.unuse()</code>.</p> <blockquote> <p>⚠️ Behavior is undefined when <code>unuse</code> is called more often than <code>use</code>. Don\'t do that.</p> </blockquote> <p><strong>component.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">"./styles.lazy.css"</span><span class="token punctuation">;</span>\n\nstyles<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// For removing styles you can use</span>\n<span class="token comment">// styles.unuse();</span></code></pre> <p><strong>component-with-css-modules.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">"./styles.lazy.css"</span><span class="token punctuation">;</span>\n\nstyles<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> divElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ndivElement<span class="token punctuation">.</span>className <span class="token operator">=</span> styles<span class="token punctuation">.</span>locals<span class="token punctuation">[</span><span class="token string">"my-class"</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre> <p>All locals (class names) stored in <code>locals</code> property of imported object.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        exclude<span class="token operator">:</span> <span class="token regex">/\\.lazy\\.css$/i</span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"style-loader"</span><span class="token punctuation">,</span> <span class="token string">"css-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.lazy\\.css$/i</span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span> loader<span class="token operator">:</span> <span class="token string">"style-loader"</span><span class="token punctuation">,</span> options<span class="token operator">:</span> <span class="token punctuation">{</span> injectType<span class="token operator">:</span> <span class="token string">"lazyStyleTag"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>The loader inject styles like:</p> <pre><code class="hljs language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">\n  <span class="token selector">.foo</span> <span class="token punctuation">{</span>\n    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>style</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">\n  <span class="token selector">.bar</span> <span class="token punctuation">{</span>\n    <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>style</span><span class="token punctuation">></span></span></code></pre> <h4 id="lazysingletonstyletag"><code>lazySingletonStyleTag</code><a href="#lazysingletonstyletag" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>Injects styles into the DOM using one <code>&#x3C;style>&#x3C;/style></code> on demand. We recommend following <code>.lazy.css</code> naming convention for lazy styles and the <code>.css</code> for basic <code>style-loader</code> usage (similar to other file types, i.e. <code>.lazy.less</code> and <code>.less</code>). When you <code>lazySingletonStyleTag</code> value the <code>style-loader</code> injects the styles lazily making them useable on-demand via <code>style.use()</code> / <code>style.unuse()</code>.</p> <blockquote> <p>⚠️ Source maps do not work.</p> </blockquote> <blockquote> <p>⚠️ Behavior is undefined when <code>unuse</code> is called more often than <code>use</code>. Don\'t do that.</p> </blockquote> <p><strong>component.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">"./styles.css"</span><span class="token punctuation">;</span>\n\nstyles<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// For removing styles you can use</span>\n<span class="token comment">// styles.unuse();</span></code></pre> <p><strong>component-with-css-modules.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">"./styles.lazy.css"</span><span class="token punctuation">;</span>\n\nstyles<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> divElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ndivElement<span class="token punctuation">.</span>className <span class="token operator">=</span> styles<span class="token punctuation">.</span>locals<span class="token punctuation">[</span><span class="token string">"my-class"</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre> <p>All locals (class names) stored in <code>locals</code> property of imported object.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        exclude<span class="token operator">:</span> <span class="token regex">/\\.lazy\\.css$/i</span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"style-loader"</span><span class="token punctuation">,</span> <span class="token string">"css-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.lazy\\.css$/i</span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">"style-loader"</span><span class="token punctuation">,</span>\n            options<span class="token operator">:</span> <span class="token punctuation">{</span> injectType<span class="token operator">:</span> <span class="token string">"lazySingletonStyleTag"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>The loader generate this:</p> <pre><code class="hljs language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">\n  <span class="token selector">.foo</span> <span class="token punctuation">{</span>\n    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token selector">.bar</span> <span class="token punctuation">{</span>\n    <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>style</span><span class="token punctuation">></span></span></code></pre> <h4 id="lazyautostyletag"><code>lazyAutoStyleTag</code><a href="#lazyautostyletag" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>Works the same as a <a href="#lazystyletag"><code>lazyStyleTag</code></a>, but if the code is executed in IE6-9, turns on the <a href="#lazysingletonstyletag"><code>lazySingletonStyleTag</code></a> mode.</p> <h4 id="linktag"><code>linkTag</code><a href="#linktag" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>Injects styles into the DOM using multiple <code>&#x3C;link rel="stylesheet" href="path/to/file.css"></code> .</p> <blockquote> <p>ℹ️ The loader will dynamically insert the <code>&#x3C;link href="path/to/file.css" rel="stylesheet"></code> tag at runtime via JavaScript. You should use <a href="/plugins/mini-css-extract-plugin/">MiniCssExtractPlugin</a> if you want to include a static <code>&#x3C;link href="path/to/file.css" rel="stylesheet"></code>.</p> </blockquote> <pre><code class="hljs language-js"><span class="token keyword">import</span> <span class="token string">"./styles.css"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">"./other-styles.css"</span><span class="token punctuation">;</span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.link\\.css$/i</span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span> loader<span class="token operator">:</span> <span class="token string">"style-loader"</span><span class="token punctuation">,</span> options<span class="token operator">:</span> <span class="token punctuation">{</span> injectType<span class="token operator">:</span> <span class="token string">"linkTag"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span> loader<span class="token operator">:</span> <span class="token string">"file-loader"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>The loader generate this:</p> <pre><code class="hljs language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>path/to/style.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>path/to/other-styles.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre> <h3 id="attributes"><code>attributes</code><a href="#attributes" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Type: <code>Object</code> Default: <code>{}</code></p> <p>If defined, the <code>style-loader</code> will attach given attributes with their values on <code>&#x3C;style></code> / <code>&#x3C;link></code> element.</p> <p><strong>component.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> style <span class="token keyword">from</span> <span class="token string">"./file.css"</span><span class="token punctuation">;</span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span> loader<span class="token operator">:</span> <span class="token string">"style-loader"</span><span class="token punctuation">,</span> options<span class="token operator">:</span> <span class="token punctuation">{</span> attributes<span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">"id"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span> loader<span class="token operator">:</span> <span class="token string">"css-loader"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <pre><code class="hljs language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>style</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>style</span><span class="token punctuation">></span></span></code></pre> <h3 id="insert"><code>insert</code><a href="#insert" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Type: <code>String|Function</code> Default: <code>head</code></p> <p>By default, the <code>style-loader</code> appends <code>&#x3C;style></code>/<code>&#x3C;link></code> elements to the end of the style target, which is the <code>&#x3C;head></code> tag of the page unless specified by <code>insert</code>. This will cause CSS created by the loader to take priority over CSS already present in the target. You can use other values if the standard behavior is not suitable for you, but we do not recommend doing this. If you target an <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement">iframe</a> make sure you have sufficient access rights, the styles will be injected into the content document head.</p> <h4 id="string"><code>String</code><a href="#string" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <h5 id="selector"><code>Selector</code><a href="#selector" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h5> <p>Allows to setup custom <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector">query selector</a> where styles inject into the DOM.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">"style-loader"</span><span class="token punctuation">,</span>\n            options<span class="token operator">:</span> <span class="token punctuation">{</span>\n              insert<span class="token operator">:</span> <span class="token string">"body"</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h5 id="absolute-path-to-function"><code>Absolute path to function</code><a href="#absolute-path-to-function" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h5> <p>Allows to setup absolute path to custom function that allows to override default behavior and insert styles at any position.</p> <blockquote> <p>⚠ Do not forget that this code will be used in the browser and not all browsers support latest ECMA features like <code>let</code>, <code>const</code>, <code>arrow function expression</code> and etc. We recommend using <a href="/loaders/babel-loader/"><code>babel-loader</code></a> for support latest ECMA features. ⚠ Do not forget that some DOM methods may not be available in older browsers, we recommended use only <a href="https://caniuse.com/#search=dom%20core">DOM core level 2 properties</a>, but it is depends what browsers you want to support</p> </blockquote> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">"style-loader"</span><span class="token punctuation">,</span>\n            options<span class="token operator">:</span> <span class="token punctuation">{</span>\n              insert<span class="token operator">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"modulePath"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>A new <code>&#x3C;style></code>/<code>&#x3C;link></code> elements will be inserted into at bottom of <code>body</code> tag.</p> <h4 id="function"><code>Function</code><a href="#function" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>Allows to override default behavior and insert styles at any position.</p> <blockquote> <p>⚠ Do not forget that this code will be used in the browser and not all browsers support latest ECMA features like <code>let</code>, <code>const</code>, <code>arrow function expression</code> and etc, we recommend use only ECMA 5 features, but it is depends what browsers you want to support ⚠ Do not forget that some DOM methods may not be available in older browsers, we recommended use only <a href="https://caniuse.com/#search=dom%20core">DOM core level 2 properties</a>, but it is depends what browsers you want to support</p> </blockquote> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">"style-loader"</span><span class="token punctuation">,</span>\n            options<span class="token operator">:</span> <span class="token punctuation">{</span>\n              <span class="token function-variable function">insert</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">insertAtTop</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">var</span> parent <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"head"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token comment">// eslint-disable-next-line no-underscore-dangle</span>\n                <span class="token keyword">var</span> lastInsertedElement <span class="token operator">=</span>\n                  window<span class="token punctuation">.</span>_lastElementInsertedByStyleLoader<span class="token punctuation">;</span>\n\n                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lastInsertedElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                  parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> parent<span class="token punctuation">.</span>firstChild<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>lastInsertedElement<span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                  parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> lastInsertedElement<span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                  parent<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n\n                <span class="token comment">// eslint-disable-next-line no-underscore-dangle</span>\n                window<span class="token punctuation">.</span>_lastElementInsertedByStyleLoader <span class="token operator">=</span> element<span class="token punctuation">;</span>\n              <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>Insert styles at top of <code>head</code> tag.</p> <h3 id="styletagtransform"><code>styleTagTransform</code><a href="#styletagtransform" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Type: <code>String | Function</code> Default: <code>undefined</code></p> <h4 id="string-1"><code>String</code><a href="#string-1" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>Allows to setup absolute path to custom function that allows to override default behavior styleTagTransform.</p> <blockquote> <p>⚠ Do not forget that this code will be used in the browser and not all browsers support latest ECMA features like <code>let</code>, <code>const</code>, <code>arrow function expression</code> and etc, we recommend use only ECMA 5 features, but it is depends what browsers you want to support</p> </blockquote> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">"style-loader"</span><span class="token punctuation">,</span>\n            options<span class="token operator">:</span> <span class="token punctuation">{</span>\n              injectType<span class="token operator">:</span> <span class="token string">"styleTag"</span><span class="token punctuation">,</span>\n              styleTagTransform<span class="token operator">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"module-path"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h4 id="function-1"><code>Function</code><a href="#function-1" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>Transform tag and css when insert \'style\' tag into the DOM.</p> <blockquote> <p>⚠ Do not forget that this code will be used in the browser and not all browsers support latest ECMA features like <code>let</code>, <code>const</code>, <code>arrow function expression</code> and etc, we recommend use only ECMA 5 features, but it is depends what browsers you want to support ⚠ Do not forget that some DOM methods may not be available in older browsers, we recommended use only <a href="https://caniuse.com/#search=dom%20core">DOM core level 2 properties</a>, but it is depends what browsers you want to support</p> </blockquote> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">"style-loader"</span><span class="token punctuation">,</span>\n            options<span class="token operator">:</span> <span class="token punctuation">{</span>\n              injectType<span class="token operator">:</span> <span class="token string">"styleTag"</span><span class="token punctuation">,</span>\n              <span class="token function-variable function">styleTagTransform</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">css<span class="token punctuation">,</span> style</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">// Do something ...</span>\n                style<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>css<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.modify{}\\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n\n                document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>style<span class="token punctuation">)</span><span class="token punctuation">;</span>\n              <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="base"><code>base</code><a href="#base" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>This setting is primarily used as a workaround for <a href="https://github.com/webpack-contrib/style-loader/issues/163">css clashes</a> when using one or more <a href="https://robertknight.me.uk/posts/webpack-dll-plugins/">DllPlugin</a>\'s. <code>base</code> allows you to prevent either the <em>app</em>\'s css (or <em>DllPlugin2</em>\'s css) from overwriting <em>DllPlugin1</em>\'s css by specifying a css module id base which is greater than the range used by <em>DllPlugin1</em> e.g.:</p> <p><strong>webpack.dll1.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"style-loader"</span><span class="token punctuation">,</span> <span class="token string">"css-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p><strong>webpack.dll2.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span> loader<span class="token operator">:</span> <span class="token string">"style-loader"</span><span class="token punctuation">,</span> options<span class="token operator">:</span> <span class="token punctuation">{</span> base<span class="token operator">:</span> <span class="token number">1000</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p><strong>webpack.app.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span> loader<span class="token operator">:</span> <span class="token string">"style-loader"</span><span class="token punctuation">,</span> options<span class="token operator">:</span> <span class="token punctuation">{</span> base<span class="token operator">:</span> <span class="token number">2000</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="esmodule"><code>esModule</code><a href="#esmodule" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Type: <code>Boolean</code> Default: <code>true</code></p> <p>By default, <code>style-loader</code> generates JS modules that use the ES modules syntax. There are some cases in which using ES modules is beneficial, like in the case of <a href="/plugins/module-concatenation-plugin/">module concatenation</a> and <a href="/guides/tree-shaking/">tree shaking</a>.</p> <p>You can enable a CommonJS modules syntax using:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"style-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          esModule<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="examples">Examples<a href="#examples" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <h3 id="recommend">Recommend<a href="#recommend" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>For <code>production</code> builds it\'s recommended to extract the CSS from your bundle being able to use parallel loading of CSS/JS resources later on. This can be achieved by using the <a href="/plugins/mini-css-extract-plugin/">mini-css-extract-plugin</a>, because it creates separate css files. For <code>development</code> mode (including <code>webpack-dev-server</code>) you can use <code>style-loader</code>, because it injects CSS into the DOM using multiple </p><style></style> and works faster.<p></p> <blockquote> <p>i Do not use together <code>style-loader</code> and <code>mini-css-extract-plugin</code>.</p> </blockquote> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"mini-css-extract-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> devMode <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">"production"</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.(sa|sc|c)ss$/</span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          devMode <span class="token operator">?</span> <span class="token string">"style-loader"</span> <span class="token operator">:</span> MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>\n          <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n          <span class="token string">"postcss-loader"</span><span class="token punctuation">,</span>\n          <span class="token string">"sass-loader"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>devMode <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="named-export-for-css-modules">Named export for CSS Modules<a href="#named-export-for-css-modules" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <blockquote> <p>⚠ Names of locals are converted to <code>camelCase</code>.</p> </blockquote> <blockquote> <p>⚠ It is not allowed to use JavaScript reserved words in css class names.</p> </blockquote> <blockquote> <p>⚠ Options <code>esModule</code> and <code>modules.namedExport</code> in <code>css-loader</code> should be enabled.</p> </blockquote> <p><strong>styles.css</strong></p> <pre><code class="hljs language-css"><span class="token selector">.foo-baz</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.bar</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <p><strong>index.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> fooBaz<span class="token punctuation">,</span> bar <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./styles.css"</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fooBaz<span class="token punctuation">,</span> bar<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>You can enable a ES module named export using:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">"style-loader"</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n            options<span class="token operator">:</span> <span class="token punctuation">{</span>\n              modules<span class="token operator">:</span> <span class="token punctuation">{</span>\n                namedExport<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n              <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="source-maps">Source maps<a href="#source-maps" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>The loader automatically inject source maps when previous loader emit them. Therefore, to generate source maps, set the <code>sourceMap</code> option to <code>true</code> for the previous loader.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token string">"style-loader"</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span> loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span> options<span class="token operator">:</span> <span class="token punctuation">{</span> sourceMap<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="nonce">Nonce<a href="#nonce" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>There are two ways to work with <code>nonce</code>:</p> <ul> <li>using the <code>attributes</code> option</li> <li>using the <code>__webpack_nonce__</code> variable</li> </ul> <blockquote> <p>⚠ the <code>attributes</code> option takes precedence over the <code>__webpack_nonce__</code> variable</p> </blockquote> <h4 id="attributes-1"><code>attributes</code><a href="#attributes-1" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p><strong>component.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> <span class="token string">"./style.css"</span><span class="token punctuation">;</span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">"style-loader"</span><span class="token punctuation">,</span>\n            options<span class="token operator">:</span> <span class="token punctuation">{</span>\n              attributes<span class="token operator">:</span> <span class="token punctuation">{</span>\n                nonce<span class="token operator">:</span> <span class="token string">"12345678"</span><span class="token punctuation">,</span>\n              <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>The loader generate:</p> <pre><code class="hljs language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>style</span> <span class="token attr-name">nonce</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>12345678<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">\n  <span class="token selector">.foo</span> <span class="token punctuation">{</span>\n    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>style</span><span class="token punctuation">></span></span></code></pre> <h4 id="__webpack_nonce__"><code>__webpack_nonce__</code><a href="#__webpack_nonce__" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p><strong>create-nonce.js</strong></p> <pre><code class="hljs language-js">__webpack_nonce__ <span class="token operator">=</span> <span class="token string">"12345678"</span><span class="token punctuation">;</span></code></pre> <p><strong>component.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> <span class="token string">"./create-nonce.js"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">"./style.css"</span><span class="token punctuation">;</span></code></pre> <p>Alternative example for <code>require</code>:</p> <p><strong>component.js</strong></p> <pre><code class="hljs language-js">__webpack_nonce__ <span class="token operator">=</span> <span class="token string">"12345678"</span><span class="token punctuation">;</span>\n\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./style.css"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"style-loader"</span><span class="token punctuation">,</span> <span class="token string">"css-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>The loader generate:</p> <pre><code class="hljs language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>style</span> <span class="token attr-name">nonce</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>12345678<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">\n  <span class="token selector">.foo</span> <span class="token punctuation">{</span>\n    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>style</span><span class="token punctuation">></span></span></code></pre> <h4 id="insert-styles-at-top">Insert styles at top<a href="#insert-styles-at-top" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>Inserts styles at top of <code>head</code> tag.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">"style-loader"</span><span class="token punctuation">,</span>\n            options<span class="token operator">:</span> <span class="token punctuation">{</span>\n              <span class="token function-variable function">insert</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">insertAtTop</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">var</span> parent <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"head"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">var</span> lastInsertedElement <span class="token operator">=</span>\n                  window<span class="token punctuation">.</span>_lastElementInsertedByStyleLoader<span class="token punctuation">;</span>\n\n                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lastInsertedElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                  parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> parent<span class="token punctuation">.</span>firstChild<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>lastInsertedElement<span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                  parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> lastInsertedElement<span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                  parent<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n\n                window<span class="token punctuation">.</span>_lastElementInsertedByStyleLoader <span class="token operator">=</span> element<span class="token punctuation">;</span>\n              <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h4 id="insert-styles-before-target-element">Insert styles before target element<a href="#insert-styles-before-target-element" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>Inserts styles before <code>#id</code> element.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">"style-loader"</span><span class="token punctuation">,</span>\n            options<span class="token operator">:</span> <span class="token punctuation">{</span>\n              <span class="token function-variable function">insert</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">insertBeforeAt</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">const</span> parent <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"head"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">const</span> target <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                <span class="token keyword">const</span> lastInsertedElement <span class="token operator">=</span>\n                  window<span class="token punctuation">.</span>_lastElementInsertedByStyleLoader<span class="token punctuation">;</span>\n\n                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lastInsertedElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                  parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>lastInsertedElement<span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                  parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> lastInsertedElement<span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                  parent<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n\n                window<span class="token punctuation">.</span>_lastElementInsertedByStyleLoader <span class="token operator">=</span> element<span class="token punctuation">;</span>\n              <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="contributing">Contributing<a href="#contributing" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>Please take a moment to read our contributing guidelines if you haven\'t yet done so.</p> <p><a href="https://github.com/webpack-contrib/style-loader/blob/master/.github/CONTRIBUTING.md">CONTRIBUTING</a></p> <h2 id="license">License<a href="#license" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><a href="https://github.com/webpack-contrib/style-loader/blob/master/LICENSE">MIT</a></p> '}}]);