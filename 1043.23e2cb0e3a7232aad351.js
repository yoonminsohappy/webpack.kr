(self.webpackChunk=self.webpackChunk||[]).push([[1043],{1043:function(e,a,o){"use strict";o.r(a),a.default='<p>webpack의 <a href="/concepts/loaders">loaders</a>를 사용하면 파일을 전처리 할 수 있습니다. 이렇게 하면 JavaScript를 넘어 모든 정적 리소스를 번들링할 수 있습니다. Node.js를 사용하여 자신만의 로더를 쉽게 작성할 수 있습니다.</p> <p>로더는 <code>require()</code> 구문에서 <code>loadername!</code> 접두사를 사용하거나, webpack 설정에서 정규식을 통해 자동으로 활성화됩니다. <a href="/concepts/loaders/#configuration">configuration</a>을 참고하세요.</p> <h2 id="files">Files<a href="#files" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <ul> <li><a href="/loaders/val-loader"><code>val-loader</code></a>는 코드를 모듈로 실행하고 JS 코드로 내보낼지 고려합니다.</li> <li><a href="https://www.npmjs.com/package/ref-loader"><code>ref-loader</code></a>는 수동으로 파일 간의 의존성을 생성합니다.</li> </ul> <h2 id="json">JSON<a href="#json" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <ul> <li><a href="https://github.com/awnist/cson-loader"><code>cson-loader</code></a>는 <a href="https://github.com/bevry/cson#what-is-cson">CSON</a> 파일을 로드 및 트랜스파일 합니다.</li> </ul> <h2 id="transpiling">Transpiling<a href="#transpiling" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <ul> <li><a href="/loaders/babel-loader"><code>babel-loader</code></a>는 ES2015+ 코드를 로드하고 <a href="https://babeljs.io/">Babel</a>을 사용해 ES5로 트랜스파일 합니다.</li> <li><a href="https://github.com/sairion/buble-loader"><code>buble-loader</code></a>는 ES2015+ 코드를 로드하고 <a href="https://buble.surge.sh/guide/">Bublé</a>를 사용해 ES5로 트랜스파일 합니다.</li> <li><a href="https://github.com/jupl/traceur-loader"><code>traceur-loader</code></a>는 ES2015+ 코드를 로드하고 <a href="https://github.com/google/traceur-compiler#readme">Traceur</a>를 사용해 ES5로 트랜스파일 합니다.</li> <li><a href="https://github.com/TypeStrong/ts-loader"><code>ts-loader</code></a>는 JavaScript처럼 <a href="https://www.typescriptlang.org/">TypeScript</a> 2.0+를 로드합니다.</li> <li><a href="/loaders/coffee-loader"><code>coffee-loader</code></a>는 JavaScript처럼 <a href="http://coffeescript.org/">CoffeeScript</a>를 로드합니다.</li> <li><a href="https://github.com/fengari-lua/fengari-loader/"><code>fengari-loader</code></a>는 <a href="https://fengari.io/">fengari</a>를 사용해 Lua 코드를 로드합니다.</li> <li><a href="https://github.com/elm-community/elm-webpack-loader"><code>elm-webpack-loader</code></a>는 JavaScript처럼 <a href="https://elm-lang.org/">Elm</a>을 로드합니다.</li> </ul> <h2 id="templating">Templating<a href="#templating" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <ul> <li><a href="/loaders/html-loader"><code>html-loader</code></a>는 HTML을 문자열로 내보내고, 정적 리소스에 대한 참조가 필요합니다.</li> <li><a href="https://github.com/pugjs/pug-loader"><code>pug-loader</code></a>는 Pug 그리고 Jade 템플릿을 로드하고 함수를 반환합니다.</li> <li><a href="https://github.com/peerigon/markdown-loader"><code>markdown-loader</code></a>는 마크다운을 HTML로 컴파일합니다.</li> <li><a href="https://github.com/javiercf/react-markdown-loader"><code>react-markdown-loader</code></a>는 markdown-parse 파서를 사용해 마크다운을 React Component로 컴파일합니다.</li> <li><a href="https://github.com/posthtml/posthtml-loader"><code>posthtml-loader</code></a>는 <a href="https://github.com/posthtml/posthtml">PostHTML</a>을 사용해 HTML 파일을 로드하고 변환합니다.</li> <li><a href="https://github.com/pcardune/handlebars-loader"><code>handlebars-loader</code></a>는 Handlebars를 HTML로 컴파일합니다.</li> <li><a href="https://github.com/asnowwolf/markup-inline-loader"><code>markup-inline-loader</code></a>는 인라인 SVG/MathML 파일을 HTML로 변환합니다. 아이콘 폰트를 적용하거나 SVG에 CSS 애니메이션을 적용할 때 유용합니다.</li> <li><a href="https://github.com/zimmo-be/twig-loader"><code>twig-loader</code></a>는 Twig 템플릿을 컴파일하고 함수를 반환합니다.</li> <li><a href="https://github.com/webpack-contrib/remark-loader"><code>remark-loader</code></a>는 빌트인 이미지 해상도로 <code>remark</code>를 통해 마크다운을 로드합니다.</li> </ul> <h2 id="styling">Styling<a href="#styling" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <ul> <li><a href="/loaders/style-loader"><code>style-loader</code></a>는 DOM에 스타일로 모듈 내보내기를 추가합니다.</li> <li><a href="/loaders/css-loader"><code>css-loader</code></a>는 리졸브된 가져오기로 CSS 파일을 로드하고 CSS 코드를 반환합니다.</li> <li><a href="/loaders/less-loader"><code>less-loader</code></a>는 LESS 파일을 로드하고 컴파일합니다.</li> <li><a href="/loaders/sass-loader"><code>sass-loader</code></a>는 SASS/SCSS 파일을 로드하고 컴파일합니다.</li> <li><a href="/loaders/postcss-loader"><code>postcss-loader</code></a>는 <a href="http://postcss.org">PostCSS</a> 을 사용해 CSS/SSS 파일을 로드하고 변환합니다.</li> <li><a href="/loaders/stylus-loader/"><code>stylus-loader</code></a>는 Stylus 파일을 로드하고 컴파일합니다.</li> </ul> <h2 id="testing">Testing<a href="#testing" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <ul> <li><a href="/loaders/mocha-loader"><code>mocha-loader</code></a>는 <a href="https://mochajs.org/">mocha</a>를 사용해 테스트합니다(Browser/NodeJS).</li> </ul> <h2 id="frameworks">Frameworks<a href="#frameworks" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <ul> <li><a href="https://github.com/vuejs/vue-loader"><code>vue-loader</code></a>는 <a href="https://vuejs.org/v2/guide/components.html">Vue Components</a>를 로드하고 컴파일합니다.</li> <li><a href="https://github.com/TheLarkInn/angular2-template-loader"><code>angular2-template-loader</code></a>는 <a href="https://angular.io/">Angular</a> 컴포넌트를 로드하고 컴파일합니다.</li> </ul> <h2 id="awesome">Awesome<a href="#awesome" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>더 많은 써드 파티 로더는, <a href="https://github.com/webpack-contrib/awesome-webpack#loaders">awesome-webpack</a>의 목록을 참고하세요.</p> '}}]);