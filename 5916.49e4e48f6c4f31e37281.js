"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5916],{5916:function(n,s,a){a.r(s),s.default='<aside class="tip"><h6 class="tip__prefix">tip</h6><p>이 가이드는 <a href="/guides/development">개발 가이드</a>에 있는 코드 예제를 확장합니다.</p></aside> <p>Hot Module Replacement(또는 HMR)는 webpack에서 제공하는 가장 유용한 기능 중 하나입니다. 모든 종류의 모듈을 새로고침 할 필요 없이 런타임에 업데이트 할 수 있습니다. 이 페이지는 <strong>구현에</strong> 초점을 맞추고 <a href="/concepts/hot-module-replacement">개념 페이지</a>는 작동 원리와 왜 유용한지에 대한 자세한 내용을 제공합니다.</p> <aside class="warning"><h6 class="warning__prefix">warning</h6><p><strong>HMR</strong>은 프로덕션용이 아니므로 개발용으로만 사용해야 합니다. 자세한 내용은 <a href="/guides/production">프로덕션 구축 가이드</a>를 참고하세요.</p></aside> <h2 id="enabling-hmr">Enabling HMR<a href="#enabling-hmr" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>이 기능은 생산성에 많은 도움을 줍니다. <a href="https://github.com/webpack/webpack-dev-server">webpack-dev-server</a> 설정을 업데이트하고 webpack의 내장 HMR 플러그인을 사용하면 됩니다. <code>index.js</code> 모듈에서 사용될 것이므로 <code>print.js</code>의 엔트리 포인트도 제거합니다.</p> <aside class="tip"><h6 class="tip__prefix">tip</h6><p><code>webpack-dev-server</code> 대신 <code>webpack-dev-middleware</code>를 사용한다면 <a href="https://github.com/webpack-contrib/webpack-hot-middleware"><code>webpack-hot-middleware</code></a> 패키지를 사용하여 커스텀 서버 또는 애플리케이션에서 HMR을 활성화하세요.</p></aside> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const path = require(\'path\');\n</span><span class="token prefix unchanged"> </span><span class="token line"> const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">   entry: {\n</span><span class="token prefix unchanged"> </span><span class="token line">      app: \'./src/index.js\',\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">      print: \'./src/print.js\',\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line">   devtool: \'inline-source-map\',\n</span><span class="token prefix unchanged"> </span><span class="token line">   devServer: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     contentBase: \'./dist\',\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     hot: true,\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line">   plugins: [\n</span><span class="token prefix unchanged"> </span><span class="token line">     new HtmlWebpackPlugin({\n</span><span class="token prefix unchanged"> </span><span class="token line">       title: \'Hot Module Replacement\',\n</span><span class="token prefix unchanged"> </span><span class="token line">     }),\n</span><span class="token prefix unchanged"> </span><span class="token line">   ],\n</span><span class="token prefix unchanged"> </span><span class="token line">   output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     filename: \'[name].bundle.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">     path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">     clean: true,\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line"> };</span></span></code></pre> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>CLI를 사용하여 <code>webpack serve --hot = only</code> 명령어로 <a href="https://github.com/webpack/webpack-dev-server">webpack-dev-server</a> 구성을 수정할 수 있습니다.</p></aside> <p>이제 <code>index.js</code> 파일을 업데이트하여 <code>print.js</code> 내부의 변경이 감지되면 webpack에서 업데이트된 모듈을 수락하도록 지시합니다.</p> <p><strong>index.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> import _ from \'lodash\';\n</span><span class="token prefix unchanged"> </span><span class="token line"> import printMe from \'./print.js\';\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> function component() {\n</span><span class="token prefix unchanged"> </span><span class="token line">   const element = document.createElement(\'div\');\n</span><span class="token prefix unchanged"> </span><span class="token line">   const btn = document.createElement(\'button\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   btn.innerHTML = \'Click me and check the console!\';\n</span><span class="token prefix unchanged"> </span><span class="token line">   btn.onclick = printMe;\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   element.appendChild(btn);\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   return element;\n</span><span class="token prefix unchanged"> </span><span class="token line"> }\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> document.body.appendChild(component());\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">\n</span><span class="token prefix inserted">+</span><span class="token line"> if (module.hot) {\n</span><span class="token prefix inserted">+</span><span class="token line">   module.hot.accept(\'./print.js\', function() {\n</span><span class="token prefix inserted">+</span><span class="token line">     console.log(\'Accepting the updated printMe module!\');\n</span><span class="token prefix inserted">+</span><span class="token line">     printMe();\n</span><span class="token prefix inserted">+</span><span class="token line">   })\n</span><span class="token prefix inserted">+</span><span class="token line"> }</span></span></code></pre> <p><code>print.js</code>에서 <code>console.log</code> 문을 변경하면 브라우저 콘솔에 다음과 같은 출력이 표시됩니다. (당분간 <code>button.onclick = printMe</code> 출력에 대해 걱정하지 마세요. 나중에 해당 부분을 변경할 것입니다.)</p> <p><strong>print.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> export default function printMe() {\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">   console.log(\'I get called from print.js!\');\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   console.log(\'Updating print.js...\');\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> }</span></span></code></pre> <p><strong>console</strong></p> <pre><code class="hljs language-diff">[HMR] Waiting for update signal from WDS...\nmain.js:4395 [WDS] Hot Module Replacement enabled.\n<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> 2main.js:4395 [WDS] App updated. Recompiling...\n</span><span class="token prefix inserted">+</span><span class="token line"> main.js:4395 [WDS] App hot update...\n</span><span class="token prefix inserted">+</span><span class="token line"> main.js:4330 [HMR] Checking for updates on the server...\n</span><span class="token prefix inserted">+</span><span class="token line"> main.js:10024 Accepting the updated printMe module!\n</span><span class="token prefix inserted">+</span><span class="token line"> 0.4b8ee77….hot-update.js:10 Updating print.js...\n</span><span class="token prefix inserted">+</span><span class="token line"> main.js:4330 [HMR] Updated modules:\n</span><span class="token prefix inserted">+</span><span class="token line"> main.js:4330 [HMR]  - 20</span></span></code></pre> <h2 id="via-the-nodejs-api">Via the Node.js API<a href="#via-the-nodejs-api" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>Node.js API와 함께 Webpack Dev Server를 사용하는 경우 webpack 설정 객체에 dev 서버 옵션을 추가하지 마십시오. 대신 생성 시 두 번째 매개 변수로 전달하십시오. 예를 들어 보겠습니다.</p> <p><code>new WebpackDevServer(compiler, options)</code></p> <p>HMR을 활성화하려면 HMR 엔트리 포인트를 포함하도록 webpack 설정 객체도 수정해야 합니다. <code>webpack-dev-server</code> 패키지에는 이를 수행하는 데 사용할 수 있는 <code>addDevServerEntrypoints</code>라는 메서드가 포함되어 있습니다. 다음은 그 모습에 대한 간단한 예시입니다.</p> <p><strong>dev-server.js</strong></p> <pre><code class="hljs language-javascript"><span class="token keyword">const</span> webpackDevServer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack-dev-server\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./webpack.config.js\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>\n  contentBase<span class="token operator">:</span> <span class="token string">\'./dist\'</span><span class="token punctuation">,</span>\n  hot<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  host<span class="token operator">:</span> <span class="token string">\'localhost\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nwebpackDevServer<span class="token punctuation">.</span><span class="token function">addDevServerEntrypoints</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> compiler <span class="token operator">=</span> <span class="token function">webpack</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">webpackDevServer</span><span class="token punctuation">(</span>compiler<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nserver<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">,</span> <span class="token string">\'localhost\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'dev server listening on port 5000\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <aside class="tip"><h6 class="tip__prefix">tip</h6><p><a href="/guides/development/#using-webpack-dev-middleware"><code>webpack-dev-middleware</code> 사용</a>의 경우 <a href="https://github.com/webpack-contrib/webpack-hot-middleware"><code>webpack-hot-middleware</code></a> 패키지를 사용하여 커스텀 개발 서버에서 HMR을 활성화합니다.</p></aside> <h2 id="gotchas">Gotchas<a href="#gotchas" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>Hot Module Replacement는 까다로울 수 있습니다. 이를 보여주기 위해 작업 예제로 돌아갑시다. 계속해서 예제 페이지의 버튼을 클릭하면 콘솔이 이전 <code>printMe</code> 함수를 인쇄하고 있음을 알 수 있습니다.</p> <p>이것은 버튼의 <code>onclick</code> 이벤트 핸들러가 여전히 원래의 <code>printMe</code> 함수에 바인딩 되어 있기 때문에 발생합니다.</p> <p>HMR에서 이 작업을 수행하려면 <code>module.hot.accept</code>를 사용하여 새 <code>printMe</code> 함수에 대한 바인딩을 업데이트해야 합니다.</p> <p><strong>index.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> import _ from \'lodash\';\n</span><span class="token prefix unchanged"> </span><span class="token line"> import printMe from \'./print.js\';\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> function component() {\n</span><span class="token prefix unchanged"> </span><span class="token line">   const element = document.createElement(\'div\');\n</span><span class="token prefix unchanged"> </span><span class="token line">   const btn = document.createElement(\'button\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   btn.innerHTML = \'Click me and check the console!\';\n</span><span class="token prefix unchanged"> </span><span class="token line">   btn.onclick = printMe;  // onclick 이벤트는 원래 printMe 함수에 바인딩 됩니다.\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   element.appendChild(btn);\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   return element;\n</span><span class="token prefix unchanged"> </span><span class="token line"> }\n</span></span>\n<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> document.body.appendChild(component());\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> let element = component(); // print.js 변경 시 다시 렌더링할 요소 저장\n</span><span class="token prefix inserted">+</span><span class="token line"> document.body.appendChild(element);\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> if (module.hot) {\n</span><span class="token prefix unchanged"> </span><span class="token line">   module.hot.accept(\'./print.js\', function() {\n</span><span class="token prefix unchanged"> </span><span class="token line">     console.log(\'Accepting the updated printMe module!\');\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">     printMe();\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     document.body.removeChild(element);\n</span><span class="token prefix inserted">+</span><span class="token line">     element = component(); // 클릭 핸들러를 업데이트하려면 "component"를 다시 렌더링하십시오.\n</span><span class="token prefix inserted">+</span><span class="token line">     document.body.appendChild(element);\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   })\n</span><span class="token prefix unchanged"> </span><span class="token line"> }</span></span></code></pre> <p>이것은 하나의 예시일 뿐이지만 사람들이 실수할 수 있는 상황이 많이 있습니다. 운 좋게도 Hot Module Replacement를 훨씬 쉽게 만들어주는 많은 로더가 있습니다. (그중 일부는 아래에 언급됨).</p> <h2 id="hmr-with-stylesheets">HMR with Stylesheets<a href="#hmr-with-stylesheets" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>CSS Hot Module Replacement는 실제로 <code>style-loader</code>의 도움으로 상당히 간단합니다. 이 로더는 CSS 의존성이 업데이트될 때 <code>&#x3C;style></code>태그를 패치하기 위해 백그라운드에서 <code>module.hot.accept</code>를 사용합니다.</p> <p>먼저 다음 명령으로 두 로더를 모두 설치해 보겠습니다.</p> <pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev style-loader css-loader</code></pre> <p>이제 로더를 사용하도록 설정 파일을 업데이트 하겠습니다.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const path = require(\'path\');\n</span><span class="token prefix unchanged"> </span><span class="token line"> const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">   entry: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     app: \'./src/index.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line">   devtool: \'inline-source-map\',\n</span><span class="token prefix unchanged"> </span><span class="token line">   devServer: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     contentBase: \'./dist\',\n</span><span class="token prefix unchanged"> </span><span class="token line">     hot: true,\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   module: {\n</span><span class="token prefix inserted">+</span><span class="token line">     rules: [\n</span><span class="token prefix inserted">+</span><span class="token line">       {\n</span><span class="token prefix inserted">+</span><span class="token line">         test: /\\.css$/,\n</span><span class="token prefix inserted">+</span><span class="token line">         use: [\'style-loader\', \'css-loader\'],\n</span><span class="token prefix inserted">+</span><span class="token line">       },\n</span><span class="token prefix inserted">+</span><span class="token line">     ],\n</span><span class="token prefix inserted">+</span><span class="token line">   },\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   plugins: [\n</span><span class="token prefix unchanged"> </span><span class="token line">     new HtmlWebpackPlugin({\n</span><span class="token prefix unchanged"> </span><span class="token line">       title: \'Hot Module Replacement\',\n</span><span class="token prefix unchanged"> </span><span class="token line">     }),\n</span><span class="token prefix unchanged"> </span><span class="token line">   ],\n</span><span class="token prefix unchanged"> </span><span class="token line">   output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     filename: \'[name].bundle.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">     path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">     clean: true,\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line"> };</span></span></code></pre> <p>스타일 시트 핫 로딩은 모듈로 가져오는 것만큼 쉽습니다.</p> <p><strong>project</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> webpack-demo\n</span><span class="token prefix unchanged"> </span><span class="token line"> | - package.json\n</span><span class="token prefix unchanged"> </span><span class="token line"> | - webpack.config.js\n</span><span class="token prefix unchanged"> </span><span class="token line"> | - /dist\n</span><span class="token prefix unchanged"> </span><span class="token line">   | - bundle.js\n</span><span class="token prefix unchanged"> </span><span class="token line"> | - /src\n</span><span class="token prefix unchanged"> </span><span class="token line">   | - index.js\n</span><span class="token prefix unchanged"> </span><span class="token line">   | - print.js\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   | - styles.css</span></span></code></pre> <p><strong>styles.css</strong></p> <pre><code class="hljs language-css"><span class="token selector">body</span> <span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <p><strong>index.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> import _ from \'lodash\';\n</span><span class="token prefix unchanged"> </span><span class="token line"> import printMe from \'./print.js\';\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> import \'./styles.css\';\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> function component() {\n</span><span class="token prefix unchanged"> </span><span class="token line">   const element = document.createElement(\'div\');\n</span><span class="token prefix unchanged"> </span><span class="token line">   const btn = document.createElement(\'button\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   btn.innerHTML = \'Click me and check the console!\';\n</span><span class="token prefix unchanged"> </span><span class="token line">   btn.onclick = printMe;  // onclick 이벤트는 원래 printMe 함수에 바인딩 됩니다.\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   element.appendChild(btn);\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   return element;\n</span><span class="token prefix unchanged"> </span><span class="token line"> }\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> let element = component();\n</span><span class="token prefix unchanged"> </span><span class="token line"> document.body.appendChild(element);\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> if (module.hot) {\n</span><span class="token prefix unchanged"> </span><span class="token line">   module.hot.accept(\'./print.js\', function() {\n</span><span class="token prefix unchanged"> </span><span class="token line">     console.log(\'Accepting the updated printMe module!\');\n</span><span class="token prefix unchanged"> </span><span class="token line">     document.body.removeChild(element);\n</span><span class="token prefix unchanged"> </span><span class="token line">     element = component(); // 클릭 핸들러를 업데이트하려면 "component"를 다시 렌더링하십시오.\n</span><span class="token prefix unchanged"> </span><span class="token line">     document.body.appendChild(element);\n</span><span class="token prefix unchanged"> </span><span class="token line">   })\n</span><span class="token prefix unchanged"> </span><span class="token line"> }\n</span></span></code></pre> <p><code>body</code>의 스타일을 <code>background : red;</code>로 변경하면 새로고침 없이도 페이지의 배경색이 변경되는 것을 즉시 확인할 수 있습니다.</p> <p><strong>styles.css</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> body {\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">   background: blue;\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   background: red;\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> }</span></span></code></pre> <h2 id="other-code-and-frameworks">Other Code and Frameworks<a href="#other-code-and-frameworks" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>HMR이 다양한 프레임워크 및 라이브러리와 원활하게 상호 작용할 수 있도록 커뮤니티에는 다른 많은 로더와 예제가 있습니다.</p> <ul> <li><a href="https://github.com/gaearon/react-hot-loader">React Hot Loader</a>: 실시간으로 React 컴포넌트를 조정</li> <li><a href="https://github.com/vuejs/vue-loader">Vue Loader</a>: Vue 캄포넌트에 대한 HMR을 즉시 지원하는 로더</li> <li><a href="https://github.com/klazuka/elm-hot-webpack-loader">Elm Hot webpack Loader</a>: Elm 프로그래밍 언어에 대한 HMR 지원</li> <li><a href="https://github.com/gdi2290/angular-hmr">Angular HMR</a>: 로더가 필요 없습니다! 기본 NgModule 파일을 간단히 변경하면 HMR API를 완전히 제어 할 수 있습니다.</li> <li><a href="https://github.com/sveltejs/svelte-loader">Svelte Loader</a>: Svelte 컴포넌트에 대한 HMR을 즉시 지원하는 로더</li> </ul> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>HMR을 돕거나 향상시키는 다른 로더나 플러그인을 알고 있다면 pull request를 제출하여 이 목록에 추가해주세요!</p></aside> '}}]);