"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3997],{3997:function(n,s,a){a.r(s),s.default='<aside class="tip"><h6 class="tip__prefix">tip</h6><p>이 가이드는 <a href="/guides/output-management">출력 관리</a> 가이드에 있는 코드 예제를 확장합니다.</p></aside> <p>가이드를 차례대로 따라왔다면, webpack 기본 사양 중 일부를 확실히 이해하고 있을 것입니다. 계속하기 전 우리의 삶을 좀 더 편안하게 만들 개발 환경 설정을 살펴보겠습니다.</p> <aside class="warning"><h6 class="warning__prefix">warning</h6><p>이 가이드의 도구는 <strong>오직 개발을 위한 것입니다</strong>, 프로덕션에서 사용하는 것을 <strong>피하세요!</strong></p></aside> <p>먼저 <a href="/configuration/mode/#mode-development"><code>mode</code>를 <code>\'development\'</code>로</a> 설정하고 <code>title</code>을 <code>\'Development\'</code>로 설정해보겠습니다.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const path = require(\'path\');\n</span><span class="token prefix unchanged"> </span><span class="token line">const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">module.exports = {\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  mode: \'development\',\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  entry: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    index: \'./src/index.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">    print: \'./src/print.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  plugins: [\n</span><span class="token prefix unchanged"> </span><span class="token line">    new HtmlWebpackPlugin({\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">      title: \'Output Management\',\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">      title: \'Development\',\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">    }),\n</span><span class="token prefix unchanged"> </span><span class="token line">  ],\n</span><span class="token prefix unchanged"> </span><span class="token line">  output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    filename: \'[name].bundle.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">    path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">    clean: true,\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">};</span></span></code></pre> <h2 id="using-source-maps">Using source maps<a href="#using-source-maps" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>webpack이 소스 코드를 번들로 묶을 때, 오류와 경고의 원래 위치를 추적하기 어려울 수 있습니다. 예를 들어, 세 개의 소스 파일(<code>a.js</code>, <code>b.js</code>, 그리고 <code>c.js</code>)을 하나의 번들로 묶고 하나의 소스 파일이 오류가 있는 경우, 스택 추적은 단순히 <code>bundle.js</code>를 가리킵니다. 오류가 발생한 소스 파일을 정확히 알고 싶기 때문에 항상 도움이 되는 것은 아닙니다.</p> <p>오류와 경고를 쉽게 추적할 수 있도록, JavaScript는 컴파일된 코드를 원래 소스로 매핑하는 <a href="http://blog.teamtreehouse.com/introduction-source-maps">소스맵</a>을 제공합니다. <code>b.js</code>에서 오류가 발생한 경우, 소스맵에서 정확히 알려줍니다.</p> <p>소스맵과 관련하여 사용할 수 있는 <a href="/configuration/devtool">다른 옵션</a>이 많이 있습니다. 필요에 따라 설정할 수 있도록 확인하세요.</p> <p>이 가이드에서는, 프로덕션에는 적합하지 않지만 설명 목적으로 유용한 <code>inline-source-map</code> 옵션을 사용하겠습니다.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const path = require(\'path\');\n</span><span class="token prefix unchanged"> </span><span class="token line">const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">  mode: \'development\',\n</span><span class="token prefix unchanged"> </span><span class="token line">  entry: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    index: \'./src/index.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">    print: \'./src/print.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  devtool: \'inline-source-map\',\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  plugins: [\n</span><span class="token prefix unchanged"> </span><span class="token line">    new HtmlWebpackPlugin({\n</span><span class="token prefix unchanged"> </span><span class="token line">      title: \'Development\',\n</span><span class="token prefix unchanged"> </span><span class="token line">    }),\n</span><span class="token prefix unchanged"> </span><span class="token line">  ],\n</span><span class="token prefix unchanged"> </span><span class="token line">  output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    filename: \'[name].bundle.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">    path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">    clean: true,\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">};</span></span></code></pre> <p>이제 디버깅할 내용이 있는지 확인하고, <code>print.js</code> 파일에 오류를 생성해 보겠습니다.</p> <p><strong>src/print.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">export default function printMe() {\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">  console.log(\'I get called from print.js!\');\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  cosnole.log(\'I get called from print.js!\');\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">}</span></span></code></pre> <p><code>npm run build</code>를 실행하면, 다음과 같이 컴파일됩니다.</p> <pre><code class="hljs language-bash"><span class="token punctuation">..</span>.\n<span class="token punctuation">[</span>webpack-cli<span class="token punctuation">]</span> Compilation finished\nasset index.bundle.js <span class="token number">1.38</span> MiB <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: index<span class="token punctuation">)</span>\nasset print.bundle.js <span class="token number">6.25</span> KiB <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: print<span class="token punctuation">)</span>\nasset index.html <span class="token number">272</span> bytes <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\nruntime modules <span class="token number">1.9</span> KiB <span class="token number">9</span> modules\ncacheable modules <span class="token number">530</span> KiB\n  ./src/index.js <span class="token number">406</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n  ./src/print.js <span class="token number">83</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n  ./node_modules/lodash/lodash.js <span class="token number">530</span> KiB <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\nwebpack <span class="token number">5.4</span>.0 compiled successfully <span class="token keyword">in</span> <span class="token number">706</span> ms</code></pre> <p>이제 브라우저에서 <code>index.html</code> 파일을 엽니다. 버튼을 클릭하고, 오류가 표시된 콘솔을 확인합니다. 오류는 다음과 같이 표시되어야 합니다.</p> <pre><code class="hljs language-bash">Uncaught ReferenceError: cosnole is not defined\n   at HTMLButtonElement.printMe <span class="token punctuation">(</span>print.js:2<span class="token punctuation">)</span></code></pre> <p>오류에서 오류가 발생 한 파일(<code>print.js</code>)과 줄 번호(2)에 대한 참조도 포함되어 있음을 알 수 있습니다. 이제 문제를 해결하기 위해 어디를 봐야 하는지 정확히 알 수 있습니다.</p> <h2 id="choosing-a-development-tool">Choosing a Development Tool<a href="#choosing-a-development-tool" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <aside class="warning"><h6 class="warning__prefix">warning</h6><p>일부 텍스트 편집기에는 다음 도구 중 일부를 방해할 수 있는 "안전한 쓰기" 기능이 있습니다. 이런 문제에 대한 해결책은 <a href="#adjusting-your-text-editor">텍스트 편집기 조정</a>을 참고하십시오.</p></aside> <p>코드를 컴파일할 때마다 <code>npm run build</code>를 수동으로 실행하는 것은 번거롭습니다.</p> <p>webpack에는 코드가 변경될 때마다 자동으로 컴파일하는 데 도움이 되는 몇 가지 옵션이 있습니다.</p> <ol> <li>webpack의 <a href="/configuration/watch/#watch">watch 모드</a></li> <li><a href="https://github.com/webpack/webpack-dev-server">webpack-dev-server</a></li> <li><a href="https://github.com/webpack/webpack-dev-middleware">webpack-dev-middleware</a></li> </ol> <p>대부분의 경우, <code>webpack-dev-server</code>를 사용하고 싶겠지만, 위의 모든 옵션을 살펴보겠습니다.</p> <h3 id="using-watch-mode">Using Watch Mode<a href="#using-watch-mode" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>webpack이 디펜던시 그래프 내의 모든 파일에서의 변경사항을 "감시"하도록 지시할 수 있습니다. 이런 파일 중 하나가 업데이트되면, 코드가 다시 컴파일되므로 전체 빌드를 수동으로 실행할 필요가 없습니다.</p> <p>webpack의 watch 모드를 시작하는 npm 스크립트를 추가해 보겠습니다.</p> <p><strong>package.json</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">{\n</span><span class="token prefix unchanged"> </span><span class="token line">  "name": "webpack-demo",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "version": "1.0.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "description": "",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "private": true,\n</span><span class="token prefix unchanged"> </span><span class="token line">  "scripts": {\n</span><span class="token prefix unchanged"> </span><span class="token line">    "test": "echo \\"Error: no test specified\\" &#x26;&#x26; exit 1",\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    "watch": "webpack --watch",\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">    "build": "webpack"\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  "keywords": [],\n</span><span class="token prefix unchanged"> </span><span class="token line">  "author": "",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "license": "ISC",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "devDependencies": {\n</span><span class="token prefix unchanged"> </span><span class="token line">    "html-webpack-plugin": "^4.5.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">    "webpack": "^5.4.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">    "webpack-cli": "^4.2.0"\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  "dependencies": {\n</span><span class="token prefix unchanged"> </span><span class="token line">    "lodash": "^4.17.20"\n</span><span class="token prefix unchanged"> </span><span class="token line">  }\n</span><span class="token prefix unchanged"> </span><span class="token line">}</span></span></code></pre> <p>커멘드 라인에서 <code>npm run watch</code>를 실행하고 webpack이 코드를 컴파일하는 방법을 확인하세요. 스크립트가 현재 파일을 감시하고 있기 때문에 커멘드 라인을 종료하지 않은 것을 확인할 수 있습니다.</p> <p>이제, webpack이 파일을 감시하는 동안, 앞에서 소개한 오류를 제거해 보겠습니다.</p> <p><strong>src/print.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">export default function printMe() {\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">  cosnole.log(\'I get called from print.js!\');\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  console.log(\'I get called from print.js!\');\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">}</span></span></code></pre> <p>이제 파일을 저장하고 터미널 창을 확인하십시오. webpack이 변경된 모듈을 자동으로 재컴파일하는 것을 볼 수 있습니다!</p> <p>유일한 단점은 변경사항을 확인하려면 브라우저를 새로 고침해야 한다는 것입니다. 이것이 자동으로 된다면 더 좋을 것이므로, <code>webpack-dev-server</code>를 사용해 봅시다.</p> <h3 id="using-webpack-dev-server">Using webpack-dev-server<a href="#using-webpack-dev-server" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>webpack-dev-server</code>는 간단한 웹 서버와 실시간 다시 로딩 기능을 제공합니다. 설정해보겠습니다.</p> <pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev webpack-dev-server</code></pre> <p>설정 파일을 변경하여 개발 서버에 파일을 찾을 위치를 알려줍니다.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const path = require(\'path\');\n</span><span class="token prefix unchanged"> </span><span class="token line">const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">  mode: \'development\',\n</span><span class="token prefix unchanged"> </span><span class="token line">  entry: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    index: \'./src/index.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">    print: \'./src/print.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  devtool: \'inline-source-map\',\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  devServer: {\n</span><span class="token prefix inserted">+</span><span class="token line">    contentBase: \'./dist\',\n</span><span class="token prefix inserted">+</span><span class="token line">  },\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  plugins: [\n</span><span class="token prefix unchanged"> </span><span class="token line">    new HtmlWebpackPlugin({\n</span><span class="token prefix unchanged"> </span><span class="token line">      title: \'Development\',\n</span><span class="token prefix unchanged"> </span><span class="token line">    }),\n</span><span class="token prefix unchanged"> </span><span class="token line">  ],\n</span><span class="token prefix unchanged"> </span><span class="token line">  output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    filename: \'[name].bundle.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">    path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">    clean: true,\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">};</span></span></code></pre> <p>이것은 <code>webpack-dev-server</code>에게 <code>dist</code> 디렉터리의 파일을 <code>localhost:8080</code>에서 제공하도록 합니다.</p> <aside class="tip"><h6 class="tip__prefix">tip</h6><p><code>webpack-dev-server</code>는 <a href="/configuration/output/#outputpath"><code>output.path</code></a>에 정의된 디렉터리에서 번들된 파일을 제공합니다. 예를 들면, 파일은 <code>http://[devServer.host]:[devServer.port]/[output.publicPath]/[output.filename]</code> 주소로 사용할 수 있습니다.</p></aside> <aside class="warning"><h6 class="warning__prefix">warning</h6><p>webpack-dev-server는 컴파일 후 출력 파일을 작성하지 않습니다. 대신 번들 파일을 메모리에 보관하고 서버의 루트 경로에 마운트 된 실제 파일인 것처럼 제공합니다. 페이지가 다른 경로에서 번들 파일을 찾을 것으로 예상하는 경우 개발 서버 설정에서 <a href="/configuration/dev-server/#devserverpublicpath-"><code>publicPath</code></a> 옵션을 사용하여 변경할 수 있습니다.</p></aside> <p>개발 서버를 쉽게 실행할 수 있는 스크립트를 추가해보겠습니다.</p> <p><strong>package.json</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">{\n</span><span class="token prefix unchanged"> </span><span class="token line">  "name": "webpack-demo",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "version": "1.0.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "description": "",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "private": true,\n</span><span class="token prefix unchanged"> </span><span class="token line">  "scripts": {\n</span><span class="token prefix unchanged"> </span><span class="token line">    "test": "echo \\"Error: no test specified\\" &#x26;&#x26; exit 1",\n</span><span class="token prefix unchanged"> </span><span class="token line">    "watch": "webpack --watch",\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    "start": "webpack serve --open",\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">    "build": "webpack"\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  "keywords": [],\n</span><span class="token prefix unchanged"> </span><span class="token line">  "author": "",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "license": "ISC",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "devDependencies": {\n</span><span class="token prefix unchanged"> </span><span class="token line">    "html-webpack-plugin": "^4.5.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">    "webpack": "^5.4.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">    "webpack-cli": "^4.2.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">    "webpack-dev-server": "^3.11.0"\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  "dependencies": {\n</span><span class="token prefix unchanged"> </span><span class="token line">    "lodash": "^4.17.20"\n</span><span class="token prefix unchanged"> </span><span class="token line">  }\n</span><span class="token prefix unchanged"> </span><span class="token line">}</span></span></code></pre> <p>이제 커멘드 라인에서 <code>npm start</code>를 실행할 수 있으며 브라우저가 자동으로 페이지를 로드하는 것을 볼 수 있습니다. 이제 소스 파일을 변경하고 저장하면, 코드가 컴파일된 후 웹 서버가 자동으로 다시 로드됩니다. 시도해 보세요!</p> <p><code>webpack-dev-server</code>에는 설정 가능한 많은 옵션이 있습니다. 자세한 내용은 <a href="/configuration/dev-server">문서</a>를 참고하세요.</p> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>이제 서버가 작동 중이므로, <a href="/guides/hot-module-replacement">Hot module replacement</a>를 사용해보세요!</p></aside> <h3 id="using-webpack-dev-middleware">Using webpack-dev-middleware<a href="#using-webpack-dev-middleware" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>webpack-dev-middleware</code>는 webpack에서 처리한 파일을 서버로 내보내는 래퍼 입니다. 이것은 내부적으로 <code>webpack-dev-server</code>에서 사용되지만, 사용자가 원하는 경우 더 많은 설정을 허용하기 위해 별도의 패키지로 사용할 수 있습니다. <code>webpack-dev-middleware</code>와 express 서버를 결합한 예를 살펴보겠습니다.</p> <p>시작하기 전에 <code>express</code>와 <code>webpack-dev-middleware</code>를 설치하겠습니다.</p> <pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev express webpack-dev-middleware</code></pre> <p>이제 미들웨어가 올바르게 작동하는지 확인하기 위해 webpack의 설정 파일을 약간 수정해야 합니다.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const path = require(\'path\');\n</span><span class="token prefix unchanged"> </span><span class="token line">const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">  mode: \'development\',\n</span><span class="token prefix unchanged"> </span><span class="token line">  entry: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    index: \'./src/index.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">    print: \'./src/print.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  devtool: \'inline-source-map\',\n</span><span class="token prefix unchanged"> </span><span class="token line">  devServer: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    contentBase: \'./dist\',\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  plugins: [\n</span><span class="token prefix unchanged"> </span><span class="token line">    new HtmlWebpackPlugin({\n</span><span class="token prefix unchanged"> </span><span class="token line">      title: \'Development\',\n</span><span class="token prefix unchanged"> </span><span class="token line">    }),\n</span><span class="token prefix unchanged"> </span><span class="token line">  ],\n</span><span class="token prefix unchanged"> </span><span class="token line">  output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    filename: \'[name].bundle.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">    path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">    clean: true,\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    publicPath: \'/\',\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">};</span></span></code></pre> <p><code>http://localhost:3000</code>에서 파일이 올바르게 제공되는지 확인하기 위해 <code>publicPath</code>가 서버 스크립트 내에서도 사용됩니다. 나중에 포트 번호를 지정합니다. 다음 단계는 커스텀 <code>express</code> 서버를 설정하는 것입니다.</p> <p><strong>project</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> webpack-demo\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- package.json\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- webpack.config.js\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> |- server.js\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> |- /dist\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /src\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- index.js\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- print.js\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /node_modules</span></span></code></pre> <p><strong>server.js</strong></p> <pre><code class="hljs language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'express\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> webpackDevMiddleware <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack-dev-middleware\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./webpack.config.js\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> compiler <span class="token operator">=</span> <span class="token function">webpack</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// express에서 webpack-dev-middleware와 webpack.config.js를 사용하도록 설정하세요.</span>\n<span class="token comment">// 기본 설정 파일</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>\n  <span class="token function">webpackDevMiddleware</span><span class="token punctuation">(</span>compiler<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    publicPath<span class="token operator">:</span> config<span class="token punctuation">.</span>output<span class="token punctuation">.</span>publicPath<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 포트 3000에서 파일 제공</span>\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Example app listening on port 3000!\\n\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>이제 서버를 좀 더 쉽게 실행할 수 있도록 npm 스크립트를 추가합니다.</p> <p><strong>package.json</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">{\n</span><span class="token prefix unchanged"> </span><span class="token line">  "name": "webpack-demo",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "version": "1.0.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "description": "",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "private": true,\n</span><span class="token prefix unchanged"> </span><span class="token line">  "scripts": {\n</span><span class="token prefix unchanged"> </span><span class="token line">    "test": "echo \\"Error: no test specified\\" &#x26;&#x26; exit 1",\n</span><span class="token prefix unchanged"> </span><span class="token line">    "watch": "webpack --watch",\n</span><span class="token prefix unchanged"> </span><span class="token line">    "start": "webpack serve --open",\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    "server": "node server.js",\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">    "build": "webpack"\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  "keywords": [],\n</span><span class="token prefix unchanged"> </span><span class="token line">  "author": "",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "license": "ISC",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "devDependencies": {\n</span><span class="token prefix unchanged"> </span><span class="token line">    "express": "^4.17.1",\n</span><span class="token prefix unchanged"> </span><span class="token line">    "html-webpack-plugin": "^4.5.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">    "webpack": "^5.4.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">    "webpack-cli": "^4.2.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">    "webpack-dev-middleware": "^4.0.2",\n</span><span class="token prefix unchanged"> </span><span class="token line">    "webpack-dev-server": "^3.11.0"\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  "dependencies": {\n</span><span class="token prefix unchanged"> </span><span class="token line">    "lodash": "^4.17.20"\n</span><span class="token prefix unchanged"> </span><span class="token line">  }\n</span><span class="token prefix unchanged"> </span><span class="token line">}</span></span></code></pre> <p>이제 터미널에서 <code>npm run server</code>를 실행하면, 다음과 유사한 출력이 표시됩니다.</p> <pre><code class="hljs language-bash">Example app listening on port <span class="token number">3000</span><span class="token operator">!</span>\n<span class="token punctuation">..</span>.\n<span class="token operator">&#x3C;</span>i<span class="token operator">></span> <span class="token punctuation">[</span>webpack-dev-middleware<span class="token punctuation">]</span> asset index.bundle.js <span class="token number">1.38</span> MiB <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: index<span class="token punctuation">)</span>\n<span class="token operator">&#x3C;</span>i<span class="token operator">></span> asset print.bundle.js <span class="token number">6.25</span> KiB <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: print<span class="token punctuation">)</span>\n<span class="token operator">&#x3C;</span>i<span class="token operator">></span> asset index.html <span class="token number">274</span> bytes <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n<span class="token operator">&#x3C;</span>i<span class="token operator">></span> runtime modules <span class="token number">1.9</span> KiB <span class="token number">9</span> modules\n<span class="token operator">&#x3C;</span>i<span class="token operator">></span> cacheable modules <span class="token number">530</span> KiB\n<span class="token operator">&#x3C;</span>i<span class="token operator">></span>   ./src/index.js <span class="token number">406</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n<span class="token operator">&#x3C;</span>i<span class="token operator">></span>   ./src/print.js <span class="token number">83</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n<span class="token operator">&#x3C;</span>i<span class="token operator">></span>   ./node_modules/lodash/lodash.js <span class="token number">530</span> KiB <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n<span class="token operator">&#x3C;</span>i<span class="token operator">></span> webpack <span class="token number">5.4</span>.0 compiled successfully <span class="token keyword">in</span> <span class="token number">709</span> ms\n<span class="token operator">&#x3C;</span>i<span class="token operator">></span> <span class="token punctuation">[</span>webpack-dev-middleware<span class="token punctuation">]</span> Compiled successfully.\n<span class="token operator">&#x3C;</span>i<span class="token operator">></span> <span class="token punctuation">[</span>webpack-dev-middleware<span class="token punctuation">]</span> Compiling<span class="token punctuation">..</span>.\n<span class="token operator">&#x3C;</span>i<span class="token operator">></span> <span class="token punctuation">[</span>webpack-dev-middleware<span class="token punctuation">]</span> assets by status <span class="token number">1.38</span> MiB <span class="token punctuation">[</span>cached<span class="token punctuation">]</span> <span class="token number">2</span> assets\n<span class="token operator">&#x3C;</span>i<span class="token operator">></span> cached modules <span class="token number">530</span> KiB <span class="token punctuation">(</span>javascript<span class="token punctuation">)</span> <span class="token number">1.9</span> KiB <span class="token punctuation">(</span>runtime<span class="token punctuation">)</span> <span class="token punctuation">[</span>cached<span class="token punctuation">]</span> <span class="token number">12</span> modules\n<span class="token operator">&#x3C;</span>i<span class="token operator">></span> webpack <span class="token number">5.4</span>.0 compiled successfully <span class="token keyword">in</span> <span class="token number">19</span> ms\n<span class="token operator">&#x3C;</span>i<span class="token operator">></span> <span class="token punctuation">[</span>webpack-dev-middleware<span class="token punctuation">]</span> Compiled successfully.</code></pre> <p>이제 브라우저를 실행하고 <code>http://localhost:3000</code>로 이동합니다. webpack 앱이 실행하고 작동하는 것을 확인할 수 있습니다!</p> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>Hot Module Replacement 방식에 대해 자세히 알고 싶다면, <a href="/guides/hot-module-replacement/">Hot Module Replacement</a> 가이드를 읽어보세요.</p></aside> <h2 id="adjusting-your-text-editor">Adjusting Your Text Editor<a href="#adjusting-your-text-editor" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>코드 자동 컴파일을 사용하면, 파일을 저장할 때 문제가 발생할 수 있습니다. 일부 편집기에는 잠재적으로 재컴파일을 방해할 수 있는 "안전한 쓰기" 기능이 있습니다.</p> <p>일부 일반 편집기에서 이 기능을 비활성화하려면, 아래 목록을 참고하십시오.</p> <ul> <li><strong>Sublime Text 3</strong>: 사용자 환경 설정에 <code>atomic_save: \'false\'</code>를 추가하십시오.</li> <li><strong>JetBrains IDEs (e.g. WebStorm)</strong>: <code>Preferences > Appearance &#x26; Behavior > System Settings</code>에서 "Use safe write" 선택을 해제하십시오.</li> <li><strong>Vim</strong>: 설정에 <code>:set backupcopy=yes</code>를 추가하십시오.</li> </ul> <h2 id="conclusion">Conclusion<a href="#conclusion" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>이제 자동으로 코드를 컴파일하고 간단한 개발 서버를 실행하는 방법을 배웠으므로, <a href="/guides/code-splitting/">코드 스플리팅</a>을 다룰 다음 가이드로 넘어가 볼까요?</p> '}}]);