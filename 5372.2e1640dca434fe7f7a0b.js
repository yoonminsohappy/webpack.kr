(self.webpackChunk=self.webpackChunk||[]).push([[5372],{5372:function(n,s,a){"use strict";a.r(s),s.default='<p><a href="https://npmjs.com/package/css-loader"><img src="https://img.shields.io/npm/v/css-loader.svg" alt="npm"></a> <a href="https://nodejs.org"><img src="https://img.shields.io/node/v/css-loader.svg" alt="node"></a> <a href="https://david-dm.org/webpack-contrib/css-loader"><img src="https://david-dm.org/webpack-contrib/css-loader.svg" alt="deps"></a> <a href="https://github.com/webpack-contrib/css-loader/actions"><img src="https://github.com/webpack-contrib/css-loader/workflows/css-loader/badge.svg" alt="tests"></a> <a href="https://codecov.io/gh/webpack-contrib/css-loader"><img src="https://codecov.io/gh/webpack-contrib/css-loader/branch/master/graph/badge.svg" alt="coverage"></a> <a href="https://gitter.im/webpack/webpack"><img src="https://badges.gitter.im/webpack/webpack.svg" alt="chat"></a> <a href="https://packagephobia.now.sh/result?p=css-loader"><img src="https://packagephobia.now.sh/badge?p=css-loader" alt="size"></a></p> <p>The <code>css-loader</code> interprets <code>@import</code> and <code>url()</code> like <code>import/require()</code> and will resolve them.</p> <h2 id="getting-started">Getting Started<a href="#getting-started" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>To begin, you\'ll need to install <code>css-loader</code>:</p> <pre><code class="hljs language-console">npm install --save-dev css-loader\n</code></pre> <p>Then add the plugin to your <code>webpack</code> config. For example:</p> <p><strong>file.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> css <span class="token keyword">from</span> <span class="token string">"file.css"</span><span class="token punctuation">;</span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"style-loader"</span><span class="token punctuation">,</span> <span class="token string">"css-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p><strong>Only for webpack v4:</strong></p> <p>Good loaders for requiring your assets are the <a href="/loaders/file-loader/">file-loader</a> and the <a href="/loaders/url-loader/">url-loader</a> which you should specify in your config (see <a href="https://github.com/webpack-contrib/css-loader#assets">below</a>).</p> <p>And run <code>webpack</code> via your preferred method.</p> <h3 id="tostring"><code>toString</code><a href="#tostring" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>You can also use the css-loader results directly as a string, such as in Angular\'s component style.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"to-string-loader"</span><span class="token punctuation">,</span> <span class="token string">"css-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>or</p> <pre><code class="hljs language-js"><span class="token keyword">const</span> css <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./test.css"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>css<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {String}</span></code></pre> <p>If there are SourceMaps, they will also be included in the result string.</p> <p>If, for one reason or another, you need to extract CSS as a plain string resource (i.e. not wrapped in a JS module) you might want to check out the <a href="https://github.com/peerigon/extract-loader">extract-loader</a>. It\'s useful when you, for instance, need to post process the CSS as a string.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token string">"handlebars-loader"</span><span class="token punctuation">,</span> <span class="token comment">// handlebars loader expects raw resource string</span>\n          <span class="token string">"extract-loader"</span><span class="token punctuation">,</span>\n          <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="options">Options<a href="#options" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <table> <thead> <tr> <th align="center">Name</th> <th align="center">Type</th> <th align="center">Default</th> <th align="left">Description</th> </tr> </thead> <tbody> <tr> <td align="center" data-th="Name"><span><strong><a href="#url"><code>url</code></a></strong></span></td> <td align="center" data-th="Type"><span><code>{Boolean|Function}</code></span></td> <td align="center" data-th="Default"><span><code>true</code></span></td> <td align="left" data-th="Description"><span>Enables/Disables <code>url</code>/<code>image-set</code> functions handling</span></td> </tr> <tr> <td align="center" data-th="Name"><span><strong><a href="#import"><code>import</code></a></strong></span></td> <td align="center" data-th="Type"><span><code>{Boolean|Function}</code></span></td> <td align="center" data-th="Default"><span><code>true</code></span></td> <td align="left" data-th="Description"><span>Enables/Disables <code>@import</code> at-rules handling</span></td> </tr> <tr> <td align="center" data-th="Name"><span><strong><a href="#modules"><code>modules</code></a></strong></span></td> <td align="center" data-th="Type"><span><code>{Boolean|String|Object}</code></span></td> <td align="center" data-th="Default"><span><code>{auto: true}</code></span></td> <td align="left" data-th="Description"><span>Enables/Disables CSS Modules and their configuration</span></td> </tr> <tr> <td align="center" data-th="Name"><span><strong><a href="#sourcemap"><code>sourceMap</code></a></strong></span></td> <td align="center" data-th="Type"><span><code>{Boolean}</code></span></td> <td align="center" data-th="Default"><span><code>compiler.devtool</code></span></td> <td align="left" data-th="Description"><span>Enables/Disables generation of source maps</span></td> </tr> <tr> <td align="center" data-th="Name"><span><strong><a href="#importloaders"><code>importLoaders</code></a></strong></span></td> <td align="center" data-th="Type"><span><code>{Number}</code></span></td> <td align="center" data-th="Default"><span><code>0</code></span></td> <td align="left" data-th="Description"><span>Enables/Disables or setups number of loaders applied before CSS loader</span></td> </tr> <tr> <td align="center" data-th="Name"><span><strong><a href="#esmodule"><code>esModule</code></a></strong></span></td> <td align="center" data-th="Type"><span><code>{Boolean}</code></span></td> <td align="center" data-th="Default"><span><code>true</code></span></td> <td align="left" data-th="Description"><span>Use ES modules syntax</span></td> </tr> </tbody> </table> <h3 id="url"><code>url</code><a href="#url" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Type: <code>Boolean|Function</code> Default: <code>true</code></p> <p>Enables/Disables handling the CSS functions <code>url</code> and <code>image-set</code>. If set to <code>false</code>, <code>css-loader</code> will not parse any paths specified in <code>url</code> or <code>image-set</code>. A function can also be passed to control this behavior dynamically based on the path to the asset. Starting with version <a href="https://github.com/webpack-contrib/css-loader/blob/master/CHANGELOG.md#400-2020-07-25">4.0.0</a>, absolute paths are parsed based on the server root.</p> <p>Examples resolutions:</p> <pre><code>url(image.png) => require(\'./image.png\')\nurl(\'image.png\') => require(\'./image.png\')\nurl(./image.png) => require(\'./image.png\')\nurl(\'./image.png\') => require(\'./image.png\')\nurl(\'http://dontwritehorriblecode.com/2112.png\') => require(\'http://dontwritehorriblecode.com/2112.png\')\nimage-set(url(\'image2x.png\') 1x, url(\'image1x.png\') 2x) => require(\'./image1x.png\') and require(\'./image2x.png\')\n</code></pre> <p>To import assets from a <code>node_modules</code> path (include <code>resolve.modules</code>) and for <code>alias</code>, prefix it with a <code>~</code>:</p> <pre><code>url(~module/image.png) => require(\'module/image.png\')\nurl(\'~module/image.png\') => require(\'module/image.png\')\nurl(~aliasDirectory/image.png) => require(\'otherDirectory/image.png\')\n</code></pre> <h4 id="boolean"><code>Boolean</code><a href="#boolean" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>Enable/disable <code>url()</code> resolving.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          url<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h4 id="function"><code>Function</code><a href="#function" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>Allow to filter <code>url()</code>. All filtered <code>url()</code> will not be resolved (left in the code as they were written).</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token function-variable function">url</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> resourcePath</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            <span class="token comment">// resourcePath - path to css file</span>\n\n            <span class="token comment">// Don\'t handle `img.png` urls</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"img.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="import"><code>import</code><a href="#import" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Type: <code>Boolean|Function</code> Default: <code>true</code></p> <p>Enables/Disables <code>@import</code> at-rules handling. Control <code>@import</code> resolving. Absolute urls in <code>@import</code> will be moved in runtime code.</p> <p>Examples resolutions:</p> <pre><code>@import \'style.css\' => require(\'./style.css\')\n@import url(style.css) => require(\'./style.css\')\n@import url(\'style.css\') => require(\'./style.css\')\n@import \'./style.css\' => require(\'./style.css\')\n@import url(./style.css) => require(\'./style.css\')\n@import url(\'./style.css\') => require(\'./style.css\')\n@import url(\'http://dontwritehorriblecode.com/style.css\') => @import url(\'http://dontwritehorriblecode.com/style.css\') in runtime\n</code></pre> <p>To import styles from a <code>node_modules</code> path (include <code>resolve.modules</code>) and for <code>alias</code>, prefix it with a <code>~</code>:</p> <pre><code>@import url(~module/style.css) => require(\'module/style.css\')\n@import url(\'~module/style.css\') => require(\'module/style.css\')\n@import url(~aliasDirectory/style.css) => require(\'otherDirectory/style.css\')\n</code></pre> <h4 id="boolean-1"><code>Boolean</code><a href="#boolean-1" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>Enable/disable <code>@import</code> resolving.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token keyword">import</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h4 id="function-1"><code>Function</code><a href="#function-1" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>Allow to filter <code>@import</code>. All filtered <code>@import</code> will not be resolved (left in the code as they were written).</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token function-variable function">import</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> media<span class="token punctuation">,</span> resourcePath</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            <span class="token comment">// resourcePath - path to css file</span>\n\n            <span class="token comment">// Don\'t handle `style.css` import</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"style.css"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="modules"><code>modules</code><a href="#modules" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Type: <code>Boolean|String|Object</code> Default: based on filename, <code>true</code> for all files matching <code>/\\.module\\.\\w+$/i.test(filename)</code> regular expression, more information you can read <a href="https://github.com/webpack-contrib/css-loader#auto">here</a></p> <p>Enables/Disables CSS Modules and their configuration.</p> <p>The <code>modules</code> option enables/disables the <strong><a href="https://github.com/css-modules/css-modules">CSS Modules</a></strong> specification and setup basic behaviour.</p> <p>Using <code>false</code> value increase performance because we avoid parsing <strong>CSS Modules</strong> features, it will be useful for developers who use vanilla css or use other technologies.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          modules<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h4 id="features"><code>Features</code><a href="#features" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <h5 id="scope"><code>Scope</code><a href="#scope" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h5> <p>Using <code>local</code> value requires you to specify <code>:global</code> classes. Using <code>global</code> value requires you to specify <code>:local</code> classes. Using <code>pure</code> value requires selectors must contain at least one local class or id.</p> <p>You can find more information <a href="https://github.com/css-modules/css-modules">here</a>.</p> <p>Styles can be locally scoped to avoid globally scoping styles.</p> <p>The syntax <code>:local(.className)</code> can be used to declare <code>className</code> in the local scope. The local identifiers are exported by the module.</p> <p>With <code>:local</code> (without brackets) local mode can be switched on for this selector. The <code>:global(.className)</code> notation can be used to declare an explicit global selector. With <code>:global</code> (without brackets) global mode can be switched on for this selector.</p> <p>The loader replaces local selectors with unique identifiers. The chosen unique identifiers are exported by the module.</p> <pre><code class="hljs language-css"><span class="token selector">:local(.className)</span> <span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">:local .className</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">:local(.className .subClass)</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">:local .className .subClass :global(.global-class-name)</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <pre><code class="hljs language-css"><span class="token selector">._23_aKvs-b8bW2Vg3fwHozO</span> <span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">._23_aKvs-b8bW2Vg3fwHozO</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">._23_aKvs-b8bW2Vg3fwHozO ._13LGdX8RMStbBE9w-t0gZ1</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">._23_aKvs-b8bW2Vg3fwHozO ._13LGdX8RMStbBE9w-t0gZ1 .global-class-name</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <blockquote> <p>ℹ️ Identifiers are exported</p> </blockquote> <pre><code class="hljs language-js">exports<span class="token punctuation">.</span>locals <span class="token operator">=</span> <span class="token punctuation">{</span>\n  className<span class="token operator">:</span> <span class="token string">"_23_aKvs-b8bW2Vg3fwHozO"</span><span class="token punctuation">,</span>\n  subClass<span class="token operator">:</span> <span class="token string">"_13LGdX8RMStbBE9w-t0gZ1"</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>CamelCase is recommended for local selectors. They are easier to use within the imported JS module.</p> <p>You can use <code>:local(#someId)</code>, but this is not recommended. Use classes instead of ids.</p> <h5 id="composing"><code>Composing</code><a href="#composing" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h5> <p>When declaring a local classname you can compose a local class from another local classname.</p> <pre><code class="hljs language-css"><span class="token selector">:local(.className)</span> <span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">:local(.subClass)</span> <span class="token punctuation">{</span>\n  <span class="token property">composes</span><span class="token punctuation">:</span> className<span class="token punctuation">;</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <p>This doesn\'t result in any change to the CSS itself but exports multiple classnames.</p> <pre><code class="hljs language-js">exports<span class="token punctuation">.</span>locals <span class="token operator">=</span> <span class="token punctuation">{</span>\n  className<span class="token operator">:</span> <span class="token string">"_23_aKvs-b8bW2Vg3fwHozO"</span><span class="token punctuation">,</span>\n  subClass<span class="token operator">:</span> <span class="token string">"_13LGdX8RMStbBE9w-t0gZ1 _23_aKvs-b8bW2Vg3fwHozO"</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <pre><code class="hljs language-css"><span class="token selector">._23_aKvs-b8bW2Vg3fwHozO</span> <span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">._13LGdX8RMStbBE9w-t0gZ1</span> <span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <h5 id="importing"><code>Importing</code><a href="#importing" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h5> <p>To import a local classname from another module.</p> <blockquote> <p>i We strongly recommend that you specify the extension when importing a file, since it is possible to import a file with any extension and it is not known in advance which file to use.</p> </blockquote> <pre><code class="hljs language-css"><span class="token selector">:local(.continueButton)</span> <span class="token punctuation">{</span>\n  <span class="token property">composes</span><span class="token punctuation">:</span> button from <span class="token string">"library/button.css"</span><span class="token punctuation">;</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <pre><code class="hljs language-css"><span class="token selector">:local(.nameEdit)</span> <span class="token punctuation">{</span>\n  <span class="token property">composes</span><span class="token punctuation">:</span> edit highlight from <span class="token string">"./edit.css"</span><span class="token punctuation">;</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <p>To import from multiple modules use multiple <code>composes:</code> rules.</p> <pre><code class="hljs language-css"><span class="token selector">:local(.className)</span> <span class="token punctuation">{</span>\n  <span class="token property">composes</span><span class="token punctuation">:</span> edit hightlight from <span class="token string">"./edit.css"</span><span class="token punctuation">;</span>\n  <span class="token property">composes</span><span class="token punctuation">:</span> button from <span class="token string">"module/button.css"</span><span class="token punctuation">;</span>\n  <span class="token property">composes</span><span class="token punctuation">:</span> classFromThisModule<span class="token punctuation">;</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <h5 id="values"><code>Values</code><a href="#values" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h5> <p>You can use <code>@value</code> to specific values to be reused throughout a document.</p> <p>We recommend use prefix <code>v-</code> for values, <code>s-</code> for selectors and <code>m-</code> for media at-rules.</p> <pre><code class="hljs language-css"><span class="token atrule"><span class="token rule">@value</span> <span class="token property">v-primary</span><span class="token punctuation">:</span> #BF4040<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@value</span> <span class="token property">s-black</span><span class="token punctuation">:</span> black-selector<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@value</span> <span class="token property">m-large</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 960px<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n\n<span class="token selector">.header</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> v-primary<span class="token punctuation">;</span>\n  <span class="token property">padding</span><span class="token punctuation">:</span> 0 10px<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">.s-black</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token atrule"><span class="token rule">@media</span> m-large</span> <span class="token punctuation">{</span>\n  <span class="token selector">.header</span> <span class="token punctuation">{</span>\n    <span class="token property">padding</span><span class="token punctuation">:</span> 0 20px<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <h4 id="boolean-2"><code>Boolean</code><a href="#boolean-2" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>Enable <strong>CSS Modules</strong> features.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          modules<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h4 id="string"><code>String</code><a href="#string" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>Enable <strong>CSS Modules</strong> features and setup <code>mode</code>.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token comment">// Using `local` value has same effect like using `modules: true`</span>\n          modules<span class="token operator">:</span> <span class="token string">"global"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h4 id="object"><code>Object</code><a href="#object" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>Enable <strong>CSS Modules</strong> features and setup options for them.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          modules<span class="token operator">:</span> <span class="token punctuation">{</span>\n            compileType<span class="token operator">:</span> <span class="token string">"module"</span><span class="token punctuation">,</span>\n            mode<span class="token operator">:</span> <span class="token string">"local"</span><span class="token punctuation">,</span>\n            auto<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n            exportGlobals<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n            localIdentName<span class="token operator">:</span> <span class="token string">"[path][name]__[local]--[hash:base64:5]"</span><span class="token punctuation">,</span>\n            localIdentContext<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            localIdentHashPrefix<span class="token operator">:</span> <span class="token string">"my-custom-hash"</span><span class="token punctuation">,</span>\n            namedExport<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n            exportLocalsConvention<span class="token operator">:</span> <span class="token string">"camelCase"</span><span class="token punctuation">,</span>\n            exportOnlyLocals<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h5 id="compiletype"><code>compileType</code><a href="#compiletype" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h5> <p>Type: <code>\'module\' | \'icss\'</code> Default: <code>\'module\'</code></p> <p>Controls the level of compilation applied to the input styles.</p> <p>The <code>module</code> handles <code>class</code> and <code>id</code> scoping and <code>@value</code> values. The <code>icss</code> will only compile the low level <code>Interoperable CSS</code> format for declaring <code>:import</code> and <code>:export</code> dependencies between CSS and other languages.</p> <p>ICSS underpins CSS Module support, and provides a low level syntax for other tools to implement CSS-module variations of their own.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          modules<span class="token operator">:</span> <span class="token punctuation">{</span>\n            compileType<span class="token operator">:</span> <span class="token string">"icss"</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h5 id="auto"><code>auto</code><a href="#auto" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h5> <p>Type: <code>Boolean|RegExp|Function</code> Default: <code>\'true\'</code></p> <p>Allows auto enable CSS modules based on filename.</p> <h6 id="boolean-3"><code>Boolean</code><a href="#boolean-3" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h6> <p>Possible values:</p> <ul> <li><code>true</code> - enables CSS modules or interoperable CSS format, sets the <a href="#compiletype"><code>modules.compileType</code></a> option to <code>module</code> value for all files which satisfy <code>/\\.module(s)?\\.\\w+$/i.test(filename)</code> condition or sets the <a href="#compiletype"><code>modules.compileType</code></a> option to <code>icss</code> value for all files which satisfy <code>/\\.icss\\.\\w+$/i.test(filename)</code> condition</li> <li><code>false</code> - disables CSS modules or interoperable CSS format based on filename</li> </ul> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          modules<span class="token operator">:</span> <span class="token punctuation">{</span>\n            auto<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h6 id="regexp"><code>RegExp</code><a href="#regexp" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h6> <p>Enable css modules for files based on the filename satisfying your regex check.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          modules<span class="token operator">:</span> <span class="token punctuation">{</span>\n            auto<span class="token operator">:</span> <span class="token regex">/\\.custom-module\\.\\w+$/i</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h6 id="function-2"><code>Function</code><a href="#function-2" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h6> <p>Enable css modules for files based on the filename satisfying your filter function check.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          modules<span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token function-variable function">auto</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">resourcePath</span><span class="token punctuation">)</span> <span class="token operator">=></span> resourcePath<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".custom-module.css"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h5 id="mode"><code>mode</code><a href="#mode" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h5> <p>Type: <code>String|Function</code> Default: <code>\'local\'</code></p> <p>Setup <code>mode</code> option. You can omit the value when you want <code>local</code> mode.</p> <h6 id="string-1"><code>String</code><a href="#string-1" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h6> <p>Possible values - <code>local</code>, <code>global</code>, and <code>pure</code>.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          modules<span class="token operator">:</span> <span class="token punctuation">{</span>\n            mode<span class="token operator">:</span> <span class="token string">"global"</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h6 id="function-3"><code>Function</code><a href="#function-3" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h6> <p>Allows set different values for the <code>mode</code> option based on a filename</p> <p>Possible return values - <code>local</code>, <code>global</code>, and <code>pure</code>.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          modules<span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token comment">// Callback must return "local", "global", or "pure" values</span>\n            <span class="token function-variable function">mode</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">resourcePath</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/pure.css$/i</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>resourcePath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> <span class="token string">"pure"</span><span class="token punctuation">;</span>\n              <span class="token punctuation">}</span>\n\n              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/global.css$/i</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>resourcePath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> <span class="token string">"global"</span><span class="token punctuation">;</span>\n              <span class="token punctuation">}</span>\n\n              <span class="token keyword">return</span> <span class="token string">"local"</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h5 id="localidentname"><code>localIdentName</code><a href="#localidentname" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h5> <p>Type: <code>String</code> Default: <code>\'[hash:base64]\'</code></p> <p>Allows to configure the generated local ident name. See <a href="https://github.com/webpack/loader-utils#interpolatename">loader-utils\'s documentation</a> for more information on options.</p> <p>Recommendations:</p> <ul> <li>use <code>\'[path][name]__[local]\'</code> for development</li> <li>use <code>\'[hash:base64]\'</code> for production</li> </ul> <p>The <code>[local]</code> placeholder contains original class.</p> <p><strong>Note:</strong> all reserved (<code>&#x3C;>:"/\\|?*</code>) and control filesystem characters (excluding characters in the <code>[local]</code> placeholder) will be converted to <code>-</code>.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          modules<span class="token operator">:</span> <span class="token punctuation">{</span>\n            localIdentName<span class="token operator">:</span> <span class="token string">"[path][name]__[local]--[hash:base64:5]"</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h5 id="localidentcontext"><code>localIdentContext</code><a href="#localidentcontext" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h5> <p>Type: <code>String</code> Default: <code>compiler.context</code></p> <p>Allows to redefine basic loader context for local ident name.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          modules<span class="token operator">:</span> <span class="token punctuation">{</span>\n            localIdentContext<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h5 id="localidenthashprefix"><code>localIdentHashPrefix</code><a href="#localidenthashprefix" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h5> <p>Type: <code>String</code> Default: <code>undefined</code></p> <p>Allows to add custom hash to generate more unique classes.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          modules<span class="token operator">:</span> <span class="token punctuation">{</span>\n            localIdentHashPrefix<span class="token operator">:</span> <span class="token string">"hash"</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h5 id="localidentregexp"><code>localIdentRegExp</code><a href="#localidentregexp" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h5> <p>Type: <code>String|RegExp</code> Default: <code>undefined</code></p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          modules<span class="token operator">:</span> <span class="token punctuation">{</span>\n            localIdentRegExp<span class="token operator">:</span> <span class="token regex">/page-(.*)\\.css/i</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h5 id="getlocalident"><code>getLocalIdent</code><a href="#getlocalident" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h5> <p>Type: <code>Function</code> Default: <code>undefined</code></p> <p>Allows to specify a function to generate the classname. By default we use built-in function to generate a classname. If the custom function returns <code>null</code> or <code>undefined</code>, we fallback to the built-in function to generate the classname.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          modules<span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token function-variable function">getLocalIdent</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> localIdentName<span class="token punctuation">,</span> localName<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n              <span class="token keyword">return</span> <span class="token string">"whatever_random_class_name"</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h5 id="namedexport"><code>namedExport</code><a href="#namedexport" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h5> <p>Type: <code>Boolean</code> Default: <code>false</code></p> <p>Enables/disables ES modules named export for locals.</p> <blockquote> <p>⚠ Names of locals are converted to camelcase, i.e. the <code>exportLocalsConvention</code> option has <code>camelCaseOnly</code> value by default.</p> </blockquote> <blockquote> <p>⚠ It is not allowed to use JavaScript reserved words in css class names.</p> </blockquote> <p><strong>styles.css</strong></p> <pre><code class="hljs language-css"><span class="token selector">.foo-baz</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.bar</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <p><strong>index.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> fooBaz<span class="token punctuation">,</span> bar <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./styles.css"</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fooBaz<span class="token punctuation">,</span> bar<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>You can enable a ES module named export using:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          esModule<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n          modules<span class="token operator">:</span> <span class="token punctuation">{</span>\n            namedExport<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h5 id="exportglobals"><code>exportGlobals</code><a href="#exportglobals" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h5> <p>Type: <code>Boolean</code> Default: <code>false</code></p> <p>Allow <code>css-loader</code> to export names from global class or id, so you can use that as local name.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          modules<span class="token operator">:</span> <span class="token punctuation">{</span>\n            exportGlobals<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h5 id="exportlocalsconvention"><code>exportLocalsConvention</code><a href="#exportlocalsconvention" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h5> <p>Type: <code>String</code> Default: based on the <code>modules.namedExport</code> option value, if <code>true</code> - <code>camelCaseOnly</code>, otherwise <code>asIs</code></p> <p>Style of exported class names.</p> <p>By default, the exported JSON keys mirror the class names (i.e <code>asIs</code> value).</p> <blockquote> <p>⚠ Only <code>camelCaseOnly</code> value allowed if you set the <code>namedExport</code> value to <code>true</code>.</p> </blockquote> <table> <thead> <tr> <th align="center">Name</th> <th align="center">Type</th> <th align="left">Description</th> </tr> </thead> <tbody> <tr> <td align="center" data-th="Name"><span><strong><code>\'asIs\'</code></strong></span></td> <td align="center" data-th="Type"><span><code>{String}</code></span></td> <td align="left" data-th="Description"><span>Class names will be exported as is.</span></td> </tr> <tr> <td align="center" data-th="Name"><span><strong><code>\'camelCase\'</code></strong></span></td> <td align="center" data-th="Type"><span><code>{String}</code></span></td> <td align="left" data-th="Description"><span>Class names will be camelized, the original class name will not to be removed from the locals</span></td> </tr> <tr> <td align="center" data-th="Name"><span><strong><code>\'camelCaseOnly\'</code></strong></span></td> <td align="center" data-th="Type"><span><code>{String}</code></span></td> <td align="left" data-th="Description"><span>Class names will be camelized, the original class name will be removed from the locals</span></td> </tr> <tr> <td align="center" data-th="Name"><span><strong><code>\'dashes\'</code></strong></span></td> <td align="center" data-th="Type"><span><code>{String}</code></span></td> <td align="left" data-th="Description"><span>Only dashes in class names will be camelized</span></td> </tr> <tr> <td align="center" data-th="Name"><span><strong><code>\'dashesOnly\'</code></strong></span></td> <td align="center" data-th="Type"><span><code>{String}</code></span></td> <td align="left" data-th="Description"><span>Dashes in class names will be camelized, the original class name will be removed from the locals</span></td> </tr> </tbody> </table> <p><strong>file.css</strong></p> <pre><code class="hljs language-css"><span class="token selector">.class-name</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span></code></pre> <p><strong>file.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> className <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"file.css"</span><span class="token punctuation">;</span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          modules<span class="token operator">:</span> <span class="token punctuation">{</span>\n            exportLocalsConvention<span class="token operator">:</span> <span class="token string">"camelCase"</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h5 id="exportonlylocals"><code>exportOnlyLocals</code><a href="#exportonlylocals" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h5> <p>Type: <code>Boolean</code> Default: <code>false</code></p> <p>Export only locals.</p> <p><strong>Useful</strong> when you use <strong>css modules</strong> for pre-rendering (for example SSR). For pre-rendering with <code>mini-css-extract-plugin</code> you should use this option instead of <code>style-loader!css-loader</code> <strong>in the pre-rendering bundle</strong>. It doesn\'t embed CSS but only exports the identifier mappings.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          modules<span class="token operator">:</span> <span class="token punctuation">{</span>\n            exportOnlyLocals<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="sourcemap"><code>sourceMap</code><a href="#sourcemap" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Type: <code>Boolean</code> Default: depends on the <code>compiler.devtool</code> value</p> <p>By default generation of source maps depends on the <a href="/configuration/devtool/"><code>devtool</code></a> option. All values enable source map generation except <code>eval</code> and <code>false</code> value.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          sourceMap<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="importloaders"><code>importLoaders</code><a href="#importloaders" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Type: <code>Number</code> Default: <code>0</code></p> <p>Enables/Disables or setups number of loaders applied before CSS loader.</p> <p>The option <code>importLoaders</code> allows you to configure how many loaders before <code>css-loader</code> should be applied to <code>@import</code>ed resources.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token string">"style-loader"</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n            options<span class="token operator">:</span> <span class="token punctuation">{</span>\n              importLoaders<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n              <span class="token comment">// 0 => no loaders (default);</span>\n              <span class="token comment">// 1 => postcss-loader;</span>\n              <span class="token comment">// 2 => postcss-loader, sass-loader</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token string">"postcss-loader"</span><span class="token punctuation">,</span>\n          <span class="token string">"sass-loader"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>This may change in the future when the module system (i. e. webpack) supports loader matching by origin.</p> <h3 id="esmodule"><code>esModule</code><a href="#esmodule" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Type: <code>Boolean</code> Default: <code>true</code></p> <p>By default, <code>css-loader</code> generates JS modules that use the ES modules syntax. There are some cases in which using ES modules is beneficial, like in the case of <a href="/plugins/module-concatenation-plugin/">module concatenation</a> and <a href="/guides/tree-shaking/">tree shaking</a>.</p> <p>You can enable a CommonJS modules syntax using:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          esModule<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="examples">Examples<a href="#examples" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <h3 id="recommend">Recommend<a href="#recommend" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>For <code>production</code> builds it\'s recommended to extract the CSS from your bundle being able to use parallel loading of CSS/JS resources later on. This can be achieved by using the <a href="/plugins/mini-css-extract-plugin/">mini-css-extract-plugin</a>, because it creates separate css files. For <code>development</code> mode (including <code>webpack-dev-server</code>) you can use <a href="/loaders/style-loader/">style-loader</a>, because it injects CSS into the DOM using multiple </p><style></style> and works faster.<p></p> <blockquote> <p>i Do not use together <code>style-loader</code> and <code>mini-css-extract-plugin</code>.</p> </blockquote> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"mini-css-extract-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> devMode <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">"production"</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.(sa|sc|c)ss$/</span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          devMode <span class="token operator">?</span> <span class="token string">"style-loader"</span> <span class="token operator">:</span> MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>\n          <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n          <span class="token string">"postcss-loader"</span><span class="token punctuation">,</span>\n          <span class="token string">"sass-loader"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>devMode <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="disable-url-resolving-using-the--webpackignore-true--comment">Disable url resolving using the <code>/* webpackIgnore: true */</code> comment<a href="#disable-url-resolving-using-the--webpackignore-true--comment" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>With the help of the <code>/* webpackIgnore: true */</code>comment, it is possible to disable sources handling for rules and for individual declarations.</p> <pre><code class="hljs language-css"><span class="token comment">/* webpackIgnore: true */</span>\n<span class="token atrule"><span class="token rule">@import</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>./basic.css<span class="token punctuation">)</span></span><span class="token punctuation">;</span></span>\n@import <span class="token comment">/* webpackIgnore: true */</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>./imported.css<span class="token punctuation">)</span></span><span class="token selector">;\n\n.class</span> <span class="token punctuation">{</span>\n  <span class="token comment">/* Disabled url handling for the all urls in the \'background\' declaration */</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n  <span class="token comment">/* webpackIgnore: true */</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"./url/img.png"</span><span class="token punctuation">)</span></span><span class="token punctuation">,</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"./url/img.png"</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">.class</span> <span class="token punctuation">{</span>\n  <span class="token comment">/* Disabled url handling for the first url in the \'background\' declaration */</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> \n    <span class="token comment">/* webpackIgnore: true */</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"./url/img.png"</span><span class="token punctuation">)</span></span><span class="token punctuation">,</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"./url/img.png"</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">.class</span> <span class="token punctuation">{</span>\n  <span class="token comment">/* Disabled url handling for the second url in the \'background\' declaration */</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"./url/img.png"</span><span class="token punctuation">)</span></span><span class="token punctuation">,</span>\n    <span class="token comment">/* webpackIgnore: true */</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"./url/img.png"</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/* prettier-ignore */</span>\n<span class="token selector">.class</span> <span class="token punctuation">{</span>\n  <span class="token comment">/* Disabled url handling for the second url in the \'background\' declaration */</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"./url/img.png"</span><span class="token punctuation">)</span></span><span class="token punctuation">,</span>\n    <span class="token comment">/* webpackIgnore: true */</span> \n    <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"./url/img.png"</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/* prettier-ignore */</span>\n<span class="token selector">.class</span> <span class="token punctuation">{</span>\n  <span class="token comment">/* Disabled url handling for third and sixth urls in the \'background-image\' declaration */</span>\n  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">image-set</span><span class="token punctuation">(</span>\n    <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>./url/img.png<span class="token punctuation">)</span></span> 2x<span class="token punctuation">,</span>\n    <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>./url/img.png<span class="token punctuation">)</span></span> 3x<span class="token punctuation">,</span>\n    <span class="token comment">/* webpackIgnore:  true */</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>./url/img.png<span class="token punctuation">)</span></span> 4x<span class="token punctuation">,</span>\n    <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>./url/img.png<span class="token punctuation">)</span></span> 5x<span class="token punctuation">,</span>\n    <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>./url/img.png<span class="token punctuation">)</span></span> 6x<span class="token punctuation">,</span>\n    <span class="token comment">/* webpackIgnore:  true */</span>\n    <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>./url/img.png<span class="token punctuation">)</span></span> 7x\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <h3 id="assets">Assets<a href="#assets" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>The following <code>webpack.config.js</code> can load CSS files, embed small PNG/JPG/GIF/SVG images as well as fonts as <a href="https://tools.ietf.org/html/rfc2397">Data URLs</a> and copy larger files to the output directory.</p> <p><strong>For webpack v5:</strong></p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"style-loader"</span><span class="token punctuation">,</span> <span class="token string">"css-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.(png|jpe?g|gif|svg|eot|ttf|woff|woff2)$/i</span><span class="token punctuation">,</span>\n        <span class="token comment">// More information here https://webpack.js.org/guides/asset-modules/</span>\n        type<span class="token operator">:</span> <span class="token string">"asset"</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p><strong>For webpack v4:</strong></p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"style-loader"</span><span class="token punctuation">,</span> <span class="token string">"css-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.(png|jpe?g|gif|svg|eot|ttf|woff|woff2)$/i</span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"url-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          limit<span class="token operator">:</span> <span class="token number">8192</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="pure-css-css-modules-and-postcss">Pure CSS, CSS modules and PostCSS<a href="#pure-css-css-modules-and-postcss" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>When you have pure CSS (without CSS modules), CSS modules and PostCSS in your project you can use this setup:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token comment">// For pure CSS - /\\.css$/i,</span>\n        <span class="token comment">// For Sass/SCSS - /\\.((c|sa|sc)ss)$/i,</span>\n        <span class="token comment">// For Less - /\\.((c|le)ss)$/i,</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.((c|sa|sc)ss)$/i</span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token string">"style-loader"</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n            options<span class="token operator">:</span> <span class="token punctuation">{</span>\n              <span class="token comment">// Run `postcss-loader` on each CSS `@import`, do not forget that `sass-loader` compile non CSS `@import`\'s into a single file</span>\n              <span class="token comment">// If you need run `sass-loader` and `postcss-loader` on each CSS `@import` please set it to `2`</span>\n              importLoaders<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">"postcss-loader"</span><span class="token punctuation">,</span>\n            options<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token function-variable function">plugins</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token function">postcssPresetEnv</span><span class="token punctuation">(</span><span class="token punctuation">{</span> stage<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token comment">// Can be `less-loader`</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">"sass-loader"</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token comment">// For webpack v5</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.(png|jpe?g|gif|svg|eot|ttf|woff|woff2)$/i</span><span class="token punctuation">,</span>\n        <span class="token comment">// More information here https://webpack.js.org/guides/asset-modules/</span>\n        type<span class="token operator">:</span> <span class="token string">"asset"</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token comment">// For webpack v4</span>\n      <span class="token comment">// {</span>\n      <span class="token comment">//  test: /\\.(png|jpe?g|gif|svg|eot|ttf|woff|woff2)$/i,</span>\n      <span class="token comment">//  loader: "url-loader",</span>\n      <span class="token comment">//  options: {</span>\n      <span class="token comment">//    limit: 8192,</span>\n      <span class="token comment">//  },</span>\n      <span class="token comment">// },</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="resolve-unresolved-urls-using-an-alias">Resolve unresolved URLs using an alias<a href="#resolve-unresolved-urls-using-an-alias" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><strong>index.css</strong></p> <pre><code class="hljs language-css"><span class="token selector">.class</span> <span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/assets/unresolved/img.png<span class="token punctuation">)</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"style-loader"</span><span class="token punctuation">,</span> <span class="token string">"css-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>\n    alias<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token string">"/assets/unresolved/img.png"</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>\n        __dirname<span class="token punctuation">,</span>\n        <span class="token string">"assets/real-path-to-img/img.png"</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="separating-interoperable-css-only-and-css-module-features">Separating <code>Interoperable CSS</code>-only and <code>CSS Module</code> features<a href="#separating-interoperable-css-only-and-css-module-features" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>The following setup is an example of allowing <code>Interoperable CSS</code> features only (such as <code>:import</code> and <code>:export</code>) without using further <code>CSS Module</code> functionality by setting <code>compileType</code> option for all files that do not match <code>*.module.scss</code> naming convention. This is for reference as having <code>ICSS</code> features applied to all files was default <code>css-loader</code> behavior before v4. Meanwhile all files matching <code>*.module.scss</code> are treated as <code>CSS Modules</code> in this example.</p> <p>An example case is assumed where a project requires canvas drawing variables to be synchronized with CSS - canvas drawing uses the same color (set by color name in JavaScript) as HTML background (set by class name in CSS).</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token comment">// ...</span>\n      <span class="token comment">// --------</span>\n      <span class="token comment">// SCSS ALL EXCEPT MODULES</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.scss$/</span><span class="token punctuation">,</span>\n        exclude<span class="token operator">:</span> <span class="token regex">/\\.module\\.scss$/</span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">\'style-loader\'</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n            options<span class="token operator">:</span> <span class="token punctuation">{</span>\n              importLoaders<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n              modules<span class="token operator">:</span> <span class="token punctuation">{</span>\n                compileType<span class="token operator">:</span> <span class="token string">\'icss\'</span>\n              <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">\'sass-loader\'</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token comment">// --------</span>\n      <span class="token comment">// SCSS MODULES</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex">/\\.module\\.scss$/</span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">\'style-loader\'</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n            options<span class="token operator">:</span> <span class="token punctuation">{</span>\n              importLoaders<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n              modules<span class="token operator">:</span> <span class="token punctuation">{</span>\n                compileType<span class="token operator">:</span> <span class="token string">\'module\'</span>\n              <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">\'sass-loader\'</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token comment">// --------</span>\n      <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p><strong>variables.scss</strong></p> <p>File treated as <code>ICSS</code>-only.</p> <pre><code class="hljs language-scss"><span class="token property"><span class="token variable">$colorBackground</span></span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token selector">:export </span><span class="token punctuation">{</span>\n  <span class="token property">colorBackgroundCanvas</span><span class="token punctuation">:</span> <span class="token variable">$colorBackground</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <p><strong>Component.module.scss</strong></p> <p>File treated as <code>CSS Module</code>.</p> <pre><code class="hljs language-scss"><span class="token keyword">@import</span> <span class="token string">"variables.scss"</span><span class="token punctuation">;</span>\n<span class="token selector">.componentClass </span><span class="token punctuation">{</span>\n  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token variable">$colorBackground</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <p><strong>Component.jsx</strong></p> <p>Using both <code>CSS Module</code> functionality as well as SCSS variables directly in JavaScript.</p> <pre><code class="hljs language-jsx">import svars from "variables.scss";\nimport styles from "Component.module.scss";\n\n// Render DOM with CSS modules class name\n// &#x3C;div className={styles.componentClass}>\n//   &#x3C;canvas ref={mountsCanvas}/>\n// &#x3C;/div>\n\n// Somewhere in JavaScript canvas drawing code use the variable directly\n// const ctx = mountsCanvas.current.getContext(\'2d\',{alpha: false});\nctx.fillStyle = `${svars.colorBackgroundCanvas}`;\n</code></pre> <h2 id="contributing">Contributing<a href="#contributing" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>Please take a moment to read our contributing guidelines if you haven\'t yet done so.</p> <p><a href="https://github.com/webpack-contrib/css-loader/blob/master/.github/CONTRIBUTING.md">CONTRIBUTING</a></p> <h2 id="license">License<a href="#license" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><a href="https://github.com/webpack-contrib/css-loader/blob/master/LICENSE">MIT</a></p> '}}]);