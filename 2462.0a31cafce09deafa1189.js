(self.webpackChunk=self.webpackChunk||[]).push([[2462],{2462:function(n,s,a){"use strict";a.r(s),s.default='<p><code>EnvironmentPlugin</code>을 사용해 <a href="https://nodejs.org/api/process.html#process_process_env"><code>process.env</code></a> 키에 <a href="/plugins/define-plugin"><code>DefinePlugin</code></a>을 간단히 적용할 수 있습니다.</p> <h2 id="usage">Usage<a href="#usage" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>EnvironmentPlugin</code>은 키로 구성된 배열 혹은 키에 기본값이 매핑된 객체를 받습니다.</p> <pre><code class="hljs language-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>EnvironmentPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'NODE_ENV\'</span><span class="token punctuation">,</span> <span class="token string">\'DEBUG\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>이는 다음과 같은 <code>DefinePlugin</code> 적용과 동일합니다.</p> <pre><code class="hljs language-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token string">\'process.env.NODE_ENV\'</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token string">\'process.env.DEBUG\'</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">DEBUG</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>환경 변수를 정의하지 않으면 "<code>EnvironmentPlugin</code> - <code>${key}</code> environment variable is undefined" 오류가 발생합니다.</p></aside> <h2 id="usage-with-default-values">Usage with default values<a href="#usage-with-default-values" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>또는, <code>EnvironmentPlugin</code>은 키에 기본값을 매핑한 객체를 지원합니다. 키가 <code>process.env</code>에 정의되지 않은 경우에는 기본값을 사용합니다.</p> <pre><code class="hljs language-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>EnvironmentPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token constant">NODE_ENV</span><span class="token operator">:</span> <span class="token string">\'development\'</span><span class="token punctuation">,</span> <span class="token comment">// process.env.NODE_ENV가 정의되지 않은 경우 \'development\'를 사용하세요.</span>\n  <span class="token constant">DEBUG</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <aside class="warning"><h6 class="warning__prefix">warning</h6><p><code>process.env</code>의 모든 변수는 문자열이어야 합니다.</p></aside> <aside class="tip"><h6 class="tip__prefix">tip</h6><p><a href="/plugins/define-plugin"><code>DefinePlugin</code></a>과 달리 <code>EnvironmentPlugin</code>에 의해서 기본값에 <code>JSON.stringify</code>가 적용됩니다.</p></aside> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>기본값이 <code>null</code>인 경우와 <code>undefined</code>인 경우는 다르게 동작합니다. 변수가 번들링 시점에 <em>제공되어야 한다면</em> <code>undefined</code>를 사용하고, 선택 사항이라면 <code>null</code>을 사용합니다.</p></aside> <aside class="warning"><h6 class="warning__prefix">warning</h6><p>만약 환경 변수가 번들링 시점에 발견되지 않는다면 기본값이 제공되지 않습니다. 이때 webpack은 경고 대신 오류를 띄웁니다.</p></aside> <p><strong>Example:</strong></p> <p>지금까지 구성해온 <code>EnvironmentPlugin</code> 설정을 테스트 파일 <code>entry.js</code>에 적용했을 때 어떻게 동작하는지 알아봅시다.</p> <pre><code class="hljs language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">\'production\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Welcome to production\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">DEBUG</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Debugging output\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <p>빌드하기 위해 터미널에서 <code>NODE_ENV=production webpack</code>을 실행했을 때 <code>entry.js</code>는 다음과 같습니다.</p> <pre><code class="hljs language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">\'production\'</span> <span class="token operator">===</span> <span class="token string">\'production\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// &#x3C;-- NODE_ENV의 \'production\'이 사용됩니다.</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Welcome to production\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// &#x3C;-- 기본값이 사용됩니다.</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Debugging output\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <p><code>DEBUG=false webpack</code>을 실행하면 다음과 같습니다.</p> <pre><code class="hljs language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">\'development\'</span> <span class="token operator">===</span> <span class="token string">\'production\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// &#x3C;-- 기본값이 사용됩니다.</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Welcome to production\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">\'false\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// &#x3C;-- DEBUG의 \'false\'가 사용됩니다.</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Debugging output\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <h2 id="use-case-git-version">Use Case: Git Version<a href="#use-case-git-version" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>다음과 같은 <code>EnvironmentPlugin</code> 설정은 저장소의 마지막 커밋에 따른 <code>process.env.GIT_VERSION</code> (예시 "v5.4.0-2-g25139f57f")과 <code>process.env.GIT_AUTHOR_DATE</code> (예시 "2020-11-04T12:25:16+01:00")를 제공합니다.</p> <pre><code class="hljs language-javascript"><span class="token keyword">const</span> child_process <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'child_process\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">git</span><span class="token punctuation">(</span><span class="token parameter">command</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> child_process<span class="token punctuation">.</span><span class="token function">execSync</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">git </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>command<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span> encoding<span class="token operator">:</span> <span class="token string">\'utf8\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>EnvironmentPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token constant">GIT_VERSION</span><span class="token operator">:</span> <span class="token function">git</span><span class="token punctuation">(</span><span class="token string">\'describe --always\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token constant">GIT_AUTHOR_DATE</span><span class="token operator">:</span> <span class="token function">git</span><span class="token punctuation">(</span><span class="token string">\'log -1 --format=%aI\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h2 id="dotenvplugin"><code>DotenvPlugin</code><a href="#dotenvplugin" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>써드 파티 <a href="https://github.com/mrsteele/dotenv-webpack"><code>DotenvPlugin</code></a> (<code>dotenv-webpack</code>)을 사용해 <a href="https://www.npmjs.com/package/dotenv">dotenv 변수</a>를 사용할 수 있습니다.</p> <pre><code class="hljs language-bash">// .env\n<span class="token assign-left variable">DB_HOST</span><span class="token operator">=</span><span class="token number">127.0</span>.0.1\n<span class="token assign-left variable">DB_PASS</span><span class="token operator">=</span>foobar\n<span class="token assign-left variable">S3_API</span><span class="token operator">=</span>mysecretkey</code></pre> <pre><code class="hljs language-javascript"><span class="token keyword">new</span> <span class="token class-name">Dotenv</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  path<span class="token operator">:</span> <span class="token string">\'./.env\'</span><span class="token punctuation">,</span> <span class="token comment">// .env 파일 경로 (기본값)</span>\n  safe<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// .env.example 로드 (기본값은 dotenv-safe를 사용하지 않는 "false")</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> '}}]);