"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5042],{5042:function(t,a,s){s.r(a),a.default='<p>webpack은 유일한 모듈 번들러가 아닙니다. webpack 또는 아래 번들러 중 하나를 사용하는 경우, webpack이 현재 경쟁 제품과 어떻게 비교되는지에 대한 기능별 비교가 아래에 있습니다.</p> <table> <thead> <tr> <th>기능</th> <th>webpack/webpack</th> <th>jrburke/requirejs</th> <th>substack/node-browserify</th> <th>jspm/jspm-cli</th> <th>rollup/rollup</th> <th>brunch/brunch</th> </tr> </thead> <tbody> <tr> <td data-th="기능"><span>요구에 따른 추가 청크 로드</span></td> <td data-th="webpack/webpack"><span><strong>예</strong></span></td> <td data-th="jrburke/requirejs"><span><strong>예</strong></span></td> <td data-th="substack/node-browserify"><span>아니오</span></td> <td data-th="jspm/jspm-cli"><span><a href="https://github.com/systemjs/systemjs/blob/master/docs/system-api.md#systemimportmodulename--normalizedparentname---promisemodule">System.import</a></span></td> <td data-th="rollup/rollup"><span>아니오</span></td> <td data-th="brunch/brunch"><span>아니오</span></td> </tr> <tr> <td data-th="기능"><span>AMD <code>define</code></span></td> <td data-th="webpack/webpack"><span><strong>예</strong></span></td> <td data-th="jrburke/requirejs"><span><strong>예</strong></span></td> <td data-th="substack/node-browserify"><span><a href="https://github.com/jaredhanson/deamdify">deamdify</a></span></td> <td data-th="jspm/jspm-cli"><span>예</span></td> <td data-th="rollup/rollup"><span><a href="https://github.com/piuccio/rollup-plugin-amd">rollup-plugin-amd</a></span></td> <td data-th="brunch/brunch"><span>예</span></td> </tr> <tr> <td data-th="기능"><span>AMD <code>require</code></span></td> <td data-th="webpack/webpack"><span><strong>예</strong></span></td> <td data-th="jrburke/requirejs"><span><strong>예</strong></span></td> <td data-th="substack/node-browserify"><span>아니오</span></td> <td data-th="jspm/jspm-cli"><span>예</span></td> <td data-th="rollup/rollup"><span>아니오</span></td> <td data-th="brunch/brunch"><span>예</span></td> </tr> <tr> <td data-th="기능"><span>AMD <code>require</code> loads on demand</span></td> <td data-th="webpack/webpack"><span><strong>예</strong></span></td> <td data-th="jrburke/requirejs"><span>수동 설정으로</span></td> <td data-th="substack/node-browserify"><span>아니오</span></td> <td data-th="jspm/jspm-cli"><span>예</span></td> <td data-th="rollup/rollup"><span>아니오</span></td> <td data-th="brunch/brunch"><span>아니오</span></td> </tr> <tr> <td data-th="기능"><span>CommonJS <code>exports</code></span></td> <td data-th="webpack/webpack"><span><strong>예</strong></span></td> <td data-th="jrburke/requirejs"><span><code>define</code>으로 감싼것만</span></td> <td data-th="substack/node-browserify"><span><strong>예</strong></span></td> <td data-th="jspm/jspm-cli"><span>예</span></td> <td data-th="rollup/rollup"><span><a href="https://github.com/rollup/rollup-plugin-commonjs">commonjs-plugin</a></span></td> <td data-th="brunch/brunch"><span>예</span></td> </tr> <tr> <td data-th="기능"><span>CommonJS <code>require</code></span></td> <td data-th="webpack/webpack"><span><strong>예</strong></span></td> <td data-th="jrburke/requirejs"><span><code>define</code>으로 감싼것만</span></td> <td data-th="substack/node-browserify"><span><strong>예</strong></span></td> <td data-th="jspm/jspm-cli"><span>예</span></td> <td data-th="rollup/rollup"><span><a href="https://github.com/rollup/rollup-plugin-commonjs">commonjs-plugin</a></span></td> <td data-th="brunch/brunch"><span>예</span></td> </tr> <tr> <td data-th="기능"><span>CommonJS <code>require.resolve</code></span></td> <td data-th="webpack/webpack"><span><strong>예</strong></span></td> <td data-th="jrburke/requirejs"><span>아니오</span></td> <td data-th="substack/node-browserify"><span>아니오</span></td> <td data-th="jspm/jspm-cli"><span>아니오</span></td> <td data-th="rollup/rollup"><span>아니오</span></td> <td data-th="brunch/brunch"><span>-</span></td> </tr> <tr> <td data-th="기능"><span>require에서의 연결 <code>require("./fi" + "le")</code></span></td> <td data-th="webpack/webpack"><span><strong>예</strong></span></td> <td data-th="jrburke/requirejs"><span>아니오♦</span></td> <td data-th="substack/node-browserify"><span>아니오</span></td> <td data-th="jspm/jspm-cli"><span>아니오</span></td> <td data-th="rollup/rollup"><span>아니오</span></td> <td data-th="brunch/brunch"><span>-</span></td> </tr> <tr> <td data-th="기능"><span>디버깅 지원</span></td> <td data-th="webpack/webpack"><span><strong>소스Url(SourceUrl), 소스맵(SourceMaps)</strong></span></td> <td data-th="jrburke/requirejs"><span>불필요</span></td> <td data-th="substack/node-browserify"><span>소스맵(SourceMaps)</span></td> <td data-th="jspm/jspm-cli"><span><strong>소스Url(SourceUrl), 소스맵(SourceMaps)</strong></span></td> <td data-th="rollup/rollup"><span><strong>소스Url(SourceUrl), 소스맵(SourceMaps)</strong></span></td> <td data-th="brunch/brunch"><span>소스맵(SourceMaps)</span></td> </tr> <tr> <td data-th="기능"><span>의존성</span></td> <td data-th="webpack/webpack"><span>19MB / 127 패키지</span></td> <td data-th="jrburke/requirejs"><span>11MB / 118 패키지</span></td> <td data-th="substack/node-browserify"><span><strong>1.2MB / 1 패키지</strong></span></td> <td data-th="jspm/jspm-cli"><span>26MB / 131 패키지</span></td> <td data-th="rollup/rollup"><span>?MB / 3 패키지</span></td> <td data-th="brunch/brunch"><span>-</span></td> </tr> <tr> <td data-th="기능"><span>ES2015 <code>import</code>/<code>export</code></span></td> <td data-th="webpack/webpack"><span><strong>예</strong> (webpack 2)</span></td> <td data-th="jrburke/requirejs"><span>아니오</span></td> <td data-th="substack/node-browserify"><span>아니오</span></td> <td data-th="jspm/jspm-cli"><span><strong>예</strong></span></td> <td data-th="rollup/rollup"><span><strong>예</strong></span></td> <td data-th="brunch/brunch"><span>예, <a href="https://github.com/gcollazo/es6-module-transpiler-brunch">es6 모듈 트랜스파일러</a>를 통해</span></td> </tr> <tr> <td data-th="기능"><span>require에서의 표현식 (가이드된) <code>require("./templates/" + template)</code></span></td> <td data-th="webpack/webpack"><span><strong>예 (모든 파일 매칭 포함)</strong></span></td> <td data-th="jrburke/requirejs"><span>아니오♦</span></td> <td data-th="substack/node-browserify"><span>아니오</span></td> <td data-th="jspm/jspm-cli"><span>아니오</span></td> <td data-th="rollup/rollup"><span>아니오</span></td> <td data-th="brunch/brunch"><span>아니오</span></td> </tr> <tr> <td data-th="기능"><span>require에서의 표현식 (자율) <code>require(moduleName)</code></span></td> <td data-th="webpack/webpack"><span>수동 설정으로</span></td> <td data-th="jrburke/requirejs"><span>아니오♦</span></td> <td data-th="substack/node-browserify"><span>아니오</span></td> <td data-th="jspm/jspm-cli"><span>아니오</span></td> <td data-th="rollup/rollup"><span>아니오</span></td> <td data-th="brunch/brunch"><span>-</span></td> </tr> <tr> <td data-th="기능"><span>단일 번들 생성</span></td> <td data-th="webpack/webpack"><span><strong>예</strong></span></td> <td data-th="jrburke/requirejs"><span>예♦</span></td> <td data-th="substack/node-browserify"><span>예</span></td> <td data-th="jspm/jspm-cli"><span>예</span></td> <td data-th="rollup/rollup"><span>예</span></td> <td data-th="brunch/brunch"><span>예</span></td> </tr> <tr> <td data-th="기능"><span>간접 require 구문 <code>var r = require; r("./file")</code></span></td> <td data-th="webpack/webpack"><span><strong>예</strong></span></td> <td data-th="jrburke/requirejs"><span>아니오♦</span></td> <td data-th="substack/node-browserify"><span>아니오</span></td> <td data-th="jspm/jspm-cli"><span>아니오</span></td> <td data-th="rollup/rollup"><span>아니오</span></td> <td data-th="brunch/brunch"><span>-</span></td> </tr> <tr> <td data-th="기능"><span>각 파일을 별도로 로드</span></td> <td data-th="webpack/webpack"><span>아니오</span></td> <td data-th="jrburke/requirejs"><span>예</span></td> <td data-th="substack/node-browserify"><span>아니오</span></td> <td data-th="jspm/jspm-cli"><span>예</span></td> <td data-th="rollup/rollup"><span>아니오</span></td> <td data-th="brunch/brunch"><span>아니오</span></td> </tr> <tr> <td data-th="기능"><span>경로 이름 변경</span></td> <td data-th="webpack/webpack"><span><strong>예</strong></span></td> <td data-th="jrburke/requirejs"><span>아니오</span></td> <td data-th="substack/node-browserify"><span>부분적으로</span></td> <td data-th="jspm/jspm-cli"><span>예</span></td> <td data-th="rollup/rollup"><span>불필요 (경로이름이 번들에 포함되지 않음)</span></td> <td data-th="brunch/brunch"><span>아니오</span></td> </tr> <tr> <td data-th="기능"><span>최소화</span></td> <td data-th="webpack/webpack"><span><a href="https://github.com/fabiosantoscode/terser">Terser</a></span></td> <td data-th="jrburke/requirejs"><span>uglify, 클로저 컴파일러</span></td> <td data-th="substack/node-browserify"><span><a href="https://github.com/hughsk/uglifyify">uglifyify</a></span></td> <td data-th="jspm/jspm-cli"><span>예</span></td> <td data-th="rollup/rollup"><span><a href="https://github.com/TrySound/rollup-plugin-uglify">uglify-plugin</a></span></td> <td data-th="brunch/brunch"><span><a href="https://github.com/brunch/uglify-js-brunch">UglifyJS-brunch</a></span></td> </tr> <tr> <td data-th="기능"><span>공통 번들로 구성된 다중 페이지 작성</span></td> <td data-th="webpack/webpack"><span>수동 설정으로</span></td> <td data-th="jrburke/requirejs"><span><strong>예</strong></span></td> <td data-th="substack/node-browserify"><span>수동 설정으로</span></td> <td data-th="jspm/jspm-cli"><span>번들 계산으로</span></td> <td data-th="rollup/rollup"><span>아니오</span></td> <td data-th="brunch/brunch"><span>아니오</span></td> </tr> <tr> <td data-th="기능"><span>여러 개의 번들</span></td> <td data-th="webpack/webpack"><span><strong>예</strong></span></td> <td data-th="jrburke/requirejs"><span>수동 설정으로</span></td> <td data-th="substack/node-browserify"><span>수동 설정으로</span></td> <td data-th="jspm/jspm-cli"><span>예</span></td> <td data-th="rollup/rollup"><span>아니오</span></td> <td data-th="brunch/brunch"><span>예</span></td> </tr> <tr> <td data-th="기능"><span>Node.js 내장 라이브러리 <code>require("path")</code></span></td> <td data-th="webpack/webpack"><span><strong>예</strong></span></td> <td data-th="jrburke/requirejs"><span>아니오</span></td> <td data-th="substack/node-browserify"><span><strong>예</strong></span></td> <td data-th="jspm/jspm-cli"><span><strong>예</strong></span></td> <td data-th="rollup/rollup"><span><a href="https://github.com/rollup/rollup-plugin-node-resolve">node-resolve-plugin</a></span></td> <td data-th="brunch/brunch"><span>-</span></td> </tr> <tr> <td data-th="기능"><span>그밖에 Node.js 관련</span></td> <td data-th="webpack/webpack"><span>process, __dir/filename, global</span></td> <td data-th="jrburke/requirejs"><span>-</span></td> <td data-th="substack/node-browserify"><span>process, __dir/filename, global</span></td> <td data-th="jspm/jspm-cli"><span>process, __dir/filename, global for cjs</span></td> <td data-th="rollup/rollup"><span>global (<a href="https://github.com/rollup/rollup-plugin-commonjs">commonjs-plugin</a>)</span></td> <td data-th="brunch/brunch"><span>-</span></td> </tr> <tr> <td data-th="기능"><span>플러그인</span></td> <td data-th="webpack/webpack"><span><strong>예</strong></span></td> <td data-th="jrburke/requirejs"><span>예</span></td> <td data-th="substack/node-browserify"><span><strong>예</strong></span></td> <td data-th="jspm/jspm-cli"><span>예</span></td> <td data-th="rollup/rollup"><span>예</span></td> <td data-th="brunch/brunch"><span>예</span></td> </tr> <tr> <td data-th="기능"><span>전처리</span></td> <td data-th="webpack/webpack"><span><strong>로더</strong></span></td> <td data-th="jrburke/requirejs"><span>로더</span></td> <td data-th="substack/node-browserify"><span>변환</span></td> <td data-th="jspm/jspm-cli"><span>플러그인 번역</span></td> <td data-th="rollup/rollup"><span>플러그인 번환</span></td> <td data-th="brunch/brunch"><span>컴파일러, 최적화 도구</span></td> </tr> <tr> <td data-th="기능"><span>브라우저 대체</span></td> <td data-th="webpack/webpack"><span><code>web_modules</code>, <code>.web.js</code>, package.json 필드, 별칭 설정 옵션</span></td> <td data-th="jrburke/requirejs"><span>별칭 옵션</span></td> <td data-th="substack/node-browserify"><span>package.json 필드, 별칭 옵션</span></td> <td data-th="jspm/jspm-cli"><span>package.json, 별칭 옵션</span></td> <td data-th="rollup/rollup"><span>아니오</span></td> <td data-th="brunch/brunch"><span>-</span></td> </tr> <tr> <td data-th="기능"><span>필수 파일</span></td> <td data-th="webpack/webpack"><span>파일 시스템</span></td> <td data-th="jrburke/requirejs"><span><strong>웹</strong></span></td> <td data-th="substack/node-browserify"><span>파일 시스템</span></td> <td data-th="jspm/jspm-cli"><span>플러그인을 통해</span></td> <td data-th="rollup/rollup"><span>파일 시스템이나 플러그인을 통해</span></td> <td data-th="brunch/brunch"><span>파일 시스템</span></td> </tr> <tr> <td data-th="기능"><span>런타임 오버헤드</span></td> <td data-th="webpack/webpack"><span><strong>243B + 20B per module + 4B per dependency</strong></span></td> <td data-th="jrburke/requirejs"><span>14.7kB + 0B 모듈별로 + (3B + X) 의존성별로</span></td> <td data-th="substack/node-browserify"><span>415B + 25B 모듈별로 + (6B + 2X) 의존성별로</span></td> <td data-th="jspm/jspm-cli"><span>5.5kB 자체 실행 번들을 위해, 38kB 전체 로더와 폴리필을 위해, 0 일반 모듈, 293B CJS, 139B ES2015 System.register gzip실행전</span></td> <td data-th="rollup/rollup"><span><strong>ES2015 모듈이 없음</strong> (다른 포멧이 있을 수 있음)</span></td> <td data-th="brunch/brunch"><span>-</span></td> </tr> <tr> <td data-th="기능"><span>Watch 모드</span></td> <td data-th="webpack/webpack"><span>예</span></td> <td data-th="jrburke/requirejs"><span>불필요</span></td> <td data-th="substack/node-browserify"><span><a href="https://github.com/browserify/watchify">watchify</a></span></td> <td data-th="jspm/jspm-cli"><span>개발환경에서 필요없음</span></td> <td data-th="rollup/rollup"><span><a href="https://github.com/rollup/rollup-watch">rollup-watch</a></span></td> <td data-th="brunch/brunch"><span>예</span></td> </tr> </tbody> </table> <p>♦ 프로덕션 모드에서 (개발 모드와 반대)</p> <p>X는 경로 문자열의 길이 입니다</p> <h2 id="bundling-vs-loading">Bundling vs. Loading<a href="#bundling-vs-loading" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><em>로딩</em> 과 <em>번들링</em> 모듈 간의 몇 가지 주요 차이점을 확인하는 것이 중요합니다. <a href="https://github.com/jspm/jspm-cli">JSPM의</a> 내부에 있는 [SystemJS와] (<a href="https://github.com/systemjs/systemjs">https://github.com/systemjs/systemjs</a>) 같은 도구를 사용하여 브라우저에서 런타임에 모듈을 로드하고 트랜스파일 합니다. 이는 모듈이 트랜스파일되고 ("로더"를 통해) 브라우저에 도달하기 전에 번들로 제공되는 webpack과는 상당히 다릅니다.</p> <p>각 방법에는 장단점이 있습니다. 런타임에 모듈을 로드하고 트랜스파일하면 많은 모듈로 구성된 대규모 사이트와 애플리케이션에 많은 오버헤드를 추가할 수 있습니다. 이러한 이유로 SystemJS는 필요한 모듈이 적은 소규모 프로젝트에 더 적합합니다. 그러나 <a href="https://http2.github.io/">HTTP/2가</a> 서버에서 클라이언트로 파일을 전송할 수 있는 속도를 향상시키기 때문에 다소 변경될 수 있습니다. HTTP/2는 <em>트랜스파일</em> 모듈에 대한 어떤 것도 변경하지 않으며, 클라이언트에서 수행할 때 항상 시간이 더 오래 걸립니다.</p> '}}]);