(self.webpackChunk=self.webpackChunk||[]).push([[6959],{6959:function(n,s,a){"use strict";a.r(s),s.default='<p>엔트리 객체는 webpack이 번들 빌드를 시작하는 곳입니다. 컨텍스트는 엔트리 파일을 포함하는 디렉터리에 대한 절대 경로입니다.</p> <h2 id="context"><code>context</code><a href="#context" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string</code></p> <p>설정에서 엔트리 포인트와 로더를 확인하기 위한 <strong>절대 경로의</strong> 기본 디렉터리.</p> <pre><code class="hljs language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  context<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'app\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>기본적으로 현재 디렉터리가 사용되지만, 설정에 값을 전달하는 것이 좋습니다. 이렇게 하면 CWD(현재 작업 디렉터리)와 독립적인 설정이 가능합니다.</p> <hr> <h2 id="entry"><code>entry</code><a href="#entry" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string</code> <code>[string]</code> <code>object = { &#x3C;key> string | [string] | object = { import string | [string], dependOn string | [string], filename string, layer string }}</code> <code>(function() => string | [string] | object = { &#x3C;key> string | [string] } | object = { import string | [string], dependOn string | [string], filename string })</code></p> <p>애플리케이션 번들 처리를 시작할 지점입니다. 배열이 전달되면 배열의 모든 항목이 처리됩니다.</p> <p>동적으로 로드된 모듈은 엔트리 포인트가 <strong>아닙니다.</strong></p> <p>간단한 규칙: HTML 페이지 당 하나의 엔트리 포인트. SPA: 하나의 엔트리 포인트, MPA: 다중 엔트리 포인트.</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  entry<span class="token operator">:</span> <span class="token punctuation">{</span>\n    home<span class="token operator">:</span> <span class="token string">\'./home.js\'</span><span class="token punctuation">,</span>\n    about<span class="token operator">:</span> <span class="token string">\'./about.js\'</span><span class="token punctuation">,</span>\n    contact<span class="token operator">:</span> <span class="token string">\'./contact.js\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="naming">Naming<a href="#naming" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>문자열 또는 문자열 배열이 전달되면, 청크 이름은 <code>main</code>입니다. 객체가 전달되면, 객체의 키는 청크의 이름이 되고, 객체의 값은 청크의 엔트리 포인트를 설명합니다.</p> <h3 id="entry-descriptor">Entry descriptor<a href="#entry-descriptor" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>객체가 전달되면 객체의 값은 문자열, 문자열 배열 또는 디스크립터가 될 수 있습니다.</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  entry<span class="token operator">:</span> <span class="token punctuation">{</span>\n    home<span class="token operator">:</span> <span class="token string">\'./home.js\'</span><span class="token punctuation">,</span>\n    shared<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'react\'</span><span class="token punctuation">,</span> <span class="token string">\'react-dom\'</span><span class="token punctuation">,</span> <span class="token string">\'redux\'</span><span class="token punctuation">,</span> <span class="token string">\'react-redux\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    catalog<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">import</span><span class="token operator">:</span> <span class="token string">\'./catalog.js\'</span><span class="token punctuation">,</span>\n      filename<span class="token operator">:</span> <span class="token string">\'pages/catalog.js\'</span><span class="token punctuation">,</span>\n      dependOn<span class="token operator">:</span> <span class="token string">\'shared\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    personal<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">import</span><span class="token operator">:</span> <span class="token string">\'./personal.js\'</span><span class="token punctuation">,</span>\n      filename<span class="token operator">:</span> <span class="token string">\'pages/personal.js\'</span><span class="token punctuation">,</span>\n      dependOn<span class="token operator">:</span> <span class="token string">\'shared\'</span><span class="token punctuation">,</span>\n      chunkLoading<span class="token operator">:</span> <span class="token string">\'jsonp\'</span><span class="token punctuation">,</span>\n      layer<span class="token operator">:</span> <span class="token string">\'name of layer\'</span><span class="token punctuation">,</span> <span class="token comment">// 엔트리 포인트에 대한 레이어 설정</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>디스크립터를 사용하여 추가 옵션을 엔트리 포인트에 전달할 수 있습니다.</p> <h3 id="output-filename">Output filename<a href="#output-filename" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>기본적으로, 엔트리 청크의 출력 파일 이름은 <a href="/configuration/output/#outputfilename"><code>output.filename</code></a>에서 추출되지만, 특정 엔트리에 대한 커스텀 출력 파일 이름을 지정할 수 있습니다.</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  entry<span class="token operator">:</span> <span class="token punctuation">{</span>\n    app<span class="token operator">:</span> <span class="token string">\'./app.js\'</span><span class="token punctuation">,</span>\n    home<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token keyword">import</span><span class="token operator">:</span> <span class="token string">\'./contact.js\'</span><span class="token punctuation">,</span> filename<span class="token operator">:</span> <span class="token string">\'pages/[name][ext]\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    about<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token keyword">import</span><span class="token operator">:</span> <span class="token string">\'./about.js\'</span><span class="token punctuation">,</span> filename<span class="token operator">:</span> <span class="token string">\'pages/[name][ext]\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>여기의 디스크립터는 특정 엔트리 포인트에 <code>filename</code> 옵션을 전달하는 데 사용되었습니다.</p> <h3 id="dependencies">Dependencies<a href="#dependencies" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>기본적으로, 모든 엔트리 청크는 사용하는 모든 모듈을 저장합니다. <code>dependOn</code> 옵션을 사용하면 한 엔트리 청크에서 다른 엔트리 청크로 모듈을 공유할 수 있습니다.</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  entry<span class="token operator">:</span> <span class="token punctuation">{</span>\n    app<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token keyword">import</span><span class="token operator">:</span> <span class="token string">\'./app.js\'</span><span class="token punctuation">,</span> dependOn<span class="token operator">:</span> <span class="token string">\'react-vendors\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token string">\'react-vendors\'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'react\'</span><span class="token punctuation">,</span> <span class="token string">\'react-dom\'</span><span class="token punctuation">,</span> <span class="token string">\'prop-types\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p><code>app</code> 청크에는 <code>react-vendors</code>에 있는 모듈이 포함되지 않습니다.</p> <p><code>dependOn</code> 옵션은 문자열 배열을 허용합니다.</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  entry<span class="token operator">:</span> <span class="token punctuation">{</span>\n    moment<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token keyword">import</span><span class="token operator">:</span> <span class="token string">\'moment-mini\'</span><span class="token punctuation">,</span> runtime<span class="token operator">:</span> <span class="token string">\'runtime\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    reactvendors<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token keyword">import</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'react\'</span><span class="token punctuation">,</span> <span class="token string">\'react-dom\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> runtime<span class="token operator">:</span> <span class="token string">\'runtime\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    testapp<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">import</span><span class="token operator">:</span> <span class="token string">\'./wwwroot/component/TestApp.tsx\'</span><span class="token punctuation">,</span>\n      dependOn<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'reactvendors\'</span><span class="token punctuation">,</span> <span class="token string">\'moment\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>또한, 배열을 사용해서 하나의 엔트리에 여러 개의 파일을 지정할 수 있습니다.</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  entry<span class="token operator">:</span> <span class="token punctuation">{</span>\n    app<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token keyword">import</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'./app.js\'</span><span class="token punctuation">,</span> <span class="token string">\'./app2.js\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dependOn<span class="token operator">:</span> <span class="token string">\'react-vendors\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token string">\'react-vendors\'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'react\'</span><span class="token punctuation">,</span> <span class="token string">\'react-dom\'</span><span class="token punctuation">,</span> <span class="token string">\'prop-types\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="dynamic-entry">Dynamic entry<a href="#dynamic-entry" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>함수가 전달되면 모든 <a href="/api/compiler-hooks/#make">make</a> 이벤트에서 호출됩니다.</p> <blockquote> <p>make 이벤트는 webpack이 시작될 때와 <a href="/configuration/watch/">파일 변경을 감시</a> 할 때 모든 유효하지 않은 상황에서 호출됩니다.</p> </blockquote> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  <span class="token function-variable function">entry</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">\'./demo\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>또는</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  <span class="token function-variable function">entry</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'./demo\'</span><span class="token punctuation">,</span> <span class="token string">\'./demo2\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>예: 외부 소스(원격 서버, 파일 시스템 콘텐츠 또는 데이터베이스)에서 실제 엔트리를 가져오기 위해 동적 엔트리를 사용할 수 있습니다.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">entry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">fetchPathsFromSomeExternalSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns a promise that will be resolved with something like [\'src/main-layout.js\', \'src/admin-layout.js\']</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p><a href="/configuration/output/#outputlibrary"><code>output.library</code></a> 옵션과 결합하는 경우, 배열이 전달되면 마지막 항목만 내보냅니다.</p> '}}]);