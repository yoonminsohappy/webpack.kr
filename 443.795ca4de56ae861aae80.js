"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[443],{443:function(a,n,s){s.r(n),n.default='<p>이 설정을 적절하게 사용하고 쉽게 배포하려면 <code>webpack.config.js</code>로 webpack을 설정 할 수 있습니다. CLI로 전송된 모든 파라미터는 설정 파일의 해당 파라미터에 매핑됩니다.</p> <p>webpack 및 CLI를 아직 설치하지 않은 경우 <a href="/guides/installation">설치 가이드</a>를 읽어보세요.</p> <h2 id="commands">Commands<a href="#commands" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>webpack-cli는 webpack을 더 쉽게 사용할 수 있도록 다양한 명령을 제공합니다. 기본적으로 webpack은 다음과 같은 명령어를 제공합니다.</p> <table> <thead> <tr> <th>명령어</th> <th>사용법</th> <th>설명</th> </tr> </thead> <tbody> <tr> <td data-th="명령어"><span><code>build</code></span></td> <td data-th="사용법"><span><code>build|bundle|b [entries...] [options]</code></span></td> <td data-th="설명"><span>webpack을 실행합니다. (기본 명령어, 생략 가능).</span></td> </tr> <tr> <td data-th="명령어"><span><a href="#configtest"><code>configtest</code></a></span></td> <td data-th="사용법"><span><code>configtest|t [config-path]</code></span></td> <td data-th="설명"><span>webpack 설정을 검증합니다.</span></td> </tr> <tr> <td data-th="명령어"><span><a href="#help"><code>help</code></a></span></td> <td data-th="사용법"><span><code>help|h [command] [option]</code></span></td> <td data-th="설명"><span>명렁어 및 옵션에 대한 도움말을 표시합니다.</span></td> </tr> <tr> <td data-th="명령어"><span><a href="#info"><code>info</code></a></span></td> <td data-th="사용법"><span><code>info|i [options]</code></span></td> <td data-th="설명"><span>시스템 정보를 출력합니다.</span></td> </tr> <tr> <td data-th="명령어"><span><a href="#init"><code>init</code></a></span></td> <td data-th="사용법"><span><code>init|create|c|new|n [generation-path] [options]</code></span></td> <td data-th="설명"><span>새로운 webpack 프로젝트를 초기화합니다.</span></td> </tr> <tr> <td data-th="명령어"><span><code>loader</code></span></td> <td data-th="사용법"><span><code>loader|l [output-path] [options]</code></span></td> <td data-th="설명"><span>로더를 스캐폴드합니다.</span></td> </tr> <tr> <td data-th="명령어"><span><code>plugin</code></span></td> <td data-th="사용법"><span><code>plugin|p [output-path] [options]</code></span></td> <td data-th="설명"><span>플러그인을 스캐폴드합니다.</span></td> </tr> <tr> <td data-th="명령어"><span><a href="/configuration/dev-server/"><code>serve</code></a></span></td> <td data-th="사용법"><span><code>serve|server|s [options]</code></span></td> <td data-th="설명"><span><code>webpack-dev-server</code>를 실행합니다.</span></td> </tr> <tr> <td data-th="명령어"><span><a href="#version"><code>version</code></a></span></td> <td data-th="사용법"><span><code>version|v [commands...]</code></span></td> <td data-th="설명"><span><code>webpack</code>, <code>webpack-cli</code> 및 <code>webpack-dev-server</code>의 버전 넘버를 출력합니다.</span></td> </tr> <tr> <td data-th="명령어"><span><code>watch</code></span></td> <td data-th="사용법"><span><code>watch|w [entries...] [options]</code></span></td> <td data-th="설명"><span>webpack을 실행하고 파일 변경을 감지합니다.</span></td> </tr> </tbody> </table> <h3 id="init">Init<a href="#init" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>새 webpack 프로젝트를 초기화하기 위해 사용합니다.</p> <pre><code class="hljs language-bash">npx webpack init <span class="token punctuation">[</span>generation-path<span class="token punctuation">]</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span></code></pre> <p><strong>예시</strong></p> <pre><code class="hljs language-bash">npx webpack init ./my-app --force --template<span class="token operator">=</span>default</code></pre> <h4 id="generation-path">Generation Path<a href="#generation-path" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>설정을 생성할 위치입니다. 기본값은 <code>process.cwd()</code>입니다.</p> <h4 id="options">Options<a href="#options" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p><strong><code>-t</code>, <code>--template</code></strong></p> <p><code>string = \'default\'</code></p> <p>생성할 템플릿의 이름입니다.</p> <p><strong><code>-f</code>, <code>--force</code></strong></p> <p><code>boolean</code></p> <p>질문 없이 프로젝트를 생성합니다. 활성화하면 각 질문에 대한 기본 답변을 사용합니다.</p> <aside class="tip"><h6 class="tip__prefix">tip</h6><p><a href="https://github.com/webpack/webpack-cli/blob/master/packages/generators/INIT.md"><code>webpack init</code> 명령의 전체 문서</a>를 참고하세요.</p></aside> <h3 id="info">Info<a href="#info" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>시스템에 대한 정보를 출력합니다.</p> <pre><code class="hljs language-bash">npx webpack info <span class="token punctuation">[</span>options<span class="token punctuation">]</span></code></pre> <p><strong>예시</strong></p> <pre><code class="hljs language-bash">npx webpack info --output<span class="token operator">=</span>json</code></pre> <h4 id="options-for-info">Options for info<a href="#options-for-info" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p><strong><code>-o</code>, <code>--output</code></strong></p> <p><code>string : \'json\' | \'markdown\'</code></p> <p>지정된 형식으로 출력을 가져옵니다.</p> <h3 id="configtest">Configtest<a href="#configtest" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>webpack 설정을 검증합니다.</p> <pre><code class="hljs language-bash">npx webpack configtest <span class="token punctuation">[</span>config-path<span class="token punctuation">]</span></code></pre> <p><strong>예시</strong></p> <pre><code class="hljs language-bash">npx webpack configtest ./webpack.config.js</code></pre> <h4 id="config-path">Config Path<a href="#config-path" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>webpack 설정 파일의 경로입니다. 기본값은 <code>./webpack.config.js</code>입니다.</p> <h2 id="flags">Flags<a href="#flags" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>기본적으로 webpack은 다음 플래그와 함께 제공됩니다.</p> <table> <thead> <tr> <th>플래그 / 별칭</th> <th>타입</th> <th>설명</th> </tr> </thead> <tbody> <tr> <td data-th="플래그 / 별칭"><span><a href="#entry"><code>--entry</code></a></span></td> <td data-th="타입"><span>string[]</span></td> <td data-th="설명"><span>애플리케이션의 엔트리 포인트입니다. (예: <code>./src/main.js</code>)</span></td> </tr> <tr> <td data-th="플래그 / 별칭"><span><a href="#config"><code>--config, -c</code></a></span></td> <td data-th="타입"><span>string[]</span></td> <td data-th="설명"><span>webpack 설정 파일의 경로를 제공합니다. (예: <code>./webpack.config.js</code>)</span></td> </tr> <tr> <td data-th="플래그 / 별칭"><span><a href="#config-name"><code>--config-name</code></a></span></td> <td data-th="타입"><span>string[]</span></td> <td data-th="설명"><span>사용할 설정의 이름입니다.</span></td> </tr> <tr> <td data-th="플래그 / 별칭"><span><code>--name</code></span></td> <td data-th="타입"><span>string</span></td> <td data-th="설명"><span>사용할 설정의 이름. 복수의 설정을 로드할 때 사용합니다.</span></td> </tr> <tr> <td data-th="플래그 / 별칭"><span><code>--color</code></span></td> <td data-th="타입"><span>boolean</span></td> <td data-th="설명"><span>콘솔에서 색상 활성화</span></td> </tr> <tr> <td data-th="플래그 / 별칭"><span><a href="#merge"><code>--merge, -m</code></a></span></td> <td data-th="타입"><span>boolean</span></td> <td data-th="설명"><span><code>webpack-merge</code>를 사용하여 둘 이상의 구성을 병합합니다.</span></td> </tr> <tr> <td data-th="플래그 / 별칭"><span><a href="#env"><code>--env</code></a></span></td> <td data-th="타입"><span>string[]</span></td> <td data-th="설명"><span>함수일 때 설정에 전달된 환경입니다.</span></td> </tr> <tr> <td data-th="플래그 / 별칭"><span><a href="#node-env"><code>--node-env</code></a></span></td> <td data-th="타입"><span>string</span></td> <td data-th="설명"><span><code>process.env.NODE_ENV</code>를 지정된 값으로 설정합니다.</span></td> </tr> <tr> <td data-th="플래그 / 별칭"><span><a href="#progress"><code>--progress</code></a></span></td> <td data-th="타입"><span>boolean, string</span></td> <td data-th="설명"><span>빌드 중 컴파일 진행률을 출력합니다.</span></td> </tr> <tr> <td data-th="플래그 / 별칭"><span><a href="#help"><code>--help</code></a></span></td> <td data-th="타입"><span>boolean</span></td> <td data-th="설명"><span>지원되는 플래그 및 명령 목록을 출력합니다.</span></td> </tr> <tr> <td data-th="플래그 / 별칭"><span><a href="#output-path"><code>--output-path, -o</code></a></span></td> <td data-th="타입"><span>string</span></td> <td data-th="설명"><span>webpack에 의해 생성된 파일의 출력 위치입니다. (예: <code>./dist</code>)</span></td> </tr> <tr> <td data-th="플래그 / 별칭"><span><code>--target, -t</code></span></td> <td data-th="타입"><span>string[]</span></td> <td data-th="설명"><span>빌드 대상을 설정합니다.</span></td> </tr> <tr> <td data-th="플래그 / 별칭"><span><code>--watch, -w</code></span></td> <td data-th="타입"><span>boolean</span></td> <td data-th="설명"><span>파일 변경 사항을 확인합니다.</span></td> </tr> <tr> <td data-th="플래그 / 별칭"><span><code>--watch-options-stdin</code></span></td> <td data-th="타입"><span>boolean</span></td> <td data-th="설명"><span>stdin 스트림이 종료되면 감시를 중단합니다.</span></td> </tr> <tr> <td data-th="플래그 / 별칭"><span><code>--hot, -h</code></span></td> <td data-th="타입"><span>boolean</span></td> <td data-th="설명"><span>Hot Module Replacement를 활성화합니다.</span></td> </tr> <tr> <td data-th="플래그 / 별칭"><span><code>--devtool, -d</code></span></td> <td data-th="타입"><span>string</span></td> <td data-th="설명"><span>소스 맵 생성 여부와 방법을 제어합니다.</span></td> </tr> <tr> <td data-th="플래그 / 별칭"><span><code>--prefetch</code></span></td> <td data-th="타입"><span>string</span></td> <td data-th="설명"><span>이 요청을 미리 가져옵니다.</span></td> </tr> <tr> <td data-th="플래그 / 별칭"><span><a href="#json"><code>--json, -j</code></a></span></td> <td data-th="타입"><span>boolean, string</span></td> <td data-th="설명"><span>결과를 JSON으로 출력하거나 파일으로 저장합니다.</span></td> </tr> <tr> <td data-th="플래그 / 별칭"><span><code>--mode</code></span></td> <td data-th="타입"><span>string</span></td> <td data-th="설명"><span>webpack에 전달할 모드를 정의합니다.</span></td> </tr> <tr> <td data-th="플래그 / 별칭"><span><a href="#version"><code>--version, -v</code></a></span></td> <td data-th="타입"><span>boolean</span></td> <td data-th="설명"><span>현재 버전을 가져옵니다.</span></td> </tr> <tr> <td data-th="플래그 / 별칭"><span><code>--stats</code></span></td> <td data-th="타입"><span>boolean, string</span></td> <td data-th="설명"><span>webpack에 통계 처리 방법을 지시합니다.</span></td> </tr> <tr> <td data-th="플래그 / 별칭"><span><a href="#analyzing-bundle"><code>--analyze</code></a></span></td> <td data-th="타입"><span>boolean</span></td> <td data-th="설명"><span>번들 정보를 얻기 위해 <code>webpack-bundle-analyzer</code> 플러그인을 호출합니다.</span></td> </tr> </tbody> </table> <h3 id="negated-flags">Negated Flags<a href="#negated-flags" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <table> <thead> <tr> <th>플래그</th> <th>설명</th> </tr> </thead> <tbody> <tr> <td data-th="플래그"><span><code>--no-color</code></span></td> <td data-th="설명"><span>콘솔에서 모든 색상을 비활성화합니다.</span></td> </tr> <tr> <td data-th="플래그"><span><code>--no-hot</code></span></td> <td data-th="설명"><span>설정을 통해 활성화한 경우 핫 리로딩을 비활성화합니다.</span></td> </tr> <tr> <td data-th="플래그"><span><code>--no-stats</code></span></td> <td data-th="설명"><span>webpack에서 내보낸 컴파일 통계를 비활성화합니다.</span></td> </tr> <tr> <td data-th="플래그"><span><code>--no-watch</code></span></td> <td data-th="설명"><span>파일 변경을 감시하지 않습니다.</span></td> </tr> <tr> <td data-th="플래그"><span><code>--no-devtool</code></span></td> <td data-th="설명"><span>소스 맵을 생성하지 않습니다.</span></td> </tr> <tr> <td data-th="플래그"><span><code>--no-watch-options-stdin</code></span></td> <td data-th="설명"><span>stdin 스트림이 종료되어도 감시를 중단하지 않습니다.</span></td> </tr> </tbody> </table> <h3 id="core-flags">Core Flags<a href="#core-flags" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>CLI v4와 webpack v5부터 CLI는 webpack 코어에서 전체 설정 스키마를 가져옵니다. 커맨드 라인에서 거의 모든 설정 옵션을 조정할 수 있습니다.</p> <p><strong>CLI v4를 통한 webpack v5에서 지원하는 모든 코어 플래그 목록입니다. - <a href="https://github.com/webpack/webpack-cli/blob/master/OPTIONS.md">링크</a></strong></p> <p>예를 들어, 프로젝트에서 성능 힌트를 활성화하려면 설정에서 <a href="https://webpack.js.org/configuration/performance/#performancehints">이 옵션</a>을 사용할 수 있습니다. 코어 플래그를 사용하면 아래와 같이 할 수 있습니다.</p> <pre><code class="hljs language-bash">npx webpack --performance-hints warning</code></pre> <h2 id="usage">Usage<a href="#usage" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <h3 id="with-configuration-file">With configuration file<a href="#with-configuration-file" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <pre><code class="hljs language-bash">npx webpack <span class="token punctuation">[</span>--config webpack.config.js<span class="token punctuation">]</span></code></pre> <p>설정 파일의 옵션은 <a href="/configuration">configuration</a>을 참고하세요.</p> <h3 id="without-configuration-file">Without configuration file<a href="#without-configuration-file" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <pre><code class="hljs language-bash">npx webpack --entry <span class="token operator">&#x3C;</span>entry<span class="token operator">></span> --output-path <span class="token operator">&#x3C;</span>output-path<span class="token operator">></span></code></pre> <p><strong>예시</strong></p> <pre><code class="hljs language-bash">npx webpack --entry ./first.js --entry ./second.js --output-path /build</code></pre> <h4 id="entry">entry<a href="#entry" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>프로젝트 빌드를 위한 엔트리 포인트 파일명 또는 명명된 파일명 모음입니다. 복수의 엔트리를 전달할 수 있습니다 (모든 항목은 시작 시 로드됩니다). 다음은 CLI를 통해 엔트리 파일을 지정하는 여러 가지 방법입니다.</p> <pre><code class="hljs language-bash">npx webpack ./first-entry.js</code></pre> <pre><code class="hljs language-bash">npx webpack --entry ./first-entry.js</code></pre> <pre><code class="hljs language-bash">npx webpack ./first-entry.js ./other-entry.js</code></pre> <pre><code class="hljs language-bash">npx webpack --entry ./first-entry.js ./other-entry.js</code></pre> <aside class="tip"><h6 class="tip__prefix">tip</h6><p><code>webpack [command] [entries ...] [option]</code>구문을 사용합니다. 일부 옵션은 복수의 값을 허용할 수 있으므로 <code>webpack --target node ./entry.js</code>는 <code>target: [\'node\', \'./entry.js\']</code>를 의미합니다.</p></aside> <h4 id="output-path">output-path<a href="#output-path" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>저장할 번들 파일의 경로입니다. 설정 옵션의 <code>output.path</code>에 매핑됩니다.</p> <p><strong>예시</strong></p> <p>프로젝트 구조가 다음과 같다고 가정해봅니다.</p> <pre><code class="hljs language-bash"><span class="token builtin class-name">.</span>\n├── dist\n├── index.html\n└── src\n    ├── index.js\n    ├── index2.js\n    └── others.js</code></pre> <pre><code class="hljs language-bash">npx webpack ./src/index.js --output-path dist</code></pre> <p>이 명령어는 소스 코드와 엔트리를 함께 <code>index.js</code>로 번들합니다. 출력 번들 파일의 경로는 <code>dist</code>입니다.</p> <pre><code class="hljs language-bash">asset main.js <span class="token number">142</span> bytes <span class="token punctuation">[</span>compared <span class="token keyword">for</span> emit<span class="token punctuation">]</span> <span class="token punctuation">[</span>minimized<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: main<span class="token punctuation">)</span>\n./src/index.js <span class="token number">30</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n./src/others.js <span class="token number">1</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\nwebpack <span class="token number">5.1</span>.0 compiled successfully <span class="token keyword">in</span> <span class="token number">187</span> ms</code></pre> <pre><code class="hljs language-bash">npx webpack ./src/index.js ./src/others2.js --output-path dist/</code></pre> <p>이것은 두 파일을 별도의 엔트리 포인트로 포함하는 번들을 생성합니다.</p> <pre><code class="hljs language-bash">asset main.js <span class="token number">142</span> bytes <span class="token punctuation">[</span>compared <span class="token keyword">for</span> emit<span class="token punctuation">]</span> <span class="token punctuation">[</span>minimized<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: main<span class="token punctuation">)</span>\n./src/index.js <span class="token number">30</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n./src/others2.js <span class="token number">1</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n./src/others.js <span class="token number">1</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\nwebpack <span class="token number">5.1</span>.0 compiled successfully <span class="token keyword">in</span> <span class="token number">198</span> ms</code></pre> <h2 id="default-configurations">Default Configurations<a href="#default-configurations" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>CLI는 프로젝트 경로에서 일부 기본 설정을 찾습니다. 아래는 CLI에서 찾는 설정 파일입니다.</p> <p>오름차순으로 우선 조회합니다.</p> <blockquote> <p>예 - 설정 파일 조회 순서는 .webpack/webpackfile > .webpack/webpack.config.js > webpack.config.js 입니다.</p> </blockquote> <pre><code class="hljs language-txt">\'webpack.config\',\n\'.webpack/webpack.config\',\n\'.webpack/webpackfile\',\n</code></pre> <h2 id="common-options">Common Options<a href="#common-options" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <aside class="warning"><h6 class="warning__prefix">warning</h6><p>커맨드 라인 인터페이스에서 사용하는 인수는 설정 파일보다 더 높은 우선순위를 가집니다. 예를 들어 설정 파일은 <code>development</code>를 사용하지만, webpack CLI에 <a href="/configuration/mode/#usage"><code>--mode="production"</code></a>을 전달한 경우 <code>production</code>이 사용됩니다.</p></aside> <h3 id="help">help<a href="#help" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><strong>CLI에서 사용 가능한 기본 명령 및 플래그 나열</strong></p> <p><code>webpack help [command] [option]</code> 및 <code>webpack [command] --help</code> 모두 유효합니다.</p> <pre><code class="hljs language-bash">npx webpack --help\n\n<span class="token comment"># or</span>\n\nnpx webpack <span class="token builtin class-name">help</span></code></pre> <p><strong>CLI에서 지원하는 모든 명령 및 플래그를 나열</strong></p> <pre><code class="hljs language-bash">npx webpack --help<span class="token operator">=</span>verbose</code></pre> <p><strong>특정 명령어 또는 옵션에 대한 도움말 보기</strong></p> <pre><code class="hljs language-bash">npx webpack <span class="token builtin class-name">help</span> --mode</code></pre> <h3 id="version">version<a href="#version" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><strong>설치된 패키지 및 하위 패키지의 버전 표시</strong></p> <p>사용 중인 <code>webpack</code> 및 <code>webpack-cli</code>의 버전을 검사하려면 다음 명령을 실행하세요.</p> <pre><code class="hljs language-bash">npx webpack --version\n\n<span class="token comment"># or</span>\n\nnpx webpack version</code></pre> <p>다음 결과가 출력됩니다.</p> <pre><code class="hljs language-bash">webpack <span class="token number">5.31</span>.2\nwebpack-cli <span class="token number">4.6</span>.0</code></pre> <p><code>webpack-dev-server</code>가 설치된 경우 해당 버전도 출력합니다.</p> <pre><code class="hljs language-bash">webpack <span class="token number">5.31</span>.2\nwebpack-cli <span class="token number">4.6</span>.0\nwebpack-dev-server <span class="token number">3.11</span>.2</code></pre> <p><code>@webpack-cli/info</code>와 같은 <code>webpack-cli</code>의 하위 패키지 버전을 검사하려면 다음과 같은 명령을 실행합니다.</p> <pre><code class="hljs language-bash">npx webpack info --version</code></pre> <p>그러면 다음 결과가 출력됩니다.</p> <pre><code class="hljs language-bash">@webpack-cli/info <span class="token number">1.2</span>.3\nwebpack <span class="token number">5.31</span>.2\nwebpack-cli <span class="token number">4.6</span>.0\nwebpack-dev-server <span class="token number">3.11</span>.2</code></pre> <h3 id="config">config<a href="#config" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><strong>설정 파일을 사용하여 소스 빌드</strong></p> <p>기본값 중 하나인 <code>webpack.config.js</code>가 아닌 다른 <a href="/configuration">configuration</a> 파일을 지정합니다.</p> <pre><code class="hljs language-bash">npx webpack --config example.config.js</code></pre> <h3 id="config-name">config-name<a href="#config-name" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>설정 파일이 여러 설정을 내보내는 경우 <code>--config-name</code>을 사용하여 실행할 설정을 지정할 수 있습니다.</p> <p>아래와 같은 <code>webpack.config.js</code>를 생각해 봅시다.</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    output<span class="token operator">:</span> <span class="token punctuation">{</span>\n      filename<span class="token operator">:</span> <span class="token string">\'./dist-first.js\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    name<span class="token operator">:</span> <span class="token string">\'first\'</span><span class="token punctuation">,</span>\n    entry<span class="token operator">:</span> <span class="token string">\'./src/first.js\'</span><span class="token punctuation">,</span>\n    mode<span class="token operator">:</span> <span class="token string">\'development\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    output<span class="token operator">:</span> <span class="token punctuation">{</span>\n      filename<span class="token operator">:</span> <span class="token string">\'./dist-second.js\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    name<span class="token operator">:</span> <span class="token string">\'second\'</span><span class="token punctuation">,</span>\n    entry<span class="token operator">:</span> <span class="token string">\'./src/second.js\'</span><span class="token punctuation">,</span>\n    mode<span class="token operator">:</span> <span class="token string">\'development\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    output<span class="token operator">:</span> <span class="token punctuation">{</span>\n      filename<span class="token operator">:</span> <span class="token string">\'./dist-third.js\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    name<span class="token operator">:</span> <span class="token string">\'third\'</span><span class="token punctuation">,</span>\n    entry<span class="token operator">:</span> <span class="token string">\'./src/third.js\'</span><span class="token punctuation">,</span>\n    mode<span class="token operator">:</span> <span class="token string">\'none\'</span><span class="token punctuation">,</span>\n    stats<span class="token operator">:</span> <span class="token string">\'verbose\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre> <p><code>second</code> 설정만 실행합니다.</p> <pre><code class="hljs language-bash">npx webpack --config-name second</code></pre> <p>여러 값을 전달할 수도 있습니다.</p> <pre><code class="hljs language-bash">npx webpack --config-name first --config-name second</code></pre> <h3 id="merge">merge<a href="#merge" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>--merge</code>의 도움으로 두 개 이상의 서로 다른 webpack 설정을 병합할 수 있습니다.</p> <pre><code class="hljs language-bash">npx webpack --config ./first.js --config ./second.js --merge</code></pre> <h3 id="json">json<a href="#json" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><strong>webpack 결과를 JSON으로 출력</strong></p> <pre><code class="hljs language-bash">npx webpack --json</code></pre> <p><strong>통계를 출력하는 대신 json으로 저장</strong></p> <pre><code class="hljs language-bash">npx webpack --json stats.json</code></pre> <p>다른 모든 경우에 webpack은 번들, 청크 및 타이밍 세부 정보를 보여주는 일련의 통계를 출력합니다. 이 옵션을 사용하면 출력이 JSON 객체가 될 수 있습니다. webpack의 <a href="https://webpack.github.io/analyse/">분석 도구</a>, chrisbateman의 <a href="https://chrisbateman.github.io/webpack-visualizer/">webpack-visualizer</a> 또는 th0r의 <a href="https://github.com/webpack-contrib/webpack-bundle-analyzer">webpack-bundle-analyzer</a> 에서 이 응답이 수락됩니다. 이러한 분석 도구는 JSON을 가져와서 빌드의 모든 세부 정보를 그래픽 형식으로 제공합니다.</p> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>여기에서 생성된 통계에 대한 자세한 내용은 <a href="/api/stats">통계 데이터 api</a>를 참고하세요.</p></aside> <h2 id="environment-options">Environment Options<a href="#environment-options" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>webpack 설정이 <a href="/configuration/configuration-types/#exporting-a-function">함수를 내보낼 때</a>"environment"를 설정에 전달할 수 있습니다.</p> <h3 id="env">env<a href="#env" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <pre><code class="hljs language-bash">npx webpack --env production    <span class="token comment"># env.production = true</span></code></pre> <p><code>--env</code> 인수는 복수의 값을 허용합니다.</p> <table> <thead> <tr> <th>호출</th> <th>결과 환경</th> </tr> </thead> <tbody> <tr> <td data-th="호출"><span><code>npx webpack --env prod</code></span></td> <td data-th="결과 환경"><span><code>{ prod: true }</code></span></td> </tr> <tr> <td data-th="호출"><span><code>npx webpack --env prod --env min</code></span></td> <td data-th="결과 환경"><span><code>{ prod: true, min: true }</code></span></td> </tr> <tr> <td data-th="호출"><span><code>npx webpack --env platform=app --env production</code></span></td> <td data-th="결과 환경"><span><code>{ platform: "app", production: true }</code></span></td> </tr> <tr> <td data-th="호출"><span><code>npx webpack --env foo=bar=app</code></span></td> <td data-th="결과 환경"><span><code>{ foo: "bar=app"}</code></span></td> </tr> <tr> <td data-th="호출"><span><code>npx webpack --env app.platform="staging" --env app.name="test"</code></span></td> <td data-th="결과 환경"><span><code>{ app: { platform: "staging", name: "test" }</code></span></td> </tr> </tbody> </table> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>사용법에 대한 자세한 내용은 <a href="/guides/environment-variables/">환경 변수</a> 가이드를 참고하세요.</p></aside> <p>위에 표시된 사용자 정의 <code>env</code> 외에도 <code>env</code> 하위에는 webpack 설정 내에서 사용되는 몇 가지 내장 기능이 있습니다.</p> <table> <thead> <tr> <th>환경 변수</th> <th>설명</th> </tr> </thead> <tbody> <tr> <td data-th="환경 변수"><span><code>WEBPACK_SERVE</code></span></td> <td data-th="설명"><span><code>serve|s</code>를 사용하고 있으면 <code>true</code></span></td> </tr> <tr> <td data-th="환경 변수"><span><code>WEBPACK_BUILD</code></span></td> <td data-th="설명"><span><code>build|bundle|b</code>를 사용하고 있으면 <code>true</code></span></td> </tr> <tr> <td data-th="환경 변수"><span><code>WEBPACK_WATCH</code></span></td> <td data-th="설명"><span><code>--watch|watch|w</code>를 사용하고 있으면 <code>true</code></span></td> </tr> </tbody> </table> <p>번들 코드 내에서는 이러한 내장 환경 변수에 접근할 수 없는 점을 알아두세요.</p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">env<span class="token punctuation">,</span> argv</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    mode<span class="token operator">:</span> env<span class="token punctuation">.</span><span class="token constant">WEBPACK_SERVE</span> <span class="token operator">?</span> <span class="token string">\'development\'</span> <span class="token operator">:</span> <span class="token string">\'production\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="node-env">node-env<a href="#node-env" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>--node-env</code> 옵션을 사용하여 <code>process.env.NODE_ENV</code>를 설정할 수 있습니다.</p> <pre><code class="hljs language-bash">npx webpack --node-env production   <span class="token comment"># process.env.NODE_ENV = \'production\'</span></code></pre> <aside class="tip"><h6 class="tip__prefix">tip</h6><p><code>mode</code> 옵션은 명시적으로 설정하지 않으면 <code>--node-env</code> 옵션을 받듭니다. 즉, <code>--node-env production</code>은 <code>process.env.NODE_ENV</code>와 <code>mode</code>를 모두 <code>\'production\'</code>으로 설정합니다.</p></aside> <h2 id="configuration-options">Configuration Options<a href="#configuration-options" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <table> <thead> <tr> <th>파라미터</th> <th>설명</th> <th>입력 타입</th> <th>기본값</th> </tr> </thead> <tbody> <tr> <td data-th="파라미터"><span><code>--config</code></span></td> <td data-th="설명"><span>설정 파일 경로</span></td> <td data-th="입력 타입"><span>string[]</span></td> <td data-th="기본값"><span><a href="/api/cli/#default-configurations">Default Configs</a></span></td> </tr> <tr> <td data-th="파라미터"><span><code>--config-name</code></span></td> <td data-th="설명"><span>사용할 설정의 이름</span></td> <td data-th="입력 타입"><span>string[]</span></td> <td data-th="기본값"><span>-</span></td> </tr> <tr> <td data-th="파라미터"><span><code>--env</code></span></td> <td data-th="설명"><span>함수일 때 설정에 전달된 환경</span></td> <td data-th="입력 타입"><span>string[]</span></td> <td data-th="기본값"><span>-</span></td> </tr> </tbody> </table> <h2 id="analyzing-bundle">Analyzing Bundle<a href="#analyzing-bundle" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>webpack-bundle-analyzer</code>를 사용하여 webpack에서 내보낸 출력 번들을 분석할 수 있습니다. <code>--analyze</code> 플래그를 사용하여 CLI를 통해 호출 할 수 있습니다.</p> <pre><code class="hljs language-bash">npx webpack --analyze</code></pre> <aside class="warning"><h6 class="warning__prefix">warning</h6><p>프로젝트에 <code>webpack-bundle-analyzer</code>가 설치되어 있는지 확인하세요. 그렇지 않으면 CLI가 설치하라는 메시지를 표시합니다.</p></aside> <h2 id="progress">Progress<a href="#progress" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>webpack 컴파일 진행 상황을 확인하려면 <code>--progress</code> 플래그를 사용합니다.</p> <pre><code class="hljs language-bash">npx webpack --progress</code></pre> <p>진행 단계에 대한 프로필 데이터를 수집하려면 <code>--progress</code> 플래그에 <code>profile</code>을 값으로 전달할 수 있습니다.</p> <pre><code class="hljs language-bash">npx webpack --progress<span class="token operator">=</span>profile</code></pre> <h2 id="pass-cli-arguments-to-nodejs">Pass CLI arguments to Node.js<a href="#pass-cli-arguments-to-nodejs" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>Node.js 프로세스에 직접 인수를 전달하려면 <code>NODE_OPTIONS</code> 옵션을 사용할 수 있습니다.</p> <p>예를 들어, Node.js 프로세스의 메모리 제한을 4GB로 늘리려면 아래와 같이 사용합니다.</p> <pre><code class="hljs language-bash"><span class="token assign-left variable">NODE_OPTIONS</span><span class="token operator">=</span><span class="token string">"--max-old-space-size=4096"</span> webpack</code></pre> <p>또한 Node.js 프로세스에 복수의 옵션을 전달할 수 있습니다.</p> <pre><code class="hljs language-bash"><span class="token assign-left variable">NODE_OPTIONS</span><span class="token operator">=</span><span class="token string">"--max-old-space-size=4096 -r /path/to/preload/file.js"</span> webpack</code></pre> <h2 id="exit-codes-and-their-meanings">Exit codes and their meanings<a href="#exit-codes-and-their-meanings" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <table> <thead> <tr> <th>종료 코드</th> <th>설명</th> </tr> </thead> <tbody> <tr> <td data-th="종료 코드"><span><code>0</code></span></td> <td data-th="설명"><span>성공</span></td> </tr> <tr> <td data-th="종료 코드"><span><code>1</code></span></td> <td data-th="설명"><span>webpack 오류</span></td> </tr> <tr> <td data-th="종료 코드"><span><code>2</code></span></td> <td data-th="설명"><span>설정 / 옵션 문제 또는 내부 오류</span></td> </tr> </tbody> </table> <h2 id="cli-environment-variables">CLI Environment Variables<a href="#cli-environment-variables" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <table> <thead> <tr> <th>환경 변수</th> <th>설명</th> </tr> </thead> <tbody> <tr> <td data-th="환경 변수"><span><code>WEBPACK_CLI_SKIP_IMPORT_LOCAL</code></span></td> <td data-th="설명"><span><code>true</code>이면 <code>webpack-cli</code>의 로컬 인스턴스 사용을 건너뜁니다.</span></td> </tr> <tr> <td data-th="환경 변수"><span><code>WEBPACK_CLI_FORCE_LOAD_ESM_CONFIG</code></span></td> <td data-th="설명"><span><code>true</code>이면 ESM 설정을 강제로 로드합니다.</span></td> </tr> <tr> <td data-th="환경 변수"><span><a href="#webpack_package"><code>WEBPACK_PACKAGE</code></a></span></td> <td data-th="설명"><span>CLI에서 사용자 정의 webpack 버전을 사용합니다.</span></td> </tr> <tr> <td data-th="환경 변수"><span><code>WEBPACK_CLI_HELP_WIDTH</code></span></td> <td data-th="설명"><span>도움말 출력에 사용자 정의 너비를 사용합니다.</span></td> </tr> </tbody> </table> <pre><code class="hljs language-bash"><span class="token assign-left variable">WEBPACK_CLI_FORCE_LOAD_ESM_CONFIG</span><span class="token operator">=</span>true npx webpack --config ./webpack.config.esm</code></pre> <h3 id="webpack_package">WEBPACK_PACKAGE<a href="#webpack_package" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>CLI에서 사용자 정의 webpack 버전을 사용합니다. <code>package.json</code>에서 다음 내용을 고려합니다.</p> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"webpack"</span><span class="token operator">:</span> <span class="token string">"^4.0.0"</span><span class="token punctuation">,</span>\n  <span class="token property">"webpack-5"</span><span class="token operator">:</span> <span class="token string">"npm:webpack@^5.32.0"</span><span class="token punctuation">,</span>\n  <span class="token property">"webpack-cli"</span><span class="token operator">:</span> <span class="token string">"^4.5.0"</span>\n<span class="token punctuation">}</span></code></pre> <p><code>webpack v4.0.0</code>을 사용하려면 아래 명령을 사용합니다.</p> <pre><code class="hljs language-bash">npx webpack</code></pre> <p><code>webpack v5.32.0</code>을 사용하려면 아래 명령을 사용합니다.</p> <pre><code class="hljs language-bash"><span class="token assign-left variable">WEBPACK_PACKAGE</span><span class="token operator">=</span>webpack-5 npx webpack</code></pre> '}}]);