"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2960],{2960:function(a,n,e){e.r(n),n.default='<p><code>Compiler</code> 모듈은 <a href="/api/cli">CLI</a> 또는 <a href="/api/node">Node API</a>를 통해 전달된 모든 옵션으로 컴파일 인스턴스를 생성하는 메인 엔진입니다. 플러그인 등록 및 호출을 위해 <code>Tapable</code>클래스를 확장합니다. 대부분의 사용자용 플러그인은 먼저 <code>Compiler</code>에 등록됩니다.</p> <p>webpack 플러그인을 개발할 때, 훅이 어디서 호출되는지 알고 싶을 수 있습니다. 이를 알아 보려면 webpack 소스코드에서 <code>hooks.&#x3C;hook name>.call</code>을 검색해보세요.</p> <h2 id="watching">Watching<a href="#watching" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>Compiler</code>는 파일 시스템을 모니터링하고 파일이 변경되면 다시 컴파일하는 <a href="/api/node/#watching">watching</a>을 지원합니다. watch 모드에서 컴파일러는 <code>watchRun</code>, <code>watchClose</code> 및 <code>invalid</code>와 같은 추가 이벤트를 내보냅니다. 이것은 일반적으로 <a href="/guides/development">development</a>에서 사용되며 <code>webpack-dev-server</code>와 같은 도구의 내부에서 사용되어 개발자가 매번 수동으로 다시 컴파일할 필요 없게 도와줍니다. watch 모드는 <a href="/api/cli/#watch-options">CLI</a>를 통해서도 시작 할 수 있습니다.</p> <h2 id="hooks">Hooks<a href="#hooks" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>아래에서 소개할 라이프 사이클 훅들은 <code>compiler</code>에 의해 노출됩니다. 아래와 같이 접근 할 수 있습니다.</p> <pre><code class="hljs language-js">compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>someHook<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">\'MyPlugin\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">/* ... */</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>훅 타입에 따라서 <code>tapAsync</code>와 <code>tapPromise</code>를 사용할 수 있습니다.</p> <p>훅 타입에 대한 설명은 <a href="https://github.com/webpack/tapable#tapable">Tapable 문서</a>를 참고하세요.</p> <h3 id="environment"><code>environment</code><a href="#environment" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncHook</code></p> <p>설정 파일에서 플러그인을 초기화한 직후, 컴파일러 환경을 준비하는 동안 호출됩니다.</p> <h3 id="afterenvironment"><code>afterEnvironment</code><a href="#afterenvironment" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncHook</code></p> <p>컴파일러 환경 설정이 완료된 때인 <code>environment</code> 훅 바로 뒤에 호출됩니다.</p> <h3 id="entryoption"><code>entryOption</code><a href="#entryoption" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncBailHook</code></p> <p>webpack 옵션의 <a href="/configuration/entry-context/#entry"><code>entry</code> 설정</a>이 처리된 후 호출됩니다.</p> <ul> <li>콜백 파라미터: <a href="/configuration/entry-context/#context"><code>context</code></a>, <a href="/configuration/entry-context/#entry"><code>entry</code></a></li> </ul> <pre><code class="hljs language-js">compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>entryOption<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">\'MyPlugin\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> entry</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">/* ... */</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h3 id="afterplugins"><code>afterPlugins</code><a href="#afterplugins" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncHook</code></p> <p>내부 플러그인의 초기 설정이 완료된 후 호출됩니다.</p> <ul> <li>콜백 파라미터: <code>compiler</code></li> </ul> <h3 id="afterresolvers"><code>afterResolvers</code><a href="#afterresolvers" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncHook</code></p> <p>리졸버 설정이 완료된 후 트리거됩니다.</p> <ul> <li>콜백 파라미터: <code>compiler</code></li> </ul> <h3 id="initialize"><code>initialize</code><a href="#initialize" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncHook</code></p> <p>컴파일러 객체가 초기화될 때 호출됩니다.</p> <h3 id="beforerun"><code>beforeRun</code><a href="#beforerun" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>AsyncSeriesHook</code></p> <p>컴파일러를 실행하기 직전에 훅을 추가합니다.</p> <ul> <li>콜백 파라미터: <code>compiler</code></li> </ul> <h3 id="run"><code>run</code><a href="#run" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>AsyncSeriesHook</code></p> <p>컴파일러가 <a href="/configuration/other-options/#recordspath"><code>records</code></a>를 읽기 시작하기 전에 연결합니다.</p> <ul> <li>콜백 파라미터: <code>compiler</code></li> </ul> <h3 id="watchrun"><code>watchRun</code><a href="#watchrun" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>AsyncSeriesHook</code></p> <p>새 컴파일이 트리거된 후 컴파일이 실제로 시작되기 전에 watch 모드에서 플러그인을 실행합니다.</p> <ul> <li>콜백 파라미터: <code>compiler</code></li> </ul> <h3 id="normalmodulefactory"><code>normalModuleFactory</code><a href="#normalmodulefactory" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncHook</code></p> <p><a href="/api/normalmodulefactory-hooks">NormalModuleFactory</a>가 생성된 후 호출됩니다.</p> <ul> <li>콜백 파라미터: <code>normalModuleFactory</code></li> </ul> <h3 id="contextmodulefactory"><code>contextModuleFactory</code><a href="#contextmodulefactory" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncHook</code></p> <p><a href="/api/contextmodulefactory-hooks">ContextModuleFactory</a>가 생성된 후 플러그인을 실행합니다.</p> <ul> <li>콜백 파라미터: <code>contextModuleFactory</code></li> </ul> <h3 id="beforecompile"><code>beforeCompile</code><a href="#beforecompile" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>AsyncSeriesHook</code></p> <p>컴파일 파라미터가 생성된 후 플러그인을 실행합니다.</p> <ul> <li>콜백 파라미터: <code>compilationParams</code></li> </ul> <p><code>compilationParams</code> 변수는 다음과 같이 초기화됩니다.</p> <pre><code class="hljs language-js">compilationParams <span class="token operator">=</span> <span class="token punctuation">{</span>\n  normalModuleFactory<span class="token punctuation">,</span>\n  contextModuleFactory<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>이 훅은 컴파일 파라미터를 추가 또는 수정하는 데 사용할 수 있습니다.</p> <pre><code class="hljs language-js">compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>beforeCompile<span class="token punctuation">.</span><span class="token function">tapAsync</span><span class="token punctuation">(</span><span class="token string">\'MyPlugin\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  params<span class="token punctuation">[</span><span class="token string">\'MyPlugin - data\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">\'important stuff my plugin will use later\'</span><span class="token punctuation">;</span>\n  <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h3 id="compile"><code>compile</code><a href="#compile" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncHook</code></p> <p>새 컴파일이 생성되기 전인 <code>beforeCompile</code> 바로 뒤에 호출됩니다.</p> <ul> <li>콜백 파라미터: <code>compilationParams</code></li> </ul> <h3 id="thiscompilation"><code>thisCompilation</code><a href="#thiscompilation" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncHook</code></p> <p>컴파일을 초기화하는 동안 <code>compilation</code> 이벤트를 생성하기 직전에 실행됩니다.</p> <ul> <li>콜백 파라미터: <code>compilation</code>, <code>compilationParams</code></li> </ul> <h3 id="compilation"><code>compilation</code><a href="#compilation" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncHook</code></p> <p>컴파일이 생성된 후 플러그인을 실행합니다.</p> <ul> <li>콜백 파라미터: <code>compilation</code>, <code>compilationParams</code></li> </ul> <h3 id="make"><code>make</code><a href="#make" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>AsyncParallelHook</code></p> <p>컴파일을 완료하기 전에 실행됩니다.</p> <ul> <li>콜백 파라미터: <code>compilation</code></li> </ul> <h3 id="aftercompile"><code>afterCompile</code><a href="#aftercompile" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>AsyncSeriesHook</code></p> <p>컴파일을 완료하고 봉인한 후 호출됩니다.</p> <ul> <li>콜백 파라미터: <code>compilation</code></li> </ul> <h3 id="shouldemit"><code>shouldEmit</code><a href="#shouldemit" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncBailHook</code></p> <p>애셋을 방출하기 전에 호출됩니다. 방출 여부를 알려주는 boolean을 반환해야 합니다.</p> <ul> <li>콜백 파라미터: <code>compilation</code></li> </ul> <pre><code class="hljs language-js">compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>shouldEmit<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">\'MyPlugin\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">compilation</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// 출력을 내보내려면 true를 반환하고, 그렇지 않으면 false를 반환합니다.</span>\n  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h3 id="emit"><code>emit</code><a href="#emit" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>AsyncSeriesHook</code></p> <p>애셋을 출력 디렉터리로 방출하기 직전에 실행됩니다.</p> <ul> <li>콜백 파라미터: <code>compilation</code></li> </ul> <h3 id="afteremit"><code>afterEmit</code><a href="#afteremit" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>AsyncSeriesHook</code></p> <p>출력 디렉터리에 애셋을 내보낸 후 호출됩니다.</p> <ul> <li>콜백 파라미터: <code>compilation</code></li> </ul> <h3 id="assetemitted"><code>assetEmitted</code><a href="#assetemitted" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>AsyncSeriesHook</code></p> <p>애셋이 방출되었을 때 실행됩니다. 출력 경로 및 바이트 콘텐츠와 같은 내보낸 애셋의 정보에 대한 접근을 제공합니다.</p> <ul> <li>콜백 파라미터: <code>file</code>, <code>info</code></li> </ul> <p>예를 들어 <code>info.content</code>를 통해 애셋의 콘텐츠 버퍼에 접근할 수 있습니다.</p> <pre><code class="hljs language-js">compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>assetEmitted<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span>\n  <span class="token string">\'MyPlugin\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token parameter">file<span class="token punctuation">,</span> <span class="token punctuation">{</span> content<span class="token punctuation">,</span> source<span class="token punctuation">,</span> outputPath<span class="token punctuation">,</span> compilation<span class="token punctuation">,</span> targetPath <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#x3C;Buffer 66 6f 6f 62 61 72></span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h3 id="done"><code>done</code><a href="#done" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>AsyncSeriesHook</code></p> <p>컴파일이 완료되면 실행됩니다.</p> <ul> <li>콜백 파라미터: <code>stats</code></li> </ul> <h3 id="additionalpass"><code>additionalPass</code><a href="#additionalpass" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>AsyncSeriesHook</code></p> <p>이 훅을 사용하면 빌드를 한 번 더 추가할 수 있습니다.</p> <h3 id="failed"><code>failed</code><a href="#failed" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncHook</code></p> <p>컴파일이 실패하면 호출됩니다.</p> <ul> <li>콜백 파라미터: <code>error</code></li> </ul> <h3 id="invalid"><code>invalid</code><a href="#invalid" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncHook</code></p> <p>감시중인 컴파일이 무효가 되었을 때 실행됩니다.</p> <ul> <li>콜백 파라미터: <code>fileName</code>, <code>changeTime</code></li> </ul> <h3 id="watchclose"><code>watchClose</code><a href="#watchclose" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncHook</code></p> <p>감시중인 컴파일이 중지되었을 때 호출됩니다.</p> <h3 id="infrastructurelog"><code>infrastructureLog</code><a href="#infrastructurelog" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncBailHook</code></p> <p><a href="/configuration/other-options/#infrastructurelogging"><code>infrastructureLogging</code> 옵션</a>을 통해 설정에서 활성화된 경우 인프라 로깅을 사용할 수 있습니다.</p> <ul> <li>콜백 파라미터: <code>name</code>, <code>type</code>, <code>args</code></li> </ul> <h3 id="log"><code>log</code><a href="#log" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncBailHook</code></p> <p>활성화되면 <a href="/configuration/stats/">stats</a>에 로그를 작성할 수 있습니다. <a href="/configuration/stats/#stats-options"><code>stats.logging</code>, <code>stats.loggingDebug</code> 및 <code>stats.loggingTrace</code> 옵션</a>을 참고하세요.</p> <ul> <li>콜백 파라미터: <code>origin</code>, <code>logEntry</code></li> </ul> '}}]);