"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2855],{2855:function(n,a,s){s.r(a),a.default='<p><a href="https://www.vagrantup.com/">Vagrant를</a> 사용하여 가상 머신에서 개발 환경을 실행하는 경우, 가상 머신에서도 webpack을 실행하고 싶을 수 있습니다.</p> <h2 id="configuring-the-project">Configuring the Project<a href="#configuring-the-project" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>시작하려면, <code>Vagrantfile</code>에 고정 IP가 있는지 확인하세요.</p> <pre><code class="hljs language-ruby"><span class="token constant">Vagrant</span><span class="token punctuation">.</span>configure<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token operator">|</span>config<span class="token operator">|</span>\n  config<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>network <span class="token symbol">:private_network</span><span class="token punctuation">,</span> ip<span class="token punctuation">:</span> <span class="token string">"10.10.10.61"</span>\n<span class="token keyword">end</span></code></pre> <p>다음으로, 프로젝트에 <code>webpack</code>과 <code>webpack-dev-server</code>를 설치하세요.</p> <pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev webpack webpack-dev-server</code></pre> <p><code>webpack.config.js</code> 파일이 있는지 확인하세요. 만약 파일이 없다면 다음을 최소한의 예제로 사용해 시작하세요.</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  context<span class="token operator">:</span> __dirname<span class="token punctuation">,</span>\n  entry<span class="token operator">:</span> <span class="token string">\'./app.js\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>그리고 <code>index.html</code> 파일을 만듭니다. 스크립트 태그는 번들을 가리켜야 합니다. <code>output.filename</code>이 지정되어 있지 않다면, <code>bundle.js</code>가 됩니다.</p> <pre><code class="hljs language-html"><span class="token doctype"><span class="token punctuation">&#x3C;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>html</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>head</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/bundle.js<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>script</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>head</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>body</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>h2</span><span class="token punctuation">></span></span>Heey!<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>h2</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>html</span><span class="token punctuation">></span></span></code></pre> <p><code>app.js</code> 파일도 만들어야 합니다.</p> <h2 id="running-the-server">Running the Server<a href="#running-the-server" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>이제, 서버를 실행하세요.</p> <pre><code class="hljs language-bash">webpack serve --host <span class="token number">0.0</span>.0.0 --public <span class="token number">10.10</span>.10.61:8080 --watch-poll</code></pre> <p>기본적으로, 서버는 로컬 호스트에서만 접근할 수 있습니다. 호스트 PC에서 접근할 것이므로, 이를 허용하려면 <code>--host</code>를 변경해야 합니다.</p> <p><code>webpack-dev-server</code>는 파일이 변경될 때 다시 로드하기 위해 WebSocket에 연결하는 스크립트를 번들에 포함합니다. <code>--public</code> 플래그는 스크립트가 WebSocket을 찾을 위치를 알고 있는지 확인합니다. 서버는 기본적으로 <code>8080</code> 포트를 사용하므로, 여기에서도 지정해야 합니다.</p> <p><code>--watch-poll</code>은 webpack이 파일의 변경을 감지할 수 있도록 합니다. 기본적으로, webpack은 파일 시스템에 의해 트리거되는 이벤트를 수신하지만, VirtualBox에는 이와 관련된 많은 문제가 있습니다.</p> <p>서버는 이제 <code>http://10.10.10.61:8080</code>에서 접근할 수 있습니다. <code>app.js</code>를 변경하면 실시간으로 다시 로드됩니다.</p> <h2 id="advanced-usage-with-nginx">Advanced Usage with nginx<a href="#advanced-usage-with-nginx" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>좀 더 생산적인 환경을 모방하기 위해, nginx로 <code>webpack-dev-server</code>를 프록시 할 수도 있습니다.</p> <p>nginx 설정 파일에 다음을 추가하십시오.</p> <pre><code class="hljs language-nginx"><span class="token keyword">server</span> <span class="token punctuation">{</span>\n  <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>\n    <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">8080</span><span class="token punctuation">;</span>\n    <span class="token keyword">proxy_http_version</span> <span class="token number">1.1</span><span class="token punctuation">;</span>\n    <span class="token keyword">proxy_set_header</span> Upgrade <span class="token variable">$http_upgrade</span><span class="token punctuation">;</span>\n    <span class="token keyword">proxy_set_header</span> Connection <span class="token string">"upgrade"</span><span class="token punctuation">;</span>\n    <span class="token keyword">error_page</span> <span class="token number">502</span> @start<span class="token operator">-</span>webpack<span class="token operator">-</span>dev<span class="token operator">-</span><span class="token keyword">server</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">location</span> @start<span class="token operator">-</span>webpack<span class="token operator">-</span>dev<span class="token operator">-</span><span class="token keyword">server</span> <span class="token punctuation">{</span>\n    <span class="token keyword">default_type</span> text<span class="token operator">/</span>plain<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token number">502</span> <span class="token string">"Please start the webpack-dev-server first."</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <p><code>proxy_set_header</code> 줄은 WebSocket이 올바르게 작동하도록 허용하기 때문에 중요합니다.</p> <p><code>webpack-dev-server</code>를 시작하는 명령을 다음과 같이 변경할 수 있습니다.</p> <pre><code class="hljs language-bash">webpack serve --public <span class="token number">10.10</span>.10.61 --watch-poll</code></pre> <p>이렇게 하면, <code>127.0.0.1</code>에서만 서버에 접근할 수 있으며, nginx가 호스트 PC에서 사용할 수 있도록 처리하므로 괜찮습니다.</p> <h2 id="conclusion">Conclusion<a href="#conclusion" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>고정 IP에서 Vagrant box에 접근할 수 있도록 만든 다음, <code>webpack-dev-server</code>를 공개적으로 접근할 수 있도록 하여 브라우저에서 접근할 수 있도록 했습니다. VirtualBox가 파일 시스템 이벤트를 보내지 않아 서버가 파일 변경 시 다시 로드되지 않는 일반적인 문제를 해결했습니다.</p> '}}]);