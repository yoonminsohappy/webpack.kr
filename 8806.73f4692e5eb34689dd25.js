(self.webpackChunk=self.webpackChunk||[]).push([[8806],{8806:function(n,a,s){"use strict";s.r(a),a.default='<p>JavaScript는 서버와 클라이언트 모두 작성이 가능하기 때문에 webpack은 webpack <a href="/configuration">설정</a>에서 다수의 배포 <em>대상을</em> 제공합니다.</p> <aside class="warning"><h6 class="warning__prefix">warning</h6><p>webpack의 <code>target</code> 프로퍼티를 <code>output.libraryTarget</code> 프로퍼티와 혼동하지 않아야 합니다. 자세한 내용은 <code>output</code> 프로퍼티에 대한 <a href="/concepts/output/">가이드</a>를 확인해 주세요.</p></aside> <h2 id="usage">Usage<a href="#usage" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>target</code> 프로퍼티를 설정하려면 webpack 설정에서 target 값을 설정하기만 하면 됩니다.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  target<span class="token operator">:</span> <span class="token string">\'node\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>위 예제에서 <code>node</code> webpack을 사용하면 Node.js와 유사한 환경에서 사용할 수 있도록 컴파일됩니다. (Node.js의 <code>require</code>를 사용하여 청크를 로드하고 <code>fs</code>나 <code>path</code>와 같은 모듈은 수정하지 않습니다.)</p> <p>각 <em>target은</em> 배포와 환경에 관련된 다양한 추가 기능이 있으며, 필요에 맞게 지원됩니다. <a href="/configuration/target/">사용 가능한 target</a>을 확인하세요.</p> <aside class="todo"><h6 class="todo__prefix">todo</h6><p>다른 인기 있는 target 값에 대한 추가 확장</p></aside> <h2 id="multiple-targets">Multiple Targets<a href="#multiple-targets" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>webpack에서는 한 개 이상의 문자열을 <code>target</code> 프로퍼티에 전달할 수 <strong>없습니다</strong>. 하지만 두 개의 개별 설정을 번들링하여 동일한 라이브러리를 생성할 수 있습니다.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> serverConfig <span class="token operator">=</span> <span class="token punctuation">{</span>\n  target<span class="token operator">:</span> <span class="token string">\'node\'</span><span class="token punctuation">,</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    filename<span class="token operator">:</span> <span class="token string">\'lib.node.js\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">//…</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> clientConfig <span class="token operator">=</span> <span class="token punctuation">{</span>\n  target<span class="token operator">:</span> <span class="token string">\'web\'</span><span class="token punctuation">,</span> <span class="token comment">// &#x3C;=== 기본값은 \'web\'이므로 생략 가능</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    filename<span class="token operator">:</span> <span class="token string">\'lib.js\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">//…</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">[</span>serverConfig<span class="token punctuation">,</span> clientConfig<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre> <p>위 예제에서는 <code>dist</code> 폴더에 <code>lib.js</code>와 <code>lib.node.js</code> 파일을 생성합니다.</p> <h2 id="resources">Resources<a href="#resources" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>위의 옵션에서 볼 수 있듯이 여러 배포 <em>target을</em> 선택할 수 있습니다. 다음은 참고할 수 있는 예제 및 리소스 목록입니다.</p> <ul> <li><strong><a href="https://github.com/TheLarkInn/compare-webpack-target-bundles">compare-webpack-target-bundles</a></strong>: 다양한 webpack <em>target을</em> 테스트하고 볼 수 있는 유용한 리소스 입니다. 그리고 버그 리포팅에도 유용합니다.</li> <li><strong><a href="https://github.com/chentsulin/electron-react-boilerplate">Boilerplate of Electron-React Application</a></strong>: electron의 메인 프로세스와 렌더러 프로세스에 대한 빌드 프로세스의 좋은 예입니다.</li> </ul> <aside class="todo"><h6 class="todo__prefix">todo</h6><p>라이브 코드나 보일러플레이트에서 사용되는 webpack target의 최신 예제를 찾아야 합니다.</p></aside> '}}]);