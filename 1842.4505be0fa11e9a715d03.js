(self.webpackChunk=self.webpackChunk||[]).push([[1842],{1842:function(n,s,a){"use strict";a.r(s),s.default='<blockquote> <p>es6 modules</p> </blockquote> <blockquote> <p>commonjs</p> </blockquote> <blockquote> <p>amd</p> </blockquote> <h2 id="require-with-expression">require with expression<a href="#require-with-expression" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>요청에 표현식이 포함된 경우 컨텍스트가 생성되므로, 컴파일 시간에 <strong>정확한</strong> 모듈을 알 수 없습니다.</p> <p>예를 들어, <code>.ejs</code> 파일을 포함하는 다음과 같은 폴더 구조가 있습니다.</p> <pre><code class="hljs language-bash">example_directory\n│\n└───template\n│   │   table.ejs\n│   │   table-row.ejs\n│   │\n│   └───directory\n│       │   another.ejs</code></pre> <p>다음의 <code>require()</code> 호출이 평가될 때</p> <pre><code class="hljs language-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./template/\'</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">\'.ejs\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>webpack은 <code>require()</code> 호출을 구문 분석하고 일부 정보를 추출합니다.</p> <pre><code class="hljs language-code">Directory: ./template\nRegular expression: /^.*\\.ejs$/\n</code></pre> <p><strong>컨텍스트 모듈</strong></p> <p>컨텍스트 모듈이 생성됩니다. 정규 표현식과 일치하는 요청에 필요할 수 있는 <strong>해당 디렉터리의 모든 모듈에</strong> 대한 참조를 포함합니다. 컨텍스트 모듈은 요청을 모듈 id로 변환하는 맵을 포함합니다.</p> <p>맵 예제:</p> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"./table.ejs"</span><span class="token operator">:</span> <span class="token number">42</span><span class="token punctuation">,</span>\n  <span class="token property">"./table-row.ejs"</span><span class="token operator">:</span> <span class="token number">43</span><span class="token punctuation">,</span>\n  <span class="token property">"./directory/another.ejs"</span><span class="token operator">:</span> <span class="token number">44</span>\n<span class="token punctuation">}</span></code></pre> <p>컨텍스트 모듈은 또한 맵에 접근하기 위한 런타임 로직도 포함합니다.</p> <p>이것은 동적으로 요청하는 기능이 지원되지만 모든 모듈이 번들에 포함되는 것을 의미합니다.</p> <h2 id="requirecontext"><code>require.context</code><a href="#requirecontext" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>require.context()</code> 함수로 자신만의 컨텍스트를 만들 수 있습니다.</p> <p>검색할 디렉터리, 하위 디렉터리를 검색해야 하는지 여부를 나타내는 플래그, 일치하는 파일의 정규식을 전달할 수 있습니다.</p> <p>webpack은 빌드 하는 동안 코드에서 <code>require.context()</code>를 구문 분석합니다.</p> <p>구문은 다음과 같습니다.</p> <pre><code class="hljs language-javascript">require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span>\n  directory<span class="token punctuation">,</span>\n  <span class="token punctuation">(</span>useSubdirectories <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span>regExp <span class="token operator">=</span> <span class="token regex">/^\\.\\/.*$/</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span>mode <span class="token operator">=</span> <span class="token string">\'sync\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>예:</p> <pre><code class="hljs language-javascript">require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">\'./test\'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token regex">/\\.test\\.js$/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// test 디렉터리에서 요청이 `.test.js`로 끝나는 파일이 있는 컨텍스트입니다.</span></code></pre> <pre><code class="hljs language-javascript">require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">\'../\'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token regex">/\\.stories\\.js$/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 상위 폴더와 그 하위 폴더에서 `.stories.js`로 끝나는 파일이 있는 컨텍스트입니다.</span></code></pre> <aside class="warning"><h6 class="warning__prefix">warning</h6><p><code>require.context</code>에 전달할 인수는 리터럴이어야 합니다!</p></aside> <h3 id="context-module-api">context module API<a href="#context-module-api" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>컨텍스트 모듈은 하나의 인수(요청)를 가지는 함수를 export 합니다.</p> <p>export 한 함수는 <code>resolve</code>, <code>keys</code>, <code>id</code> 3가지 속성을 가집니다.</p> <ul> <li><code>resolve</code>는 파싱된 요청의 모듈 id를 반환하는 함수입니다.</li> <li><code>keys</code>는 컨텍스트 모듈이 처리할 수 있는 가능한 모든 요청의 배열을 반환하는 함수입니다.</li> </ul> <p>이것은 디렉터리의 모든 파일을 요청하거나 패턴과 일치시키려는 경우에 유용할 수 있습니다. 예제는 다음과 같습니다.</p> <pre><code class="hljs language-javascript"><span class="token keyword">function</span> <span class="token function">importAll</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  r<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">importAll</span><span class="token punctuation">(</span>require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">\'../components/\'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <pre><code class="hljs language-javascript"><span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">importAll</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  r<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">r</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">importAll</span><span class="token punctuation">(</span>require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">\'../components/\'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 빌드 시 캐시는 모든 필수 모듈로 채워집니다.</span></code></pre> <ul> <li><code>id</code>는 컨텍스트 모듈의 모듈 id입니다. 이것은 <code>module.hot.accept</code>에서 유용할 수 있습니다.</li> </ul> '}}]);