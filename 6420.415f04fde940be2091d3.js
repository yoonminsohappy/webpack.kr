"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6420],{6420:function(n,s,a){a.r(s),s.default='<aside class="tip"><h6 class="tip__prefix">tip</h6><p><a href="/guides/getting-started">시작하기</a>, <a href="/guides/output-management">출력 관리</a>, <a href="/guides/code-splitting">코드 스플릿팅</a>의 예시를 사용합니다.</p></aside> <p>우리는 배포 가능한 <code>/dist</code>디렉토리를 생성하는 모듈형 애플리케이션을 번들링하기 위해 webpack을 사용하고 있습니다. 일단 서버에 <code>/dist</code>의 콘텐츠가 배포되면 클라이언트(일반적으로 브라우저)가 해당 서버에 접근하여 사이트와 애셋을 가져옵니다. 마지막 단계는 시간이 많이 걸릴 수 있기 때문에 브라우저는 <a href="https://en.wikipedia.org/wiki/Cache_(computing)">캐싱</a>이라는 기술을 사용합니다. 이렇게 하면 불필요한 네트워크 트래픽을 줄이면서 사이트를 더 빨리 로드할 수 있습니다. 그러나 새 코드를 불러올 경우에는 어려움을 느낄 수 있습니다.</p> <p>이 가이드는 webpack 컴파일로 생성 된 파일의 내용이 변경되지 않는 한 캐시된 상태로 유지되도록 하는 데 필요한 설정에 초점을 맞춥니다.</p> <h2 id="output-filenames">Output Filenames<a href="#output-filenames" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>output.filename</code> <a href="/configuration/output/#outputfilename">substitutions</a> 설정을 사용하여 출력 파일의 이름을 정의할 수 있습니다. webpack은 <strong>substitutions</strong> 이라고 하는 대괄호 문자열을 사용하여 파일 이름을 템플릿화하는 방법을 제공합니다. <code>[contenthash]</code> substitution은 애셋의 콘텐츠에 따라 고유한 해시를 추가합니다. 애셋의 콘텐츠가 변경되면 <code>[contenthash]</code>도 변경됩니다.</p> <p><code>index.html</code> 파일을 수동으로 관리할 필요가 없도록 <a href="/guides/output-management">출력 관리의</a> <code>플러그인</code>과 <a href="/guides/getting-started">시작하기의</a> 예제를 사용하여 프로젝트를 설정해 보겠습니다.</p> <p><strong>project</strong></p> <pre><code class="hljs language-diff">webpack-demo\n|- package.json\n|- webpack.config.js\n|- /dist\n|- /src\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> |- index.js\n</span></span>|- /node_modules</code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const path = require(\'path\');\n</span><span class="token prefix unchanged"> </span><span class="token line"> const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">   entry: \'./src/index.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">   plugins: [\n</span><span class="token prefix unchanged"> </span><span class="token line">     new HtmlWebpackPlugin({\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">       title: \'Output Management\',\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">       title: \'Caching\',\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     }),\n</span><span class="token prefix unchanged"> </span><span class="token line">   ],\n</span><span class="token prefix unchanged"> </span><span class="token line">   output: {\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">     filename: \'bundle.js\',\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     filename: \'[name].[contenthash].js\',\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">     clean: true,\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line"> };</span></span></code></pre> <p>이 설정으로 빌드 스크립트 <code>npm run build</code>를 실행하면, 다음과 같은 출력이 생성됩니다.</p> <pre><code class="hljs language-bash"><span class="token punctuation">..</span>.\n                       Asset       Size  Chunks                    Chunk Names\nmain.7e2c49a622975ebd9b7e.js     <span class="token number">544</span> kB       <span class="token number">0</span>  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  main\n                  index.html  <span class="token number">197</span> bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n<span class="token punctuation">..</span>.</code></pre> <p>보다시피, 번들의 이름은 해시를 통해 콘텐츠를 반영합니다. 변경하지 않고 다른 빌드를 실행하면 해당 파일 이름이 동일하게 유지될 거라고 생각합니다. 그러나 다시 실행하면 이 경우에는 그렇지 않을 수 있다는 것을 알 수 있습니다.</p> <pre><code class="hljs language-bash"><span class="token punctuation">..</span>.\n                       Asset       Size  Chunks                    Chunk Names\nmain.205199ab45963f6a62ec.js     <span class="token number">544</span> kB       <span class="token number">0</span>  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  main\n                  index.html  <span class="token number">197</span> bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n<span class="token punctuation">..</span>.</code></pre> <p>이것은 webpack이 특정 보일러플레이트, 특히 런타임과 매니페스트를 엔트리 청크에 포함하기 때문입니다.</p> <aside class="warning"><h6 class="warning__prefix">warning</h6><p>현재 webpack 버전에 따라 출력이 다를 수 있습니다. 최신 버전에는 일부 이전 버전과 동일한 해싱 문제가 없을 수 있지만, 안전을 위해 다음 단계를 권장합니다.</p></aside> <h2 id="extracting-boilerplate">Extracting Boilerplate<a href="#extracting-boilerplate" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><a href="/guides/code-splitting">코드 스플릿팅</a>에서 배운 것처럼 <a href="/plugins/split-chunks-plugin/"><code>SplitChunksPlugin</code></a>을 사용하여 모듈을 별도의 번들로 분할 할 수 있습니다. webpack은 <a href="/configuration/optimization/#optimizationruntimechunk"><code>optimization.runtimeChunk</code></a> 옵션을 사용하여 런타임 코드를 별도의 청크로 분할하는 최적화 기능을 제공합니다. 모든 청크에 대해 단일 런타임 번들을 생성하려면 <code>single</code>로 설정합니다.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const path = require(\'path\');\n</span><span class="token prefix unchanged"> </span><span class="token line"> const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">   entry: \'./src/index.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">   plugins: [\n</span><span class="token prefix unchanged"> </span><span class="token line">     new HtmlWebpackPlugin({\n</span><span class="token prefix unchanged"> </span><span class="token line">       title: \'Caching\',\n</span><span class="token prefix unchanged"> </span><span class="token line">     }),\n</span><span class="token prefix unchanged"> </span><span class="token line">   ],\n</span><span class="token prefix unchanged"> </span><span class="token line">   output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     filename: \'[name].[contenthash].js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">     path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">     clean: true,\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   optimization: {\n</span><span class="token prefix inserted">+</span><span class="token line">     runtimeChunk: \'single\',\n</span><span class="token prefix inserted">+</span><span class="token line">   },\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> };</span></span></code></pre> <p>추출한 <code>런타임</code> 번들을 보기위해 다른 빌드를 실행해 보겠습니다.</p> <pre><code class="hljs language-bash">Hash: 82c9c385607b2150fab2\nVersion: webpack <span class="token number">4.12</span>.0\nTime: 3027ms\n                          Asset       Size  Chunks             Chunk Names\nruntime.cc17ae2a94ec771e9221.js   <span class="token number">1.42</span> KiB       <span class="token number">0</span>  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  runtime\n   main.e81de2cf758ada72f306.js   <span class="token number">69.5</span> KiB       <span class="token number">1</span>  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  main\n                     index.html  <span class="token number">275</span> bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js <span class="token number">497</span> bytes <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js <span class="token number">489</span> bytes <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> ./src/index.js <span class="token number">309</span> bytes <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    + <span class="token number">1</span> hidden module</code></pre> <p><code>lodash</code> 또는 <code>react</code>와 같은 타사 라이브러리는 로컬 소스 코드보다 변경 될 가능성이 적기 때문에 별도의 <code>vendor</code> 청크로 추출하는 것도 좋은 방법입니다. 이 단계를 통해 클라이언트는 최신 상태를 유지하기 위해 서버에 더 적은 요청을 할 수 있습니다. 이는 <a href="/plugins/split-chunks-plugin/#split-chunks-example-2">Example 2 of SplitChunksPlugin</a>에 표시된 <a href="/plugins/split-chunks-plugin/"><code>SplitChunksPlugin</code></a>의 <a href="/plugins/split-chunks-plugin/#splitchunkscachegroups"><code>cacheGroups</code></a> 옵션을 사용하여 수행할 수 있습니다. <code>cacheGroups</code>과 함께 <code>optimization.splitChunks</code>를 추가하고 다음 파라미터를 사용하여 빌드합니다.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const path = require(\'path\');\n</span><span class="token prefix unchanged"> </span><span class="token line"> const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">   entry: \'./src/index.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">   plugins: [\n</span><span class="token prefix unchanged"> </span><span class="token line">     new HtmlWebpackPlugin({\n</span><span class="token prefix unchanged"> </span><span class="token line">       title: \'Caching\',\n</span><span class="token prefix unchanged"> </span><span class="token line">     }),\n</span><span class="token prefix unchanged"> </span><span class="token line">   ],\n</span><span class="token prefix unchanged"> </span><span class="token line">   output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     filename: \'[name].[contenthash].js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">     path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">     clean: true,\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line">   optimization: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     runtimeChunk: \'single\',\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     splitChunks: {\n</span><span class="token prefix inserted">+</span><span class="token line">       cacheGroups: {\n</span><span class="token prefix inserted">+</span><span class="token line">         vendor: {\n</span><span class="token prefix inserted">+</span><span class="token line">           test: /[\\\\/]node_modules[\\\\/]/,\n</span><span class="token prefix inserted">+</span><span class="token line">           name: \'vendors\',\n</span><span class="token prefix inserted">+</span><span class="token line">           chunks: \'all\',\n</span><span class="token prefix inserted">+</span><span class="token line">         },\n</span><span class="token prefix inserted">+</span><span class="token line">       },\n</span><span class="token prefix inserted">+</span><span class="token line">     },\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line"> };</span></span></code></pre> <p>새로운 <code>vendor</code>번들을 확인하기 위해 다른 빌드를 실행해 보겠습니다.</p> <pre><code class="hljs language-bash"><span class="token punctuation">..</span>.\n                          Asset       Size  Chunks             Chunk Names\nruntime.cc17ae2a94ec771e9221.js   <span class="token number">1.42</span> KiB       <span class="token number">0</span>  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  runtime\nvendors.a42c3ca0d742766d7a28.js   <span class="token number">69.4</span> KiB       <span class="token number">1</span>  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  vendors\n   main.abf44fedb7d11d4312d7.js  <span class="token number">240</span> bytes       <span class="token number">2</span>  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  main\n                     index.html  <span class="token number">353</span> bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n<span class="token punctuation">..</span>.</code></pre> <p>이제 <code>main</code> 번들에 <code>node_modules</code> 디렉토리의 <code>vendor</code> 코드가 포함되어 있지 않고 크기가 <code>240 bytes</code>로 줄어든 것을 볼 수 있습니다!</p> <h2 id="module-identifiers">Module Identifiers<a href="#module-identifiers" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>프로젝트에 다른 모듈<code>print.js</code>를 추가해 보겠습니다.</p> <p><strong>프로젝트</strong></p> <pre><code class="hljs language-diff">webpack-demo\n|- package.json\n|- webpack.config.js\n|- /dist\n|- /src\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> |- index.js\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> |- print.js\n</span></span>|- /node_modules</code></pre> <p><strong>print.js</strong></p> <pre><code class="hljs language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> export default function print(text) {\n</span><span class="token prefix inserted">+</span><span class="token line">   console.log(text);\n</span><span class="token prefix inserted">+</span><span class="token line"> };</span></span></code></pre> <p><strong>src/index.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> import _ from \'lodash\';\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> import Print from \'./print\';\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> function component() {\n</span><span class="token prefix unchanged"> </span><span class="token line">   const element = document.createElement(\'div\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   // Lodash, now imported by this script\n</span><span class="token prefix unchanged"> </span><span class="token line">   element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   element.onclick = Print.bind(null, \'Hello webpack!\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   return element;\n</span><span class="token prefix unchanged"> </span><span class="token line"> }\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> document.body.appendChild(component());</span></span></code></pre> <p>다른 빌드를 실행하면 <code>main</code> 번들의 해시만 변경 될 것으로 예상합니다, 하지만...</p> <pre><code class="hljs language-bash"><span class="token punctuation">..</span>.\n                           Asset       Size  Chunks                    Chunk Names\n  runtime.1400d5af64fc1b7b3a45.js    <span class="token number">5.85</span> kB      <span class="token number">0</span>  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>         runtime\n  vendor.a7561fb0e9a071baadb9.js     <span class="token number">541</span> kB       <span class="token number">1</span>  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  vendor\n    main.b746e3eb72875af2caa9.js    <span class="token number">1.22</span> kB       <span class="token number">2</span>  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>         main\n                      index.html  <span class="token number">352</span> bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n<span class="token punctuation">..</span>.</code></pre> <p>... 세가지 모두가 변경 된 것을 볼 수 있습니다. 이는 각 <a href="/api/module-variables/#moduleid-commonjs"><code>module.id</code></a>가 기본적으로 해석 순서에 따라 증가하기 때문입니다. 해석 순서가 변경되면 ID도 변경됩니다. 그래서 요약하자면:</p> <ul> <li>새로운 콘텐츠로 인해 <code>main</code> 번들이 변경되었습니다.</li> <li><code>module.id</code>가 바뀌어 <code>vendor</code> 번들이 변경되었습니다.</li> <li>그리고, <code>runtime</code> 번들은 이제 새로운 모듈에 대한 참조를 포함하기 때문에 변경되었습니다.</li> </ul> <p>첫번째와 마지막은 우리가 고치고 싶은 <code>vendor</code> 해시입니다. <code>\'deterministic\'</code>옵션과 함께 <a href="/configuration/optimization/#optimizationmoduleids"><code>optimization.moduleIds</code></a>를 사용하겠습니다.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const path = require(\'path\');\n</span><span class="token prefix unchanged"> </span><span class="token line"> const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">   entry: \'./src/index.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">   plugins: [\n</span><span class="token prefix unchanged"> </span><span class="token line">     new HtmlWebpackPlugin({\n</span><span class="token prefix unchanged"> </span><span class="token line">       title: \'Caching\',\n</span><span class="token prefix unchanged"> </span><span class="token line">     }),\n</span><span class="token prefix unchanged"> </span><span class="token line">   ],\n</span><span class="token prefix unchanged"> </span><span class="token line">   output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     filename: \'[name].[contenthash].js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">     path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">     clean: true,\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line">   optimization: {\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     moduleIds: \'deterministic\',\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     runtimeChunk: \'single\',\n</span><span class="token prefix unchanged"> </span><span class="token line">     splitChunks: {\n</span><span class="token prefix unchanged"> </span><span class="token line">       cacheGroups: {\n</span><span class="token prefix unchanged"> </span><span class="token line">         vendor: {\n</span><span class="token prefix unchanged"> </span><span class="token line">           test: /[\\\\/]node_modules[\\\\/]/,\n</span><span class="token prefix unchanged"> </span><span class="token line">           name: \'vendors\',\n</span><span class="token prefix unchanged"> </span><span class="token line">           chunks: \'all\',\n</span><span class="token prefix unchanged"> </span><span class="token line">         },\n</span><span class="token prefix unchanged"> </span><span class="token line">       },\n</span><span class="token prefix unchanged"> </span><span class="token line">     },\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line"> };</span></span></code></pre> <p>이제 새로운 로컬 의존성에도 불구하고 <code>vendor</code>해시는 빌드간에 일관성을 유지해야합니다.</p> <pre><code class="hljs language-bash"><span class="token punctuation">..</span>.\n                          Asset       Size  Chunks             Chunk Names\n   main.216e852f60c8829c2289.js  <span class="token number">340</span> bytes       <span class="token number">0</span>  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  main\nvendors.55e79e5927a639d21a1b.js   <span class="token number">69.5</span> KiB       <span class="token number">1</span>  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  vendors\nruntime.725a1a51ede5ae0cfde0.js   <span class="token number">1.42</span> KiB       <span class="token number">2</span>  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  runtime\n                     index.html  <span class="token number">353</span> bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\nEntrypoint main <span class="token operator">=</span> runtime.725a1a51ede5ae0cfde0.js vendors.55e79e5927a639d21a1b.js main.216e852f60c8829c2289.js\n<span class="token punctuation">..</span>.</code></pre> <p>그리고 <code>src/index.js</code>를 수정하여 추가 의존성을 일시적으로 제거해 보겠습니다.</p> <p><strong>src/index.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> import _ from \'lodash\';\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> import Print from \'./print\';\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> // import Print from \'./print\';\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> function component() {\n</span><span class="token prefix unchanged"> </span><span class="token line">   const element = document.createElement(\'div\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   // Lodash, now imported by this script\n</span><span class="token prefix unchanged"> </span><span class="token line">   element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">   element.onclick = Print.bind(null, \'Hello webpack!\');\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   // element.onclick = Print.bind(null, \'Hello webpack!\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   return element;\n</span><span class="token prefix unchanged"> </span><span class="token line"> }\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> document.body.appendChild(component());</span></span></code></pre> <p>마지막으로 빌드를 다시 실행합니다.</p> <pre><code class="hljs language-bash"><span class="token punctuation">..</span>.\n                          Asset       Size  Chunks             Chunk Names\n   main.ad717f2466ce655fff5c.js  <span class="token number">274</span> bytes       <span class="token number">0</span>  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  main\nvendors.55e79e5927a639d21a1b.js   <span class="token number">69.5</span> KiB       <span class="token number">1</span>  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  vendors\nruntime.725a1a51ede5ae0cfde0.js   <span class="token number">1.42</span> KiB       <span class="token number">2</span>  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  runtime\n                     index.html  <span class="token number">353</span> bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\nEntrypoint main <span class="token operator">=</span> runtime.725a1a51ede5ae0cfde0.js vendors.55e79e5927a639d21a1b.js main.ad717f2466ce655fff5c.js\n<span class="token punctuation">..</span>.</code></pre> <p>두 빌드 모두 <code>55e79e5927a639d21a1b</code>를 vendor 번들 파일 이름으로 표시한 것을 알 수 있습니다.</p> <h2 id="conclusion">Conclusion<a href="#conclusion" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>캐싱은 복잡할 수 있지만, 애플리케이션이나 사이트 사용자에게 주는 이점으로 그만한 가치가 있습니다. 자세한 내용은 아래의 <em>추가 자료</em> 섹션을 참고하세요.</p> '}}]);