"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5820],{5820:function(n,s,a){a.r(s),s.default='<aside class="tip"><h6 class="tip__prefix">tip</h6><p>webpack 4.39.0 부터 사용 가능</p></aside> <p>로깅 출력은 최종 사용자에게 메시지를 표시하는 추가적인 방법입니다.</p> <p>webpack 로거는 <a href="/loaders/">로더</a> 및 <a href="/api/plugins/#logging">플러그인</a>에서 사용할 수 있습니다. <a href="/api/stats/">통계</a>의 일부로 내보내고 <a href="/configuration/">webpack 설정</a>에서 사용자가 설정합니다.</p> <p>webpack애서 사용자 정의 로깅 API의 이점:</p> <ul> <li><a href="/configuration/stats/#statslogging">로깅 설정</a> 표시 레벨의 공통 위치</li> <li><code>stats.json</code>의 일부로 export 할 수 있는 로깅 출력입니다.</li> <li>통계 프리셋은 로깅 출력에 영향을 줍니다.</li> <li>플러그인이 로깅 캡처 및 표시 레벨에 영향을 줄 수 있습니다.</li> <li>여러 플러그인 및 로더를 사용하는 경우 공통 로깅 솔루션을 사용합니다.</li> <li>CLI, webpack용 UI 도구는 로깅을 표시하는 다른 방법을 선택할 수 있습니다.</li> <li>webpack 코어는 로깅 출력을 내보낼 수 있습니다. 예) 타이밍 데이터</li> </ul> <p>webpack 로깅 API를 도입함으로써 webpack 플러그인 및 로더가 로그를 내보내는 방식을 통합하고 빌드 문제를 검사하는 더 나은 방법을 제공하기를 바랍니다. 통합 로깅 솔루션은 개발 경험을 개선하여 플러그인 및 로더 개발자를 지원합니다. 대시보드 또는 기타 UI와 같은 CLI가 아닌 wepack 솔루션을 위한 기반을 마련합니다.</p> <aside class="warning"><h6 class="warning__prefix">warning</h6><p><strong>로그에서 노이즈 방지!</strong> 여러 플러그인과 로더가 함께 사용된다는 점에 유의하세요. 로더는 일반적으로 여러 파일을 처리하고 모든 파일에 대해 호출됩니다. 로그 출력을 유용한 정보로 유지하려면 로깅 레벨을 가능한 낮게 선택하세요.</p></aside> <h2 id="examples-of-how-to-get-and-use-webpack-logger-in-loaders-and-plugins">Examples of how to get and use webpack logger in loaders and plugins<a href="#examples-of-how-to-get-and-use-webpack-logger-in-loaders-and-plugins" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><strong>my-webpack-plugin.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">const</span> <span class="token constant">PLUGIN_NAME</span> <span class="token operator">=</span> <span class="token string">\'my-webpack-plugin\'</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyWebpackPlugin</span> <span class="token punctuation">{</span>\n  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 컴파일러에서 로거에 액세스 할 수 있습니다.</span>\n    <span class="token keyword">const</span> logger <span class="token operator">=</span> compiler<span class="token punctuation">.</span><span class="token function">getInfrastructureLogger</span><span class="token punctuation">(</span><span class="token constant">PLUGIN_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'log from compiler\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>compilation<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token constant">PLUGIN_NAME</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">compilation</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token comment">// 컴파일에서도 로거에 액세스 할 수 있습니다.</span>\n      <span class="token keyword">const</span> logger <span class="token operator">=</span> compilation<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token constant">PLUGIN_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">\'log from compilation\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <p><strong>my-webpack-loader.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// webpack 로더에서 `this.getLogger`로 로거를 얻을 수 있습니다.</span>\n  <span class="token keyword">const</span> logger <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">\'my-webpack-loader\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">\'hello Logger\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> source<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="logger-methods">Logger methods<a href="#logger-methods" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <ul> <li><code>logger.error(...)</code>: 에러 메시지용입니다.</li> <li><code>logger.warn(...)</code>: 경고용입니다.</li> <li><code>logger.info(...)</code>: <strong>중요</strong> 정보성 메시지용입니다. 이러한 메시지는 기본적으로 표시됩니다. 사용자가 실제로 봐야하는 메시지에만 사용합니다.</li> <li><code>logger.log(...)</code>: <strong>중요하지 않은</strong> 정보성 메시지용입니다. 이러한 메시지는 사용자가 볼 수 있도록 선택한 경우에만 표시됩니다.</li> <li><code>logger.debug(...)</code>: 디버깅 정보용입니다. 이러한 메시지는 사용자가 특정 모듈에 대한 디버그 로깅을 보기로 선택한 경우에만 표시됩니다.</li> <li><code>logger.trace()</code>: 스택 추적을 표시하기 위해 사용합니다. <code>logger.debug</code>처럼 표시됩니다.</li> <li><code>logger.group(...)</code>: 메시지를 그룹화하기 위해 사용합니다. <code>logger.log</code>처럼 접힌 채로 표시됩니다.</li> <li><code>logger.groupEnd()</code>: 로깅 그룹을 종료하기 위해 사용합니다.</li> <li><code>logger.groupCollapsed(...)</code>: 메시지를 함께 그룹화하기 위해 사용합니다. <code>logger.log</code>처럼 접힌 채로 표시됩니다. 로깅 수준이 <code>\'verbose\'</code> 나 <code>\'debug\'</code>로 설정된 경우 확장되어 표시됩니다.</li> <li><code>logger.status</code>: 임시 메시지를 작성하고, 새 상태를 설정하고, 이전 메시지를 재정의합니다.</li> <li><code>logger.clear()</code>: 수평 라인을 출력합니다. <code>logger.log</code>처럼 표시됩니다.</li> <li><code>logger.profile(...)</code>, <code>logger.profileEnd(...)</code>: 프로파일을 캡처하기 위해 사용합니다. 지원되는 경우 <code>console.profile</code>에 위임됩니다.</li> </ul> <h2 id="runtime-logger-api">Runtime Logger API<a href="#runtime-logger-api" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>런타임 로거 API는 개발 도구로만 사용할 수 있고 <a href="/configuration/mode/#mode-production">프로덕션 모드</a>에 포함할 수 없습니다.</p> <ul> <li><code>const logging = require(\'webpack/lib/logging/runtime\')</code>: 런타임에서 로거를 사용하려면 webpack에서 직접 require 해야 합니다.</li> <li><code>logging.getLogger(\'name\')</code>: 이름으로 개별 로거를 가져오기 위해 사용합니다.</li> <li><code>logging.configureDefaultLogger(...)</code>: 기본 로거를 재정의합니다.</li> </ul> <pre><code class="hljs language-javascript"><span class="token keyword">const</span> logging <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack/lib/logging/runtime\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nlogging<span class="token punctuation">.</span><span class="token function">configureDefaultLogger</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  level<span class="token operator">:</span> <span class="token string">\'log\'</span><span class="token punctuation">,</span>\n  debug<span class="token operator">:</span> <span class="token regex">/something/</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <ul> <li><code>logging.hooks.log</code>: 런타임 로거에 플러그인을 적용하기 위해 사용합니다.</li> </ul> '}}]);