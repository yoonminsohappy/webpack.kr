"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5421],{5421:function(n,a,s){s.r(a),a.default='<p>이 옵션을 사용하면 webpack이 정해진 파일 제한을 초과하는 애셋과 엔트리 포인트에 대해 알릴 방법을 제어 할 수 있습니다. 이 기능은 <a href="https://github.com/webpack/webpack/issues/3216">webpack 성능 버짓</a>의 아이디어에서 영감을 받았습니다.</p> <h2 id="performance"><code>performance</code><a href="#performance" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>object</code></p> <p>성능 힌트가 표시되는 방법을 설정합니다. 예를 들어 애셋이 250kb를 초과하면, webpack이 이를 알리는 경고를 표시합니다.</p> <h2 id="performancehints"><code>performance.hints</code><a href="#performancehints" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string = \'warning\': \'error\' | \'warning\'</code> <code>boolean: false</code></p> <p>힌트를 켜거나 끕니다. 또한 힌트가 발견되면 webpack에 오류나 경고를 표시하도록 합니다.</p> <p>250kb를 초과하는 애셋이 생성된 경우입니다.</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  performance<span class="token operator">:</span> <span class="token punctuation">{</span>\n    hints<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>힌트 경고 또는 오류가 표시되지 않습니다</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  performance<span class="token operator">:</span> <span class="token punctuation">{</span>\n    hints<span class="token operator">:</span> <span class="token string">\'warning\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>큰 애셋을 알리는 경고가 표시됩니다. 개발 환경에서는 이처럼 사용하는 것을 권장합니다.</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  performance<span class="token operator">:</span> <span class="token punctuation">{</span>\n    hints<span class="token operator">:</span> <span class="token string">\'error\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>큰 애셋을 알려주는 오류가 표시됩니다. 크기가 너무 커서 웹 페이지 성능에 영향을 미치는 프로덕션 번들을 배포하는 것을 방지하기 위해, 프로덕션 빌드 시에는 <code>hints: "error"</code>를 사용하는 것이 좋습니다.</p> <h2 id="performancemaxentrypointsize"><code>performance.maxEntrypointSize</code><a href="#performancemaxentrypointsize" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>number = 250000</code></p> <p>엔트리 포인트는 특정 항목의 초기 로드 시간 동안 사용될 모든 애셋을 나타냅니다. 이 옵션은 webpack이 최대 엔트리 포인트 크기(단위:bytes)를 기준으로 성능 힌트를 내보낼 시기를 제어합니다.</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  performance<span class="token operator">:</span> <span class="token punctuation">{</span>\n    maxEntrypointSize<span class="token operator">:</span> <span class="token number">400000</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="performancemaxassetsize"><code>performance.maxAssetSize</code><a href="#performancemaxassetsize" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>number = 250000</code></p> <p>애셋은 webpack에서 내보낸 파일입니다. 이 옵션은 webpack이 개별 애셋 크기(단위:bytes)를 기준으로 성능 힌트를 내보낼 시기를 제어합니다.</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  performance<span class="token operator">:</span> <span class="token punctuation">{</span>\n    maxAssetSize<span class="token operator">:</span> <span class="token number">100000</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="performanceassetfilter"><code>performance.assetFilter</code><a href="#performanceassetfilter" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>function(assetFilename) => boolean</code></p> <p>이 속성을 통해 webpack은 성능 힌트를 계산하는 데 사용되는 파일을 제어할 수 있습니다. 기본 기능은 다음과 같습니다.</p> <pre><code class="hljs language-js"><span class="token keyword">function</span> <span class="token function">assetFilter</span><span class="token punctuation">(</span><span class="token parameter">assetFilename</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token regex">/\\.map$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>assetFilename<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <p>다음과 같이 함수를 전달하여 속성을 재정의할 수 있습니다.</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  performance<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">assetFilter</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">assetFilename</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> assetFilename<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">\'.js\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>위의 예에서는 <code>.js</code> 파일에 대한 성능 힌트만 제공합니다.</p> '}}]);