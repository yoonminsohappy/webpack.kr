(self.webpackChunk=self.webpackChunk||[]).push([[6125],{6125:function(n,e,s){"use strict";s.r(e),e.default='<p>이 가이드에서 프로덕션 사이트나 애플리케이션을 구축하기 위한 유틸리티와 좋은 사례들에 대해서 자세히 알아보겠습니다.</p> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>이 연습은 <a href="/guides/tree-shaking">Tree shaking</a>과 <a href="/guides/development">Development</a>에서 시작합니다. 계속하기 전에 해당 가이드에 소개된 콘셉트 및 설정을 잘 알고 있어야 합니다.</p></aside> <h2 id="setup">Setup<a href="#setup" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><em>development와</em> <em>production의</em> 빌드 목표는 매우 다릅니다. <em>development</em> 에서는 강력한 소스 매핑, localhost 서버에서는 라이브 리로딩이나 hot module replacement 기능을 원합니다. <em>production에서의</em> 목표는 로드 시간을 줄이기 위해 번들 최소화, 가벼운 소스맵 및 애셋 최적화에 초점을 맞추는 것으로 변경됩니다. 논리적으로 분리를 해야 하면 일반적으로 환경마다 <strong>webpack 설정을 분리하여</strong> 작성하는 것이 좋습니다.</p> <p><em>production과</em> <em>development에</em> 관련된 부분을 분리하더라도, 중복을 제거하기 위해 "공통"의 설정은 계속 유지해야 합니다. 이러한 설정을 합치기 위해 <a href="https://github.com/survivejs/webpack-merge"><code>webpack-merge</code></a> 유틸리티를 사용합니다. "공통"의 설정을 사용하면 환경별 설정에서 코드를 복사하지 않아도 됩니다.</p> <p><code>webpack-merge</code>를 설치하고 이전 가이드에서 이미 작업 한 부분을 분리하겠습니다.</p> <pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev webpack-merge</code></pre> <p><strong>project</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> webpack-demo\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- package.json\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> |- webpack.config.js\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> |- webpack.common.js\n</span><span class="token prefix inserted">+</span><span class="token line"> |- webpack.dev.js\n</span><span class="token prefix inserted">+</span><span class="token line"> |- webpack.prod.js\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> |- /dist\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /src\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- index.js\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- math.js\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /node_modules</span></span></code></pre> <p><strong>webpack.common.js</strong></p> <pre><code class="hljs language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> const path = require(\'path\');\n</span><span class="token prefix inserted">+</span><span class="token line"> const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n</span><span class="token prefix inserted">+</span><span class="token line">\n</span><span class="token prefix inserted">+</span><span class="token line"> module.exports = {\n</span><span class="token prefix inserted">+</span><span class="token line">   entry: {\n</span><span class="token prefix inserted">+</span><span class="token line">     app: \'./src/index.js\',\n</span><span class="token prefix inserted">+</span><span class="token line">   },\n</span><span class="token prefix inserted">+</span><span class="token line">   plugins: [\n</span><span class="token prefix inserted">+</span><span class="token line">     new HtmlWebpackPlugin({\n</span><span class="token prefix inserted">+</span><span class="token line">       title: \'Production\',\n</span><span class="token prefix inserted">+</span><span class="token line">     }),\n</span><span class="token prefix inserted">+</span><span class="token line">   ],\n</span><span class="token prefix inserted">+</span><span class="token line">   output: {\n</span><span class="token prefix inserted">+</span><span class="token line">     filename: \'[name].bundle.js\',\n</span><span class="token prefix inserted">+</span><span class="token line">     path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix inserted">+</span><span class="token line">     clean: true,\n</span><span class="token prefix inserted">+</span><span class="token line">   },\n</span><span class="token prefix inserted">+</span><span class="token line"> };</span></span></code></pre> <p><strong>webpack.dev.js</strong></p> <pre><code class="hljs language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> const { merge } = require(\'webpack-merge\');\n</span><span class="token prefix inserted">+</span><span class="token line"> const common = require(\'./webpack.common.js\');\n</span><span class="token prefix inserted">+</span><span class="token line">\n</span><span class="token prefix inserted">+</span><span class="token line"> module.exports = merge(common, {\n</span><span class="token prefix inserted">+</span><span class="token line">   mode: \'development\',\n</span><span class="token prefix inserted">+</span><span class="token line">   devtool: \'inline-source-map\',\n</span><span class="token prefix inserted">+</span><span class="token line">   devServer: {\n</span><span class="token prefix inserted">+</span><span class="token line">     contentBase: \'./dist\',\n</span><span class="token prefix inserted">+</span><span class="token line">   },\n</span><span class="token prefix inserted">+</span><span class="token line"> });</span></span></code></pre> <p><strong>webpack.prod.js</strong></p> <pre><code class="hljs language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> const { merge } = require(\'webpack-merge\');\n</span><span class="token prefix inserted">+</span><span class="token line"> const common = require(\'./webpack.common.js\');\n</span><span class="token prefix inserted">+</span><span class="token line">\n</span><span class="token prefix inserted">+</span><span class="token line"> module.exports = merge(common, {\n</span><span class="token prefix inserted">+</span><span class="token line">   mode: \'production\',\n</span><span class="token prefix inserted">+</span><span class="token line"> });</span></span></code></pre> <p><code>webpack.common.js</code>에서 <code>entry</code>와 <code>output</code>을 설정했으며, 두 환경에서 필요한 플러그인들을 포함했습니다. <code>webpack.dev.js</code>에서 <code>mode</code>를 <code>development</code>으로 설정했습니다. 또한, 해당 환경에 권장(강력한 소스 매핑)되는 <code>devtool</code>과 간단한 <code>devServer</code> 설정을 추가했습니다. 마지막으로 <code>webpack.prod.js</code>에 <code>mode</code>를 <a href="/guides/tree-shaking/">Tree shaking</a> 가이드에서 처음 언급했던 <a href="/plugins/terser-webpack-plugin/"><code>TerserPlugin</code></a>을 로드하기 위해 <code>production</code>으로 설정 합니다.</p> <p>환경별 설정에서 <code>merge()</code>를 사용하여 호출하면 <code>webpack.dev.js</code> 및 <code>webpack.prod.js</code>에 공통 설정을 포함합니다. <code>webpack-merge</code> 툴은 병합을 위한 다양한 고급 기능을 제공하지만, 지금 사례에서는 이런 기능이 필요하지 않습니다.</p> <h2 id="npm-scripts">NPM Scripts<a href="#npm-scripts" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>지금부터 새로운 설정 파일을 사용하기 위해 npm 스크립트를 수정해 보겠습니다. <code>webpack-dev-server</code>를 실행하는 <code>start</code> 스크립트의 경우 <code>webpack.dev.js</code>를 사용하고, 프로덕션 빌드를 만들기 위해 <code>webpack</code>을 실행하는 <code>build</code> 스크립트의 경우 <code>webpack.prod.js</code>를 사용합니다.</p> <p><strong>package.json</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> {\n</span><span class="token prefix unchanged"> </span><span class="token line">   "name": "development",\n</span><span class="token prefix unchanged"> </span><span class="token line">   "version": "1.0.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">   "description": "",\n</span><span class="token prefix unchanged"> </span><span class="token line">   "main": "src/index.js",\n</span><span class="token prefix unchanged"> </span><span class="token line">   "scripts": {\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">     "start": "webpack serve --open",\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     "start": "webpack serve --open --config webpack.dev.js",\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">     "build": "webpack"\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     "build": "webpack --config webpack.prod.js"\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line">   "keywords": [],\n</span><span class="token prefix unchanged"> </span><span class="token line">   "author": "",\n</span><span class="token prefix unchanged"> </span><span class="token line">   "license": "ISC",\n</span><span class="token prefix unchanged"> </span><span class="token line">   "devDependencies": {\n</span><span class="token prefix unchanged"> </span><span class="token line">     "css-loader": "^0.28.4",\n</span><span class="token prefix unchanged"> </span><span class="token line">     "csv-loader": "^2.1.1",\n</span><span class="token prefix unchanged"> </span><span class="token line">     "express": "^4.15.3",\n</span><span class="token prefix unchanged"> </span><span class="token line">     "file-loader": "^0.11.2",\n</span><span class="token prefix unchanged"> </span><span class="token line">     "html-webpack-plugin": "^2.29.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">     "style-loader": "^0.18.2",\n</span><span class="token prefix unchanged"> </span><span class="token line">     "webpack": "^4.30.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">     "webpack-dev-middleware": "^1.12.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">     "webpack-dev-server": "^2.9.1",\n</span><span class="token prefix unchanged"> </span><span class="token line">     "webpack-merge": "^4.1.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">     "xml-loader": "^1.2.1"\n</span><span class="token prefix unchanged"> </span><span class="token line">   }\n</span><span class="token prefix unchanged"> </span><span class="token line"> }</span></span></code></pre> <p><em>production</em> 설정을 계속 추가하는대로 출력이 어떻게 변경되는지 위 스크립트를 자유롭게 실행하여 확인해보세요.</p> <h2 id="specify-the-mode">Specify the Mode<a href="#specify-the-mode" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>많은 라이브러리는 <code>process.env.NODE_ENV</code> 변수를 이용하여 어떤 라이브러리를 포함해야 하는지 결정합니다. 예를 들어 <code>process.env.NODE_ENV</code>가 <code>\'production\'</code>으로 설정되지 않으면 몇몇 라이브러리는 디버깅의 편의성을 위해 로그 및 테스트를 추가할 수도 있습니다. 그러나 <code>process.env.NODE_ENV</code>가 <code>\'production\'</code>으로 설정되어 있으면 실제 사용자의 작업 실행 방식을 최적화 하기 위해 코드의 중요한 부분을 추가하거나 삭제 할 수 있습니다. webpack v4부터 <a href="/configuration/mode/"><code>mode</code></a>를 지정하면 <a href="/plugins/define-plugin"><code>DefinePlugin</code></a>이 자동으로 설정됩니다.</p> <p><strong>webpack.prod.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const { merge } = require(\'webpack-merge\');\n</span><span class="token prefix unchanged"> </span><span class="token line"> const common = require(\'./webpack.common.js\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module.exports = merge(common, {\n</span><span class="token prefix unchanged"> </span><span class="token line">   mode: \'production\',\n</span><span class="token prefix unchanged"> </span><span class="token line"> });</span></span></code></pre> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>기술적으로 <code>NODE_ENV</code>는 Node.js가 실행 중인 스크립트가 참고할 수 있는 시스템 환경 변수입니다. 이것은 서버 툴, 빌드 스크립트 및 클라이언트 라이브러리에 의한 dev-vs-prod의 동작을 결정하는 규칙에 사용됩니다. 예상과 달리 <code>process.env.NODE_ENV</code>는 빌드 스크립트인 <code>webpack.config.js</code> <strong>안에서</strong> <code>\'production\'</code>으로 설정되지 않습니다. <a href="https://github.com/webpack/webpack/issues/2537">#2537</a>을 참조해 주세요. 따라서 다음과 같은 조건은 <code>process.env.NODE_ENV === \'production\' ? \'[name].[contenthash].bundle.js\' : \'[name].bundle.js\'</code> webpack 설정에서 예상대로 동작하지 않습니다.</p></aside> <p><a href="https://reactjs.org/"><code>react</code></a>와 같은 라이브러리를 사용한다면 <code>DefinePlugin</code>을 추가한 후에 명확하게 번들 크기가 줄어야 합니다. 또한 로컬 <code>/src</code>의 코드 역시 제어 할 수 있습니다. 따라서 다음 검사는 유효합니다.</p> <p><strong>src/index.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> import { cube } from \'./math.js\';\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">\n</span><span class="token prefix inserted">+</span><span class="token line"> if (process.env.NODE_ENV !== \'production\') {\n</span><span class="token prefix inserted">+</span><span class="token line">   console.log(\'Looks like we are in development mode!\');\n</span><span class="token prefix inserted">+</span><span class="token line"> }\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> function component() {\n</span><span class="token prefix unchanged"> </span><span class="token line">   const element = document.createElement(\'pre\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   element.innerHTML = [\n</span><span class="token prefix unchanged"> </span><span class="token line">     \'Hello webpack!\',\n</span><span class="token prefix unchanged"> </span><span class="token line">     \'5 cubed is equal to \' + cube(5)\n</span><span class="token prefix unchanged"> </span><span class="token line">   ].join(\'\\n\\n\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   return element;\n</span><span class="token prefix unchanged"> </span><span class="token line"> }\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> document.body.appendChild(component());</span></span></code></pre> <h2 id="minification">Minification<a href="#minification" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>webpack v4+의 <a href="/configuration/mode/#mode-production"><code>production mode</code></a>에서는 기본으로 코드를 최소화합니다.</p> <p><a href="/plugins/terser-webpack-plugin/"><code>TerserPlugin</code></a>은 최소화를 시작하고 기본으로 사용하기에 좋지만 다른 옵션도 있습니다.</p> <ul> <li><a href="https://github.com/webpack-contrib/closure-webpack-plugin"><code>ClosureWebpackPlugin</code></a></li> </ul> <p>만약 다른 최소화 플러그인을 사용하기로 결정했다면, 다른 플러그인이 <a href="/guides/tree-shaking">Tree shaking</a> 가이드에 설명 된 대로 사용하지 않는 코드를 제거하고 <a href="/configuration/optimization/#optimizationminimizer"><code>optimization.minimizer</code></a>를 제공하는지 확인해야 합니다.</p> <h2 id="source-mapping">Source Mapping<a href="#source-mapping" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>소스맵은 디버깅뿐만 아니라 벤치마크 테스트에도 유용하므로 프로덕션에도 활성화하는 것이 좋습니다. 즉, 프로덕션용으로 추천되는 빌드 속도가 가장 빠른 것을 선택해야 합니다. (<a href="/configuration/devtool"><code>devtool</code></a> 참조) 이 가이드에서는 <em>development에서</em> 사용한 <code>inline-source-map</code>이 아닌 <em>production의</em> <code>source-map</code>을 사용합니다.</p> <p><strong>webpack.prod.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const { merge } = require(\'webpack-merge\');\n</span><span class="token prefix unchanged"> </span><span class="token line"> const common = require(\'./webpack.common.js\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module.exports = merge(common, {\n</span><span class="token prefix unchanged"> </span><span class="token line">   mode: \'production\',\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   devtool: \'source-map\',\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> });</span></span></code></pre> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>프로덕션에서 <code>inline-***</code>과 <code>eval-***</code>은 번들 크기가 커질 수 있으므로 전체 성능을 향상을 위해 사용하지 않습니다.</p></aside> <h2 id="minimize-css">Minimize CSS<a href="#minimize-css" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>프로덕션을 위해 CSS를 최소화하는 것이 중요합니다. <a href="/plugins/mini-css-extract-plugin/#minimizing-for-production">Minimizing for Production</a>을 참고하세요.</p> <h2 id="cli-alternatives">CLI Alternatives<a href="#cli-alternatives" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>위에서 설명한 대부분의 옵션은 커맨드 라인 인자로 설정할 수 있습니다. 예를 들어 <a href="/configuration/optimization/#optimizationminimize"><code>optimization.minimize은</code></a> <code>--optimization-minimize</code>, 그리고 <a href="/configuration/mode/"><code>mode는</code></a> <code>--mode</code>로 설정할 수 있습니다. CLI 인자의 전체 목록을 보려면 <code>npx webpack --help=verbose</code>를 실행하세요.</p> <p>이런 간단한 방식은 편리하지만, 좀 더 알맞은 설정을 위해 webpack 설정 파일에서 이런 옵션을 설정하는 것이 좋습니다.</p> '}}]);