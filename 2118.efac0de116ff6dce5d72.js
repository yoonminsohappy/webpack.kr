"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2118],{2118:function(e,a,s){s.r(a),a.default='<p><a href="https://en.wikipedia.org/wiki/Modular_programming">모듈형 프로그래밍(modular programmming)</a>에서 개발자는 <em>모듈</em>이라는 개별 기능으로 프로그램을 나눕니다.</p> <p>각 모듈은 전체 프로그램보다 영향 범위가 좁기 때문에 검증과 디버깅 및 테스트가 간단합니다. 잘 작성된 <em>모듈은</em> 견고한 추상화와 캡슐화의 경계를 만들므로 각 모듈은 전체 애플리케이션에서 일관성 있는 설계와 명확한 목적을 가질 수 있습니다.</p> <p>Node.js는 거의 시작부터 모듈형 프로그래밍을 지원했습니다. 하지만 웹에서는 <em>모듈의</em> 지원이 느리게 정착해왔습니다. 웹에서 모듈형 JavaScript를 지원하는 여러 도구가 존재하며 다양한 이점과 제한이 있습니다. webpack은 이러한 시스템에서 얻은 교훈을 바탕으로 제작되어 프로젝트의 모든 파일에 <em>모듈의</em> 개념을 사용합니다.</p> <h2 id="what-is-a-webpack-module">What is a webpack Module<a href="#what-is-a-webpack-module" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><a href="https://nodejs.org/api/modules.html">Node.js 모듈</a>과 달리 webpack <em>모듈은</em> 다양한 방식으로 <em>의존성을</em> 표현할 수 있습니다. 몇 가지 예는 다음과 같습니다.</p> <ul> <li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import">ES2015 <code>import</code></a> 문</li> <li><a href="http://www.commonjs.org/specs/modules/1.0/">CommonJS</a> <code>require()</code> 문</li> <li><a href="https://github.com/amdjs/amdjs-api/blob/master/AMD.md">AMD</a> <code>define</code> 과 <code>require</code> 문</li> <li>css/sass/less 파일 내의 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@import"><code>@import</code> 문</a>.</li> <li>스타일 시트 <code>url(...)</code> 의 이미지 URL 또는 HTML <code>&#x3C;img src=...></code> 파일</li> </ul> <h2 id="supported-module-types">Supported Module Types<a href="#supported-module-types" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>webpack은 기본적으로 다음 유형의 모듈을 지원합니다.</p> <ul> <li><a href="/guides/ecma-script-modules">ECMAScript 모듈</a></li> <li>CommonJS 모듈</li> <li>AMD 모듈</li> <li><a href="/guides/asset-modules">Assets</a></li> <li>WebAssembly 모듈</li> </ul> <p>그 밖에도 webpack은 여러 언어로 작성된 모듈과 <em>로더</em>를 통한 다양한 전처리기를 지원합니다. <em>로더는</em> webpack에서 네이티브가 아닌 <em>모듈을</em> <strong>어떻게</strong> 처리하고 이러한 <em>의존성을</em> <em>번들에</em> 포함할지 정의합니다. webpack 커뮤니티에서는 다음과 같이 널리 사용되는 다양한 언어와 언어 프로세서를 위한 <em>로더를</em> 제작했습니다.</p> <ul> <li><a href="http://coffeescript.org">CoffeeScript</a></li> <li><a href="https://www.typescriptlang.org">TypeScript</a></li> <li><a href="https://babeljs.io">ESNext (Babel)</a></li> <li><a href="http://sass-lang.com">Sass</a></li> <li><a href="http://lesscss.org">Less</a></li> <li><a href="http://stylus-lang.com">Stylus</a></li> <li><a href="https://elm-lang.org/">Elm</a></li> </ul> <p>그 외 다른 많은 것들을 지원합니다! 종합하면, webpack은 커스터마이징을 위한 강력하고 풍부한 API를 제공하여 <strong>어떤 환경에서도</strong> webpack을 사용할 수 있도록 하는 동시에, 개발과 테스트 및 프로덕션 작업 흐름을 <strong>유연하게</strong> 유지하도록 합니다.</p> <p>전체 목록은 <a href="/loaders"><strong>로더 목록</strong></a> 또는 <a href="/api/loaders"><strong>로더 직접 작성하기(write your own)</strong></a>를 참고하세요.</p> '}}]);