(self.webpackChunk=self.webpackChunk||[]).push([[9358],{9358:function(n,a,s){"use strict";s.r(a),a.default='<p><code>compiler</code>에 있는, <code>parser</code> 인스턴스는, webpack에서 처리 중인 각 모듈을 파싱하는 데 사용합니다. <code>parser</code>는 <code>tapable</code>을 확장하고 플러그인 작성자가 파싱 프로세스를 커스터마이징 하는데 사용할 수 있는 다양한 <code>tapable</code> 훅을 제공하는 또 다른 webpack 클래스입니다.</p> <p><code>parser</code>는 <a href="/api/compiler-hooks/#normalmodulefactory">NormalModuleFactory</a>에서 볼 수 있습니다.</p> <pre><code class="hljs language-js">compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>normalModuleFactory<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">\'MyPlugin\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">factory</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  factory<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>parser\n    <span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">\'javascript/auto\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">\'MyPlugin\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">parser<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      parser<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>someHook<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p><code>compiler</code>와 마찬가지로, <code>tapAsync</code> 그리고 <code>tapPromise</code>도 훅 타입에 따라 사용할 수 있습니다.</p> <h2 id="hooks">Hooks<a href="#hooks" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>다음 라이프사이클 훅은 <code>parser</code>에 의해 노출되며 접근할 수 있습니다.</p> <h3 id="evaluatetypeof">evaluateTypeof<a href="#evaluatetypeof" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncBailHook</code></p> <p>자유 변수의 <code>typeof</code>로 구성된 표현식을 평가할 때 트리거 됩니다.</p> <ul> <li>훅 파라미터: <code>identifier</code></li> <li>콜백 파라미터: <code>expression</code></li> </ul> <pre><code class="hljs language-js">parser<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>evaluateTypeof\n  <span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">\'myIdentifier\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">\'MyPlugin\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">expression</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">/* ... */</span>\n    <span class="token keyword">return</span> expressionResult<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>이것은 <code>evaluateTypeof</code> 훅을 트리거 합니다.</p> <pre><code class="hljs language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">typeof</span> myIdentifier<span class="token punctuation">;</span></code></pre> <p>다음은 트리거 되지 않습니다.</p> <pre><code class="hljs language-js"><span class="token keyword">const</span> myIdentifier <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token keyword">typeof</span> myIdentifier<span class="token punctuation">;</span></code></pre> <h3 id="evaluate">evaluate<a href="#evaluate" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncBailHook</code></p> <p>표현식을 평가할 때 호출됩니다.</p> <ul> <li>훅 파라미터: <code>expressionType</code></li> <li>콜백 파라미터: <code>expression</code></li> </ul> <p>예제입니다.</p> <p><strong>index.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p><strong>MyPlugin.js</strong></p> <pre><code class="hljs language-js">parser<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>evaluate<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">\'NewExpression\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">\'MyPlugin\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">expression</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">/* ... */</span>\n  <span class="token keyword">return</span> expressionResult<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>표현식 타입은 다음과 같습니다.</p> <ul> <li><code>\'ArrowFunctionExpression\'</code></li> <li><code>\'AssignmentExpression\'</code></li> <li><code>\'AwaitExpression\'</code></li> <li><code>\'BinaryExpression\'</code></li> <li><code>\'CallExpression\'</code></li> <li><code>\'ClassExpression\'</code></li> <li><code>\'ConditionalExpression\'</code></li> <li><code>\'FunctionExpression\'</code></li> <li><code>\'Identifier\'</code></li> <li><code>\'LogicalExpression\'</code></li> <li><code>\'MemberExpression\'</code></li> <li><code>\'NewExpression\'</code></li> <li><code>\'ObjectExpression\'</code></li> <li><code>\'SequenceExpression\'</code></li> <li><code>\'SpreadElement\'</code></li> <li><code>\'TaggedTemplateExpression\'</code></li> <li><code>\'TemplateLiteral\'</code></li> <li><code>\'ThisExpression\'</code></li> <li><code>\'UnaryExpression\'</code></li> <li><code>\'UpdateExpression\'</code></li> </ul> <h3 id="evaluateidentifier">evaluateIdentifier<a href="#evaluateidentifier" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncBailHook</code></p> <p>자유 변수인 식별자를 평가할 때 호출됩니다.</p> <ul> <li>훅 파라미터: <code>identifier</code></li> <li>콜백 파라미터: <code>expression</code></li> </ul> <h3 id="evaluatedefinedidentifier">evaluateDefinedIdentifier<a href="#evaluatedefinedidentifier" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncBailHook</code></p> <p>정의된 변수 식별자를 평가할 때 호출됩니다.</p> <ul> <li>훅 파라미터: <code>identifier</code></li> <li>콜백 파라미터: <code>expression</code></li> </ul> <h3 id="evaluatecallexpressionmember">evaluateCallExpressionMember<a href="#evaluatecallexpressionmember" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncBailHook</code></p> <p>성공적으로 평가된 표현식의 멤버 함수에 대한 호출을 평가할 때 호출됩니다.</p> <ul> <li>훅 파라미터: <code>identifier</code></li> <li>콜백 파라미터: <code>expression</code> <code>param</code></li> </ul> <p>이 표현식은 다음의 훅을 트리거 합니다.</p> <p><strong>index.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> expression<span class="token punctuation">.</span><span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p><strong>MyPlugin.js</strong></p> <pre><code class="hljs language-js">parser<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>evaluateCallExpressionMember\n  <span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">\'myFunc\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">\'MyPlugin\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">expression<span class="token punctuation">,</span> param</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">/* ... */</span>\n    <span class="token keyword">return</span> expressionResult<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h3 id="statement">statement<a href="#statement" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncBailHook</code></p> <p>코드 조각에서 파싱된 모든 구문에 대해 호출되는 범용적 훅입니다.</p> <ul> <li>콜백 파라미터: <code>statement</code></li> </ul> <pre><code class="hljs language-js">parser<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>statement<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">\'MyPlugin\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">statement</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">/* ... */</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p><code>statement.type</code>은 다음과 같을 수 있습니다.</p> <ul> <li><code>\'BlockStatement\'</code></li> <li><code>\'VariableDeclaration\'</code></li> <li><code>\'FunctionDeclaration\'</code></li> <li><code>\'ReturnStatement\'</code></li> <li><code>\'ClassDeclaration\'</code></li> <li><code>\'ExpressionStatement\'</code></li> <li><code>\'ImportDeclaration\'</code></li> <li><code>\'ExportAllDeclaration\'</code></li> <li><code>\'ExportDefaultDeclaration\'</code></li> <li><code>\'ExportNamedDeclaration\'</code></li> <li><code>\'IfStatement\'</code></li> <li><code>\'SwitchStatement\'</code></li> <li><code>\'ForInStatement\'</code></li> <li><code>\'ForOfStatement\'</code></li> <li><code>\'ForStatement\'</code></li> <li><code>\'WhileStatement\'</code></li> <li><code>\'DoWhileStatement\'</code></li> <li><code>\'ThrowStatement\'</code></li> <li><code>\'TryStatement\'</code></li> <li><code>\'LabeledStatement\'</code></li> <li><code>\'WithStatement\'</code></li> </ul> <h3 id="statementif">statementIf<a href="#statementif" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncBailHook</code></p> <p>if 구문을 파싱할 때 호출됩니다. <code>statement</code> 훅과 동일하지만, <code>statement.type == \'IfStatement\'</code>인 경우에만 트리거 됩니다.</p> <ul> <li>콜백 파라미터: <code>statement</code></li> </ul> <h3 id="label">label<a href="#label" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncBailHook</code></p> <p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label">label</a>이 있는 구문을 파싱할 때 호출됩니다. 이러한 구문에는 <code>statement.type === \'LabeledStatement\'</code>가 있습니다.</p> <ul> <li>훅 파라미터: <code>labelName</code></li> <li>콜백 파라미터: <code>statement</code></li> </ul> <h3 id="import">import<a href="#import" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncBailHook</code></p> <p>코드 조각의 모든 import 구문에 대해 호출됩니다. <code>source</code> 파라미터에는 가져온 파일의 이름이 포함됩니다.</p> <ul> <li>콜백 파라미터: <code>statement</code> <code>source</code></li> </ul> <p>다음의 import 구문은 훅을 한 번 트리거 합니다.</p> <p><strong>index.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> _ <span class="token keyword">from</span> <span class="token string">\'lodash\'</span><span class="token punctuation">;</span></code></pre> <p><strong>MyPlugin.js</strong></p> <pre><code class="hljs language-js">parser<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>import<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">\'MyPlugin\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">statement<span class="token punctuation">,</span> source</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// source == \'lodash\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h3 id="importspecifier">importSpecifier<a href="#importspecifier" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncBailHook</code></p> <p>모든 <code>import</code> 구문의 모든 지정자에 대해 호출됩니다.</p> <ul> <li>콜백 파라미터: <code>statement</code> <code>source</code> <code>exportName</code> <code>identifierName</code></li> </ul> <p>다음의 import 구문은 훅을 두 번 트리거 합니다.</p> <p><strong>index.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> _<span class="token punctuation">,</span> <span class="token punctuation">{</span> has <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'lodash\'</span><span class="token punctuation">;</span></code></pre> <p><strong>MyPlugin.js</strong></p> <pre><code class="hljs language-js">parser<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>importSpecifier<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span>\n  <span class="token string">\'MyPlugin\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token parameter">statement<span class="token punctuation">,</span> source<span class="token punctuation">,</span> exportName<span class="token punctuation">,</span> identifierName</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">/* First call\n    source == \'lodash\'\n    exportName == \'default\'\n    identifierName == \'_\'\n  */</span>\n    <span class="token comment">/* Second call\n    source == \'lodash\'\n    exportName == \'has\'\n    identifierName == \'has\'\n  */</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h3 id="export">export<a href="#export" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncBailHook</code></p> <p>코드 조각의 모든 <code>export</code> 구문에 대해 호출됩니다.</p> <ul> <li>콜백 파라미터: <code>statement</code></li> </ul> <h3 id="exportimport">exportImport<a href="#exportimport" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncBailHook</code></p> <p>모든 <code>export</code>-import 구문에 대해 호출됩니다. 예. <code>export * from \'otherModule\';</code>.</p> <ul> <li>콜백 파라미터: <code>statement</code> <code>source</code></li> </ul> <h3 id="exportdeclaration">exportDeclaration<a href="#exportdeclaration" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncBailHook</code></p> <p>선언을 내보내는 모든 <code>export</code> 구문에 대해 호출됩니다.</p> <ul> <li>콜백 파라미터: <code>statement</code> <code>declaration</code></li> </ul> <p>이러한 내보내기는 다음의 훅을 트리거 합니다.</p> <pre><code class="hljs language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> myVar <span class="token operator">=</span> <span class="token string">\'hello\'</span><span class="token punctuation">;</span> <span class="token comment">// 또한 var, let</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">FunctionName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ClassName</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre> <h3 id="exportexpression">exportExpression<a href="#exportexpression" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncBailHook</code></p> <p>표현식을 내보내는 모든 <code>export</code> 구문에 대해 호출됩니다. 예. <code>export default expression;</code>.</p> <ul> <li>콜백 파라미터: <code>statement</code> <code>declaration</code></li> </ul> <h3 id="exportspecifier">exportSpecifier<a href="#exportspecifier" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncBailHook</code></p> <p>모든 <code>export</code> 구문의 모든 지정자에 대해 호출됩니다.</p> <ul> <li>콜백 파라미터: <code>statement</code> <code>identifierName</code> <code>exportName</code> <code>index</code></li> </ul> <h3 id="exportimportspecifier">exportImportSpecifier<a href="#exportimportspecifier" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncBailHook</code></p> <p>모든 <code>export</code>-import 구문의 모든 지정자에 대해 호출됩니다.</p> <ul> <li>콜백 파라미터: <code>statement</code> <code>source</code> <code>identifierName</code> <code>exportName</code> <code>index</code></li> </ul> <h3 id="vardeclaration">varDeclaration<a href="#vardeclaration" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncBailHook</code></p> <p>변수 선언문을 파싱할 때 호출됩니다.</p> <ul> <li>콜백 파라미터: <code>declaration</code></li> </ul> <h3 id="vardeclarationlet">varDeclarationLet<a href="#vardeclarationlet" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncBailHook</code></p> <p><code>let</code>을 사용해 정의된 변수 선언문을 파싱할 때 호출됩니다.</p> <ul> <li>콜백 파라미터: <code>declaration</code></li> </ul> <h3 id="vardeclarationconst">varDeclarationConst<a href="#vardeclarationconst" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncBailHook</code></p> <p><code>const</code>를 사용해 정의된 변수 선언문을 파싱할 때 호출됩니다.</p> <ul> <li>콜백 파라미터: <code>declaration</code></li> </ul> <h3 id="vardeclarationvar">varDeclarationVar<a href="#vardeclarationvar" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncBailHook</code></p> <p><code>var</code>를 사용해 정의된 변수 선언문을 파싱할 때 호출됩니다.</p> <ul> <li>콜백 파라미터: <code>declaration</code></li> </ul> <h3 id="canrename">canRename<a href="#canrename" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncBailHook</code></p> <p>이름 변경이 허용되는지 확인하기 위해 식별자의 이름을 변경하기 전에 트리거 됩니다. 일반적으로 <code>rename</code> 훅과 함께 사용됩니다.</p> <ul> <li>훅 파라미터: <code>identifier</code></li> <li>콜백 파라미터: <code>expression</code></li> </ul> <pre><code class="hljs language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> b<span class="token punctuation">;</span>\n\nparser<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>canRename<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">\'b\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">\'MyPlugin\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">expression</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// true를 반환하면 이름을 변경할 수 있습니다.</span>\n  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h3 id="rename">rename<a href="#rename" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncBailHook</code></p> <p>새 식별자를 가져오기 위해 이름을 바꿀 때 트리거 됩니다. 이 훅은 <code>canRename</code>이 <code>true</code>를 반환하는 경우에 호출됩니다.</p> <ul> <li>훅 파라미터: <code>identifier</code></li> <li>콜백 파라미터: <code>expression</code></li> </ul> <pre><code class="hljs language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> b<span class="token punctuation">;</span>\n\nparser<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>rename<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">\'b\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">\'MyPlugin\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">expression</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h3 id="assigned">assigned<a href="#assigned" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncBailHook</code></p> <p>할당된 표현식을 파싱하기 전에 <code>AssignmentExpression</code>을 파싱할 경우에 호출됩니다.</p> <ul> <li>훅 파라미터: <code>identifier</code></li> <li>콜백 파라미터: <code>expression</code></li> </ul> <pre><code class="hljs language-js">a <span class="token operator">+=</span> b<span class="token punctuation">;</span>\n\nparser<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>assigned<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">\'a\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">\'MyPlugin\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">expression</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// 이것은 b를 파싱하기 전에 호출됩니다.</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h3 id="assign">assign<a href="#assign" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncBailHook</code></p> <p>할당 표현식을 파싱하기 전에 <code>AssignmentExpression</code>을 파싱할 경우에 호출됩니다.</p> <ul> <li>훅 파라미터: <code>identifier</code></li> <li>콜백 파라미터: <code>expression</code></li> </ul> <pre><code class="hljs language-js">a <span class="token operator">+=</span> b<span class="token punctuation">;</span>\n\nparser<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>assigned<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">\'a\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">\'MyPlugin\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">expression</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// 이것은 a를 파싱하기 전에 호출됩니다.</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h3 id="typeof">typeof<a href="#typeof" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncBailHook</code></p> <p>식별자의 <code>typeof</code>를 파싱할 때 트리거 됩니다.</p> <ul> <li>훅 파라미터: <code>identifier</code></li> <li>콜백 파라미터: <code>expression</code></li> </ul> <h3 id="call">call<a href="#call" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncBailHook</code></p> <p>함수 호출을 파싱할 때 호출됩니다.</p> <ul> <li>훅 파라미터: <code>identifier</code></li> <li>콜백 파라미터: <code>expression</code></li> </ul> <pre><code class="hljs language-js"><span class="token function">eval</span><span class="token punctuation">(</span><span class="token comment">/* something */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nparser<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>call<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">\'eval\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">\'MyPlugin\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">expression</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h3 id="callmemberchain">callMemberChain<a href="#callmemberchain" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncBailHook</code></p> <p>객체의 멤버 함수에 대한 호출을 파싱할 경우 트리거 됩니다.</p> <ul> <li>훅 파라미터: <code>objectIdentifier</code></li> <li>콜백 파라미터: <code>expression, properties</code></li> </ul> <pre><code class="hljs language-js">myObj<span class="token punctuation">.</span><span class="token function">anyFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nparser<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>callMemberChain\n  <span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">\'myObj\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">\'MyPlugin\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">expression<span class="token punctuation">,</span> properties</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h3 id="new">new<a href="#new" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncBailHook</code></p> <p><code>new</code> 표현식을 파싱할 때 호출됩니다.</p> <ul> <li>훅 파라미터: <code>identifier</code></li> <li>콜백 파라미터: <code>expression</code></li> </ul> <pre><code class="hljs language-js"><span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nparser<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>new<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">\'MyClass\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">\'MyPlugin\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">expression</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h3 id="expression">expression<a href="#expression" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncBailHook</code></p> <p>표현식을 파싱할 때 호출됩니다.</p> <ul> <li>훅 파라미터: <code>identifier</code></li> <li>콜백 파라미터: <code>expression</code></li> </ul> <pre><code class="hljs language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n\nparser<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>expression<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">\'this\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">\'MyPlugin\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">expression</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h3 id="expressionconditionaloperator">expressionConditionalOperator<a href="#expressionconditionaloperator" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncBailHook</code></p> <p><code>ConditionalExpression</code>을 파싱할 때 호출됩니다. 예. <code>condition ? a : b</code></p> <ul> <li>콜백 파라미터: <code>expression</code></li> </ul> <h3 id="program">program<a href="#program" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncBailHook</code></p> <p>코드 조각의 추상 구문 트리(AST)에 접근합니다.</p> <ul> <li>파라미터: <code>ast</code> <code>comments</code></li> </ul> '}}]);