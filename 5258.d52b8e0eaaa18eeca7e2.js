(self.webpackChunk=self.webpackChunk||[]).push([[5258],{5258:function(n,a,s){"use strict";s.r(a),a.default='<p><strong>webpack은</strong> 모던 JavaScript 애플리케이션을 위한 <em>정적 모듈 번들러</em> 입니다. webpack이 애플리케이션을 처리할 때, 내부적으로는 프로젝트에 필요한 모든 모듈을 매핑하고 하나 이상의 <em>번들을</em> 생성하는 <a href="/concepts/dependency-graph/">디펜던시 그래프</a>를 만듭니다.</p> <aside class="tip"><h6 class="tip__prefix">tip</h6><p><a href="/concepts/modules">여기에서</a> JavaScript 모듈 및 webpack 모듈에 대해 자세히 확인할 수 있습니다.</p></aside> <p>webpack 버전 4.0.0 이후로는 프로젝트를 번들링하기 위한 <strong>설정 파일을 필요로 하지 않습니다.</strong> 하지만 사용자 요구에 따라 기대 이상으로 유연하게 <a href="/configuration">설정이 가능</a> 합니다.</p> <p>다음의 <strong>핵심 개념만</strong> 이해하면 시작할 수 있습니다.</p> <ul> <li><a href="#entry">Entry(엔트리)</a></li> <li><a href="#output">Output(출력)</a></li> <li><a href="#loaders">Loaders(로더)</a></li> <li><a href="#plugins">Plugins(플러그인)</a></li> <li><a href="#mode">Mode(모드)</a></li> <li><a href="#browser-compatibility">Browser Compatibility(브라우저 호환성)</a></li> </ul> <p>이 문서에는 위 개념의 대략적인 개요를 제공하고, 개념별로 최적화된 사용 사례를 확인할 수 있는 링크를 제공하기 위한 목적으로 작성되었습니다.</p> <p>모듈 번들러의 개념과 내부에서 동작하는 방식을 더 잘 이해하려면 다음 자료를 참고하세요.</p> <ul> <li><a href="https://www.youtube.com/watch?v=UNMkLHzofQI">수동으로 애플리케이션을 번들링하기</a></li> <li><a href="https://www.youtube.com/watch?v=Gc9-7PBqOC8">간단한 모듈 번들러 라이브 코딩</a></li> <li><a href="https://github.com/ronami/minipack">간단한 모듈 번들러에 대한 자세한 설명</a></li> </ul> <h2 id="entry">Entry<a href="#entry" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><strong>엔트리 포인트는</strong> webpack이 내부의 <a href="/concepts/dependency-graph/">디펜던시 그래프</a> 를 생성하기 위해 사용해야 하는 모듈입니다. webpack은 엔트리 포인트가 (직간접적으로) 의존하는 다른 모듈과 라이브러리를 찾아냅니다.</p> <p>기본값은 <code>./src/index.js</code>이지만, <a href="/configuration/entry-context/#entry">webpack 설정에서 <code>entry</code> 속성</a>을 설정하여 다른 (또는 여러 엔트리 포인트)를 지정할 수 있습니다. 예를 들어보겠습니다.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token operator">:</span> <span class="token string">\'./path/to/my/entry/file.js\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <aside class="tip"><h6 class="tip__prefix">tip</h6><p><a href="/concepts/entry-points">엔트리 포인트</a>에서 자세히 알아보세요.</p></aside> <h2 id="output">Output<a href="#output" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><strong>output</strong> 속성은 생성된 <em>번들을</em> 내보낼 위치와 이 파일의 이름을 지정하는 방법을 webpack에 알려주는 역할을 합니다. 기본 출력 파일의 경우에는 <code>./dist/main.js</code>로 , 생성된 기타 파일의 경우에는 <code>./dist</code> 폴더로 설정됩니다.</p> <p>다음과 같이 설정에서 <code>output</code> 필드를 지정할 수 있습니다.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token operator">:</span> <span class="token string">\'./path/to/my/entry/file.js\'</span><span class="token punctuation">,</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    filename<span class="token operator">:</span> <span class="token string">\'my-first-webpack.bundle.js\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>위의 예제에서, <code>output.filename</code>과 <code>output.path</code> 속성을 사용하여 webpack에 번들의 이름과 내보낼 위치를 알려주었습니다. 상단에서 가져오는 path 모듈이 무엇인지 궁금할 수 있는데, 이것은 파일 경로를 지정하기 위해 사용되는 core Node.js 모듈입니다.</p> <aside class="tip"><h6 class="tip__prefix">tip</h6><p><code>output</code> 속성에는 <a href="/configuration/output">설정 가능한 더 많은 기능</a>이 있습니다. 그 밖의 개념에 대해 더 배우고 싶다면, <a href="/concepts/output">출력</a> 을 읽어보세요.</p></aside> <h2 id="loaders">Loaders<a href="#loaders" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>webpack은 기본적으로 JavaScript와 JSON 파일만 이해합니다. <strong>로더를</strong> 사용하면 webpack이 다른 유형의 파일을 처리하거나, 그들을 유효한 <a href="/concepts/modules">모듈</a>로 변환 하여 애플리케이션에서 사용하거나 디펜던시 그래프에 추가합니다.</p> <aside class="warning"><h6 class="warning__prefix">warning</h6><p>모든 유형의 모듈(예: <code>.css</code>)을 <code>import</code> 하는 기능은 webpack의 고유한 기능이며 다른 번들러나 태스크 러너에서 지원하지 않을 수 있습니다. 개발자들에게 더욱 정확한 디펜던시 그래프를 생성하는 데 도움을 주기 때문에 이러한 언어의 확장이 필요하다고 생각합니다.</p></aside> <p>상위 수준에서 <strong>로더는</strong> webpack 설정에 두 가지 속성을 가집니다.</p> <ol> <li>변한이 필요한 파일(들)을 식별하는 <code>test</code> 속성</li> <li>변환을 수행하는데 사용되는 로더를 가리키는 <code>use</code> 속성</li> </ol> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    filename<span class="token operator">:</span> <span class="token string">\'my-first-webpack.bundle.js\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> test<span class="token operator">:</span> <span class="token regex">/\\.txt$/</span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token string">\'raw-loader\'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>위 설정에서는 <code>test</code>와 <code>use</code>라는 두 가지 필수 속성을 가진 하나의 모듈을 위해 <code>rules</code> 속성을 정의했습니다. 이는 webpack의 컴파일러에 다음과 같이 말합니다.</p> <blockquote> <p>"이봐 webpack 컴파일러, <code>require ()</code>/<code>import</code> 문 내에서 \'.txt\' 파일로 확인되는 경로를 발견하면 번들에 추가하기 전에 <code>raw-loader</code>를 <strong>사용하여</strong> 변환해."</p> </blockquote> <aside class="warning"><h6 class="warning__prefix">warning</h6><p>webpack 설정에서 규칙을 정의할 때 <code>rules</code>가 아닌 <code>module.rules</code> 아래에 정의한다는 것을 기억하세요. 당신의 편의를 위해 webpack은 잘못 정의한 경우에 경고를 합니다.</p></aside> <aside class="warning"><h6 class="warning__prefix">warning</h6><p>정규식을 사용하여 파일을 매칭할 때 따옴표를 사용하지 않도록 주의하세요. 즉, <code>/\\.txt$/</code>는 <code>\'/\\.txt$/\'</code> 또는 <code>"/\\.txt$/"</code>와 같지 않습니다. 전자는 webpack에 .txt로 끝나는 모든 파일과 일치하도록 지시하고 후자는 webpack에 절대 경로 \'.txt\'를 가진 단일 파일과 일치하도록 지시합니다. 이는 당신의 의도한 것이 아닐 가능성이 높습니다.</p></aside> <p>더 상세한 사용자 지정 설정에 대해서는 <a href="/concepts/loaders">로더</a>에서 확인하실 수 있습니다.</p> <h2 id="plugins">Plugins<a href="#plugins" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>로더는 특정 유형의 모듈을 변환하는 데 사용되지만, 플러그인을 활용하여 번들을 최적화하거나, 애셋을 관리하고, 또 환경 변수 주입등과 같은 광범위한 작업을 수행 할 수 있습니다.</p> <aside class="tip"><h6 class="tip__prefix">tip</h6><p><a href="/api/plugins">플러그인 인터페이스</a>를 사용하여 webpack의 기능을 확장하는 방법을 확인해보세요.</p></aside> <p>플러그인을 사용하려면 <code>require ()</code>를 통해 플러그인을 요청하고 <code>plugins</code> 배열에 추가해야 합니다. 대부분의 플러그인은 옵션을 통해 사용자가 지정할 수 있습니다. 다른 목적으로 플러그인을 여러 번 사용하도록 설정할 수 있으므로 <code>new</code> 연산자로 호출하여 플러그인의 인스턴스를 만들어야 합니다.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript"><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'html-webpack-plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// npm을 통해 설치</span>\n<span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 내장 plugin에 접근하는 데 사용</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> test<span class="token operator">:</span> <span class="token regex">/\\.txt$/</span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token string">\'raw-loader\'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> template<span class="token operator">:</span> <span class="token string">\'./src/index.html\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>위의 예제에서 <code>html-webpack-plugin</code>은 생성된 모든 번들을 자동으로 삽입하여 애플리케이션용 HTML 파일을 생성합니다.</p> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>webpack은 설치 없이 사용할 수 있는 많은 플러그인을 제공합니다! <a href="/plugins">plugin 목록</a>을 확인해보세요.</p></aside> <p>webpack 설정에서 플러그인을 사용하는 것은 간단하지만, 추가로 실제 사용 사례들도 살펴볼만한 가치가 있습니다. <a href="/concepts/plugins">여기에서</a> 자세히 알아보세요.</p> <h2 id="mode">Mode<a href="#mode" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>mode</code> 파라미터를 <code>development</code>, <code>production</code> 또는 <code>none</code>으로 설정하면 webpack에 내장된 환경별 최적화를 활성화 할 수 있습니다. 기본값은 <code>production</code> 입니다.</p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  mode<span class="token operator">:</span> <span class="token string">\'production\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p><a href="/configuration/mode">여기에서</a> 모드 구성에 대해 자세히 알아보고 각 값에서 어떤 최적화가 수행되는지 알아보세요.</p> <h2 id="browser-compatibility">Browser Compatibility<a href="#browser-compatibility" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>webpack은 <a href="https://kangax.github.io/compat-table/es5/">ES5</a>가 호환되는 모든 브라우저를 지원합니다(IE8 이하는 지원되지 않습니다). webpack은 <a href="/guides/code-splitting/#dynamic-imports"><code>import()</code> 및 <code>require.ensure()</code></a>을 위한 <code>Promise</code>를 요구합니다. 구형 브라우저를 지원하려면 이러한 표현식을 사용하기 전에 <a href="/guides/shimming/">폴리필을 로드</a>해야 합니다.</p> <h2 id="environment">Environment<a href="#environment" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>webpack 5는 Node.js 버전 10.13.0 이상에서 실행됩니다.</p> '}}]);